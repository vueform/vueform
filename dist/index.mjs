/*!
 * Vueform v1.13.2 (https://github.com/vueform/vueform)
 * Copyright (c) 2025 Adam Berecz <adam@vueform.com>
 * Licensed under the MIT License
 */

import { ref, toRefs, computed, watch, getCurrentInstance, provide, onBeforeMount, onMounted, onBeforeUpdate, onUpdated, onBeforeUnmount, onUnmounted, markRaw, h, inject, nextTick, reactive } from 'vue';
import axios from 'axios';
import moment from 'moment';

function asyncGeneratorStep(n, t, e, r, o, a, c) {
  try {
    var i = n[a](c),
      u = i.value;
  } catch (n) {
    return void e(n);
  }
  i.done ? t(u) : Promise.resolve(u).then(r, o);
}
function _asyncToGenerator(n) {
  return function () {
    var t = this,
      e = arguments;
    return new Promise(function (r, o) {
      var a = n.apply(t, e);
      function _next(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
      }
      function _throw(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
      }
      _next(void 0);
    });
  };
}
function _defineProperty$2(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}
function ownKeys$1(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2$1(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) {
      _defineProperty$2(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var each$1 = {exports: {}};

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */

function arrayEach$2(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

var _arrayEach = arrayEach$2;

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */

function createBaseFor$1(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

var _createBaseFor = createBaseFor$1;

var createBaseFor = _createBaseFor;

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor$2 = createBaseFor();

var _baseFor = baseFor$2;

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */

function baseTimes$1(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

var _baseTimes = baseTimes$1;

/** Detect free variable `global` from Node.js. */

var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

var _freeGlobal = freeGlobal$1;

var freeGlobal = _freeGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root$8 = freeGlobal || freeSelf || Function('return this')();

var _root = root$8;

var root$7 = _root;

/** Built-in value references. */
var Symbol$7 = root$7.Symbol;

var _Symbol = Symbol$7;

var Symbol$6 = _Symbol;

/** Used for built-in method references. */
var objectProto$g = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$e = objectProto$g.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$g.toString;

/** Built-in value references. */
var symToStringTag$1 = Symbol$6 ? Symbol$6.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag$1(value) {
  var isOwn = hasOwnProperty$e.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];

  try {
    value[symToStringTag$1] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}

var _getRawTag = getRawTag$1;

/** Used for built-in method references. */

var objectProto$f = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto$f.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString$1(value) {
  return nativeObjectToString.call(value);
}

var _objectToString = objectToString$1;

var Symbol$5 = _Symbol,
    getRawTag = _getRawTag,
    objectToString = _objectToString;

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol$5 ? Symbol$5.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag$7(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

var _baseGetTag = baseGetTag$7;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

function isObjectLike$a(value) {
  return value != null && typeof value == 'object';
}

var isObjectLike_1 = isObjectLike$a;

var baseGetTag$6 = _baseGetTag,
    isObjectLike$9 = isObjectLike_1;

/** `Object#toString` result references. */
var argsTag$3 = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments$1(value) {
  return isObjectLike$9(value) && baseGetTag$6(value) == argsTag$3;
}

var _baseIsArguments = baseIsArguments$1;

var baseIsArguments = _baseIsArguments,
    isObjectLike$8 = isObjectLike_1;

/** Used for built-in method references. */
var objectProto$e = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$d = objectProto$e.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable$1 = objectProto$e.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments$5 = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike$8(value) && hasOwnProperty$d.call(value, 'callee') &&
    !propertyIsEnumerable$1.call(value, 'callee');
};

var isArguments_1 = isArguments$5;

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

var isArray$k = Array.isArray;

var isArray_1 = isArray$k;

var isBuffer$6 = {exports: {}};

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */

function stubFalse() {
  return false;
}

var stubFalse_1 = stubFalse;

(function (module, exports) {
	var root = _root,
	    stubFalse = stubFalse_1;

	/** Detect free variable `exports`. */
	var freeExports = exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	module.exports = isBuffer;
} (isBuffer$6, isBuffer$6.exports));

/** Used as references for various `Number` constants. */

var MAX_SAFE_INTEGER$1 = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex$4(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER$1 : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

var _isIndex = isIndex$4;

/** Used as references for various `Number` constants. */

var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength$3(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

var isLength_1 = isLength$3;

var baseGetTag$5 = _baseGetTag,
    isLength$2 = isLength_1,
    isObjectLike$7 = isObjectLike_1;

/** `Object#toString` result references. */
var argsTag$2 = '[object Arguments]',
    arrayTag$2 = '[object Array]',
    boolTag$3 = '[object Boolean]',
    dateTag$3 = '[object Date]',
    errorTag$2 = '[object Error]',
    funcTag$2 = '[object Function]',
    mapTag$6 = '[object Map]',
    numberTag$3 = '[object Number]',
    objectTag$4 = '[object Object]',
    regexpTag$3 = '[object RegExp]',
    setTag$6 = '[object Set]',
    stringTag$4 = '[object String]',
    weakMapTag$2 = '[object WeakMap]';

var arrayBufferTag$3 = '[object ArrayBuffer]',
    dataViewTag$4 = '[object DataView]',
    float32Tag$2 = '[object Float32Array]',
    float64Tag$2 = '[object Float64Array]',
    int8Tag$2 = '[object Int8Array]',
    int16Tag$2 = '[object Int16Array]',
    int32Tag$2 = '[object Int32Array]',
    uint8Tag$2 = '[object Uint8Array]',
    uint8ClampedTag$2 = '[object Uint8ClampedArray]',
    uint16Tag$2 = '[object Uint16Array]',
    uint32Tag$2 = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] =
typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] =
typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] =
typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] =
typedArrayTags[uint32Tag$2] = true;
typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] =
typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] =
typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] =
typedArrayTags[errorTag$2] = typedArrayTags[funcTag$2] =
typedArrayTags[mapTag$6] = typedArrayTags[numberTag$3] =
typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$3] =
typedArrayTags[setTag$6] = typedArrayTags[stringTag$4] =
typedArrayTags[weakMapTag$2] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray$1(value) {
  return isObjectLike$7(value) &&
    isLength$2(value.length) && !!typedArrayTags[baseGetTag$5(value)];
}

var _baseIsTypedArray = baseIsTypedArray$1;

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */

function baseUnary$5(func) {
  return function(value) {
    return func(value);
  };
}

var _baseUnary = baseUnary$5;

var _nodeUtil = {exports: {}};

(function (module, exports) {
	var freeGlobal = _freeGlobal;

	/** Detect free variable `exports`. */
	var freeExports = exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    // Use `util.types` for Node.js 10+.
	    var types = freeModule && freeModule.require && freeModule.require('util').types;

	    if (types) {
	      return types;
	    }

	    // Legacy `process.binding('util')` for Node.js < 10.
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());

	module.exports = nodeUtil;
} (_nodeUtil, _nodeUtil.exports));

var baseIsTypedArray = _baseIsTypedArray,
    baseUnary$4 = _baseUnary,
    nodeUtil$2 = _nodeUtil.exports;

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray$4 = nodeIsTypedArray ? baseUnary$4(nodeIsTypedArray) : baseIsTypedArray;

var isTypedArray_1 = isTypedArray$4;

var baseTimes = _baseTimes,
    isArguments$4 = isArguments_1,
    isArray$j = isArray_1,
    isBuffer$5 = isBuffer$6.exports,
    isIndex$3 = _isIndex,
    isTypedArray$3 = isTypedArray_1;

/** Used for built-in method references. */
var objectProto$d = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$c = objectProto$d.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys$2(value, inherited) {
  var isArr = isArray$j(value),
      isArg = !isArr && isArguments$4(value),
      isBuff = !isArr && !isArg && isBuffer$5(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray$3(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty$c.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex$3(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

var _arrayLikeKeys = arrayLikeKeys$2;

/** Used for built-in method references. */

var objectProto$c = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype$4(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$c;

  return value === proto;
}

var _isPrototype = isPrototype$4;

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */

function overArg$2(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

var _overArg = overArg$2;

var overArg$1 = _overArg;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys$1 = overArg$1(Object.keys, Object);

var _nativeKeys = nativeKeys$1;

var isPrototype$3 = _isPrototype,
    nativeKeys = _nativeKeys;

/** Used for built-in method references. */
var objectProto$b = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$b = objectProto$b.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys$2(object) {
  if (!isPrototype$3(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$b.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

var _baseKeys = baseKeys$2;

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

function isObject$b(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

var isObject_1 = isObject$b;

var baseGetTag$4 = _baseGetTag,
    isObject$a = isObject_1;

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag$1 = '[object Function]',
    genTag$1 = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction$4(value) {
  if (!isObject$a(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag$4(value);
  return tag == funcTag$1 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
}

var isFunction_1 = isFunction$4;

var isFunction$3 = isFunction_1,
    isLength$1 = isLength_1;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike$9(value) {
  return value != null && isLength$1(value.length) && !isFunction$3(value);
}

var isArrayLike_1 = isArrayLike$9;

var arrayLikeKeys$1 = _arrayLikeKeys,
    baseKeys$1 = _baseKeys,
    isArrayLike$8 = isArrayLike_1;

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys$7(object) {
  return isArrayLike$8(object) ? arrayLikeKeys$1(object) : baseKeys$1(object);
}

var keys_1 = keys$7;

var baseFor$1 = _baseFor,
    keys$6 = keys_1;

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn$2(object, iteratee) {
  return object && baseFor$1(object, iteratee, keys$6);
}

var _baseForOwn = baseForOwn$2;

var isArrayLike$7 = isArrayLike_1;

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach$1(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike$7(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

var _createBaseEach = createBaseEach$1;

var baseForOwn$1 = _baseForOwn,
    createBaseEach = _createBaseEach;

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach$5 = createBaseEach(baseForOwn$1);

var _baseEach = baseEach$5;

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */

function identity$5(value) {
  return value;
}

var identity_1 = identity$5;

var identity$4 = identity_1;

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction$1(value) {
  return typeof value == 'function' ? value : identity$4;
}

var _castFunction = castFunction$1;

var arrayEach$1 = _arrayEach,
    baseEach$4 = _baseEach,
    castFunction = _castFunction,
    isArray$i = isArray_1;

/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _.forEach([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forEach(collection, iteratee) {
  var func = isArray$i(collection) ? arrayEach$1 : baseEach$4;
  return func(collection, castFunction(iteratee));
}

var forEach_1 = forEach;

(function (module) {
	module.exports = forEach_1;
} (each$1));

var each = /*@__PURE__*/getDefaultExportFromCjs(each$1.exports);

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */

function listCacheClear$1() {
  this.__data__ = [];
  this.size = 0;
}

var _listCacheClear = listCacheClear$1;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */

function eq$5(value, other) {
  return value === other || (value !== value && other !== other);
}

var eq_1 = eq$5;

var eq$4 = eq_1;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf$4(array, key) {
  var length = array.length;
  while (length--) {
    if (eq$4(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

var _assocIndexOf = assocIndexOf$4;

var assocIndexOf$3 = _assocIndexOf;

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete$1(key) {
  var data = this.__data__,
      index = assocIndexOf$3(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

var _listCacheDelete = listCacheDelete$1;

var assocIndexOf$2 = _assocIndexOf;

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet$1(key) {
  var data = this.__data__,
      index = assocIndexOf$2(data, key);

  return index < 0 ? undefined : data[index][1];
}

var _listCacheGet = listCacheGet$1;

var assocIndexOf$1 = _assocIndexOf;

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas$1(key) {
  return assocIndexOf$1(this.__data__, key) > -1;
}

var _listCacheHas = listCacheHas$1;

var assocIndexOf = _assocIndexOf;

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet$1(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

var _listCacheSet = listCacheSet$1;

var listCacheClear = _listCacheClear,
    listCacheDelete = _listCacheDelete,
    listCacheGet = _listCacheGet,
    listCacheHas = _listCacheHas,
    listCacheSet = _listCacheSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache$4(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache$4.prototype.clear = listCacheClear;
ListCache$4.prototype['delete'] = listCacheDelete;
ListCache$4.prototype.get = listCacheGet;
ListCache$4.prototype.has = listCacheHas;
ListCache$4.prototype.set = listCacheSet;

var _ListCache = ListCache$4;

var ListCache$3 = _ListCache;

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear$1() {
  this.__data__ = new ListCache$3;
  this.size = 0;
}

var _stackClear = stackClear$1;

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

function stackDelete$1(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

var _stackDelete = stackDelete$1;

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

function stackGet$1(key) {
  return this.__data__.get(key);
}

var _stackGet = stackGet$1;

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

function stackHas$1(key) {
  return this.__data__.has(key);
}

var _stackHas = stackHas$1;

var root$6 = _root;

/** Used to detect overreaching core-js shims. */
var coreJsData$1 = root$6['__core-js_shared__'];

var _coreJsData = coreJsData$1;

var coreJsData = _coreJsData;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked$1(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

var _isMasked = isMasked$1;

/** Used for built-in method references. */

var funcProto$2 = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$2 = funcProto$2.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource$2(func) {
  if (func != null) {
    try {
      return funcToString$2.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

var _toSource = toSource$2;

var isFunction$2 = isFunction_1,
    isMasked = _isMasked,
    isObject$9 = isObject_1,
    toSource$1 = _toSource;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto$1 = Function.prototype,
    objectProto$a = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$1 = funcProto$1.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$a = objectProto$a.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString$1.call(hasOwnProperty$a).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative$1(value) {
  if (!isObject$9(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource$1(value));
}

var _baseIsNative = baseIsNative$1;

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

function getValue$1(object, key) {
  return object == null ? undefined : object[key];
}

var _getValue = getValue$1;

var baseIsNative = _baseIsNative,
    getValue = _getValue;

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative$7(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

var _getNative = getNative$7;

var getNative$6 = _getNative,
    root$5 = _root;

/* Built-in method references that are verified to be native. */
var Map$4 = getNative$6(root$5, 'Map');

var _Map = Map$4;

var getNative$5 = _getNative;

/* Built-in method references that are verified to be native. */
var nativeCreate$4 = getNative$5(Object, 'create');

var _nativeCreate = nativeCreate$4;

var nativeCreate$3 = _nativeCreate;

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear$1() {
  this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
  this.size = 0;
}

var _hashClear = hashClear$1;

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

function hashDelete$1(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

var _hashDelete = hashDelete$1;

var nativeCreate$2 = _nativeCreate;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto$9 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$9 = objectProto$9.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet$1(key) {
  var data = this.__data__;
  if (nativeCreate$2) {
    var result = data[key];
    return result === HASH_UNDEFINED$2 ? undefined : result;
  }
  return hasOwnProperty$9.call(data, key) ? data[key] : undefined;
}

var _hashGet = hashGet$1;

var nativeCreate$1 = _nativeCreate;

/** Used for built-in method references. */
var objectProto$8 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$8 = objectProto$8.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas$1(key) {
  var data = this.__data__;
  return nativeCreate$1 ? (data[key] !== undefined) : hasOwnProperty$8.call(data, key);
}

var _hashHas = hashHas$1;

var nativeCreate = _nativeCreate;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet$1(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
  return this;
}

var _hashSet = hashSet$1;

var hashClear = _hashClear,
    hashDelete = _hashDelete,
    hashGet = _hashGet,
    hashHas = _hashHas,
    hashSet = _hashSet;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash$1(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash$1.prototype.clear = hashClear;
Hash$1.prototype['delete'] = hashDelete;
Hash$1.prototype.get = hashGet;
Hash$1.prototype.has = hashHas;
Hash$1.prototype.set = hashSet;

var _Hash = Hash$1;

var Hash = _Hash,
    ListCache$2 = _ListCache,
    Map$3 = _Map;

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear$1() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map$3 || ListCache$2),
    'string': new Hash
  };
}

var _mapCacheClear = mapCacheClear$1;

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */

function isKeyable$1(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

var _isKeyable = isKeyable$1;

var isKeyable = _isKeyable;

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData$4(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

var _getMapData = getMapData$4;

var getMapData$3 = _getMapData;

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete$1(key) {
  var result = getMapData$3(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

var _mapCacheDelete = mapCacheDelete$1;

var getMapData$2 = _getMapData;

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet$1(key) {
  return getMapData$2(this, key).get(key);
}

var _mapCacheGet = mapCacheGet$1;

var getMapData$1 = _getMapData;

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas$1(key) {
  return getMapData$1(this, key).has(key);
}

var _mapCacheHas = mapCacheHas$1;

var getMapData = _getMapData;

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet$1(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

var _mapCacheSet = mapCacheSet$1;

var mapCacheClear = _mapCacheClear,
    mapCacheDelete = _mapCacheDelete,
    mapCacheGet = _mapCacheGet,
    mapCacheHas = _mapCacheHas,
    mapCacheSet = _mapCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache$3(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache$3.prototype.clear = mapCacheClear;
MapCache$3.prototype['delete'] = mapCacheDelete;
MapCache$3.prototype.get = mapCacheGet;
MapCache$3.prototype.has = mapCacheHas;
MapCache$3.prototype.set = mapCacheSet;

var _MapCache = MapCache$3;

var ListCache$1 = _ListCache,
    Map$2 = _Map,
    MapCache$2 = _MapCache;

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE$2 = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet$1(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache$1) {
    var pairs = data.__data__;
    if (!Map$2 || (pairs.length < LARGE_ARRAY_SIZE$2 - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache$2(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

var _stackSet = stackSet$1;

var ListCache = _ListCache,
    stackClear = _stackClear,
    stackDelete = _stackDelete,
    stackGet = _stackGet,
    stackHas = _stackHas,
    stackSet = _stackSet;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack$4(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack$4.prototype.clear = stackClear;
Stack$4.prototype['delete'] = stackDelete;
Stack$4.prototype.get = stackGet;
Stack$4.prototype.has = stackHas;
Stack$4.prototype.set = stackSet;

var _Stack = Stack$4;

var getNative$4 = _getNative;

var defineProperty$2 = (function() {
  try {
    var func = getNative$4(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

var _defineProperty$1 = defineProperty$2;

var defineProperty$1 = _defineProperty$1;

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue$4(object, key, value) {
  if (key == '__proto__' && defineProperty$1) {
    defineProperty$1(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

var _baseAssignValue = baseAssignValue$4;

var baseAssignValue$3 = _baseAssignValue,
    eq$3 = eq_1;

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue$2(object, key, value) {
  if ((value !== undefined && !eq$3(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue$3(object, key, value);
  }
}

var _assignMergeValue = assignMergeValue$2;

var _cloneBuffer = {exports: {}};

(function (module, exports) {
	var root = _root;

	/** Detect free variable `exports`. */
	var freeExports = exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var length = buffer.length,
	      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	  buffer.copy(result);
	  return result;
	}

	module.exports = cloneBuffer;
} (_cloneBuffer, _cloneBuffer.exports));

var root$4 = _root;

/** Built-in value references. */
var Uint8Array$2 = root$4.Uint8Array;

var _Uint8Array = Uint8Array$2;

var Uint8Array$1 = _Uint8Array;

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer$3(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
  return result;
}

var _cloneArrayBuffer = cloneArrayBuffer$3;

var cloneArrayBuffer$2 = _cloneArrayBuffer;

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray$2(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer$2(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

var _cloneTypedArray = cloneTypedArray$2;

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */

function copyArray$3(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

var _copyArray = copyArray$3;

var isObject$8 = isObject_1;

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate$1 = (function() {
  function object() {}
  return function(proto) {
    if (!isObject$8(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

var _baseCreate = baseCreate$1;

var overArg = _overArg;

/** Built-in value references. */
var getPrototype$3 = overArg(Object.getPrototypeOf, Object);

var _getPrototype = getPrototype$3;

var baseCreate = _baseCreate,
    getPrototype$2 = _getPrototype,
    isPrototype$2 = _isPrototype;

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject$2(object) {
  return (typeof object.constructor == 'function' && !isPrototype$2(object))
    ? baseCreate(getPrototype$2(object))
    : {};
}

var _initCloneObject = initCloneObject$2;

var isArrayLike$6 = isArrayLike_1,
    isObjectLike$6 = isObjectLike_1;

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject$4(value) {
  return isObjectLike$6(value) && isArrayLike$6(value);
}

var isArrayLikeObject_1 = isArrayLikeObject$4;

var baseGetTag$3 = _baseGetTag,
    getPrototype$1 = _getPrototype,
    isObjectLike$5 = isObjectLike_1;

/** `Object#toString` result references. */
var objectTag$3 = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto$7 = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$7 = objectProto$7.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject$2(value) {
  if (!isObjectLike$5(value) || baseGetTag$3(value) != objectTag$3) {
    return false;
  }
  var proto = getPrototype$1(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty$7.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

var isPlainObject_1 = isPlainObject$2;

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

function safeGet$2(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

var _safeGet = safeGet$2;

var baseAssignValue$2 = _baseAssignValue,
    eq$2 = eq_1;

/** Used for built-in method references. */
var objectProto$6 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$6 = objectProto$6.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue$3(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty$6.call(object, key) && eq$2(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue$2(object, key, value);
  }
}

var _assignValue = assignValue$3;

var assignValue$2 = _assignValue,
    baseAssignValue$1 = _baseAssignValue;

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject$6(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue$1(object, key, newValue);
    } else {
      assignValue$2(object, key, newValue);
    }
  }
  return object;
}

var _copyObject = copyObject$6;

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

function nativeKeysIn$1(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

var _nativeKeysIn = nativeKeysIn$1;

var isObject$7 = isObject_1,
    isPrototype$1 = _isPrototype,
    nativeKeysIn = _nativeKeysIn;

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$5 = objectProto$5.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn$1(object) {
  if (!isObject$7(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype$1(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty$5.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

var _baseKeysIn = baseKeysIn$1;

var arrayLikeKeys = _arrayLikeKeys,
    baseKeysIn = _baseKeysIn,
    isArrayLike$5 = isArrayLike_1;

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn$5(object) {
  return isArrayLike$5(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

var keysIn_1 = keysIn$5;

var copyObject$5 = _copyObject,
    keysIn$4 = keysIn_1;

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject$1(value) {
  return copyObject$5(value, keysIn$4(value));
}

var toPlainObject_1 = toPlainObject$1;

var assignMergeValue$1 = _assignMergeValue,
    cloneBuffer$1 = _cloneBuffer.exports,
    cloneTypedArray$1 = _cloneTypedArray,
    copyArray$2 = _copyArray,
    initCloneObject$1 = _initCloneObject,
    isArguments$3 = isArguments_1,
    isArray$h = isArray_1,
    isArrayLikeObject$3 = isArrayLikeObject_1,
    isBuffer$4 = isBuffer$6.exports,
    isFunction$1 = isFunction_1,
    isObject$6 = isObject_1,
    isPlainObject$1 = isPlainObject_1,
    isTypedArray$2 = isTypedArray_1,
    safeGet$1 = _safeGet,
    toPlainObject = toPlainObject_1;

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep$1(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet$1(object, key),
      srcValue = safeGet$1(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue$1(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray$h(srcValue),
        isBuff = !isArr && isBuffer$4(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray$2(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray$h(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject$3(objValue)) {
        newValue = copyArray$2(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer$1(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray$1(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject$1(srcValue) || isArguments$3(srcValue)) {
      newValue = objValue;
      if (isArguments$3(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject$6(objValue) || isFunction$1(objValue)) {
        newValue = initCloneObject$1(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue$1(object, key, newValue);
}

var _baseMergeDeep = baseMergeDeep$1;

var Stack$3 = _Stack,
    assignMergeValue = _assignMergeValue,
    baseFor = _baseFor,
    baseMergeDeep = _baseMergeDeep,
    isObject$5 = isObject_1,
    keysIn$3 = keysIn_1,
    safeGet = _safeGet;

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge$1(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor(source, function(srcValue, key) {
    stack || (stack = new Stack$3);
    if (isObject$5(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge$1, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn$3);
}

var _baseMerge = baseMerge$1;

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */

function apply$2(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

var _apply = apply$2;

var apply$1 = _apply;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$3 = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest$2(func, start, transform) {
  start = nativeMax$3(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax$3(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply$1(func, this, otherArgs);
  };
}

var _overRest = overRest$2;

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */

function constant$1(value) {
  return function() {
    return value;
  };
}

var constant_1 = constant$1;

var constant = constant_1,
    defineProperty = _defineProperty$1,
    identity$3 = identity_1;

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString$1 = !defineProperty ? identity$3 : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

var _baseSetToString = baseSetToString$1;

/** Used to detect hot functions by number of calls within a span of milliseconds. */

var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut$1(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

var _shortOut = shortOut$1;

var baseSetToString = _baseSetToString,
    shortOut = _shortOut;

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString$2 = shortOut(baseSetToString);

var _setToString = setToString$2;

var identity$2 = identity_1,
    overRest$1 = _overRest,
    setToString$1 = _setToString;

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest$5(func, start) {
  return setToString$1(overRest$1(func, start, identity$2), func + '');
}

var _baseRest = baseRest$5;

var eq$1 = eq_1,
    isArrayLike$4 = isArrayLike_1,
    isIndex$2 = _isIndex,
    isObject$4 = isObject_1;

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall$3(value, index, object) {
  if (!isObject$4(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike$4(object) && isIndex$2(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq$1(object[index], value);
  }
  return false;
}

var _isIterateeCall = isIterateeCall$3;

var baseRest$4 = _baseRest,
    isIterateeCall$2 = _isIterateeCall;

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner$1(assigner) {
  return baseRest$4(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall$2(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

var _createAssigner = createAssigner$1;

var baseMerge = _baseMerge,
    createAssigner = _createAssigner;

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

var merge_1 = merge;

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */

function arraySome$2(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

var _arraySome = arraySome$2;

/** Used to stand-in for `undefined` hash values. */

var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd$1(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

var _setCacheAdd = setCacheAdd$1;

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */

function setCacheHas$1(value) {
  return this.__data__.has(value);
}

var _setCacheHas = setCacheHas$1;

var MapCache$1 = _MapCache,
    setCacheAdd = _setCacheAdd,
    setCacheHas = _setCacheHas;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache$3(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache$1;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache$3.prototype.add = SetCache$3.prototype.push = setCacheAdd;
SetCache$3.prototype.has = setCacheHas;

var _SetCache = SetCache$3;

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

function cacheHas$3(cache, key) {
  return cache.has(key);
}

var _cacheHas = cacheHas$3;

var SetCache$2 = _SetCache,
    arraySome$1 = _arraySome,
    cacheHas$2 = _cacheHas;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$5 = 1,
    COMPARE_UNORDERED_FLAG$3 = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG$3) ? new SetCache$2 : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome$1(other, function(othValue, othIndex) {
            if (!cacheHas$2(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

var _equalArrays = equalArrays$2;

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */

function mapToArray$1(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

var _mapToArray = mapToArray$1;

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */

function setToArray$3(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

var _setToArray = setToArray$3;

var Symbol$4 = _Symbol,
    Uint8Array = _Uint8Array,
    eq = eq_1,
    equalArrays$1 = _equalArrays,
    mapToArray = _mapToArray,
    setToArray$2 = _setToArray;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$4 = 1,
    COMPARE_UNORDERED_FLAG$2 = 2;

/** `Object#toString` result references. */
var boolTag$2 = '[object Boolean]',
    dateTag$2 = '[object Date]',
    errorTag$1 = '[object Error]',
    mapTag$5 = '[object Map]',
    numberTag$2 = '[object Number]',
    regexpTag$2 = '[object RegExp]',
    setTag$5 = '[object Set]',
    stringTag$3 = '[object String]',
    symbolTag$3 = '[object Symbol]';

var arrayBufferTag$2 = '[object ArrayBuffer]',
    dataViewTag$3 = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto$2 = Symbol$4 ? Symbol$4.prototype : undefined,
    symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag$3:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag$2:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag$2:
    case dateTag$2:
    case numberTag$2:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag$1:
      return object.name == other.name && object.message == other.message;

    case regexpTag$2:
    case stringTag$3:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag$5:
      var convert = mapToArray;

    case setTag$5:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
      convert || (convert = setToArray$2);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG$2;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag$3:
      if (symbolValueOf$1) {
        return symbolValueOf$1.call(object) == symbolValueOf$1.call(other);
      }
  }
  return false;
}

var _equalByTag = equalByTag$1;

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */

function arrayPush$5(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

var _arrayPush = arrayPush$5;

var arrayPush$4 = _arrayPush,
    isArray$g = isArray_1;

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray$g(object) ? result : arrayPush$4(result, symbolsFunc(object));
}

var _baseGetAllKeys = baseGetAllKeys$2;

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */

function arrayFilter$3(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

var _arrayFilter = arrayFilter$3;

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */

function stubArray$2() {
  return [];
}

var stubArray_1 = stubArray$2;

var arrayFilter$2 = _arrayFilter,
    stubArray$1 = stubArray_1;

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto$4.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols$4 = !nativeGetSymbols$1 ? stubArray$1 : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter$2(nativeGetSymbols$1(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

var _getSymbols = getSymbols$4;

var baseGetAllKeys$1 = _baseGetAllKeys,
    getSymbols$3 = _getSymbols,
    keys$5 = keys_1;

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys$2(object) {
  return baseGetAllKeys$1(object, keys$5, getSymbols$3);
}

var _getAllKeys = getAllKeys$2;

var getAllKeys$1 = _getAllKeys;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$3 = 1;

/** Used for built-in method references. */
var objectProto$3 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$4 = objectProto$3.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
      objProps = getAllKeys$1(object),
      objLength = objProps.length,
      othProps = getAllKeys$1(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty$4.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

var _equalObjects = equalObjects$1;

var getNative$3 = _getNative,
    root$3 = _root;

/* Built-in method references that are verified to be native. */
var DataView$1 = getNative$3(root$3, 'DataView');

var _DataView = DataView$1;

var getNative$2 = _getNative,
    root$2 = _root;

/* Built-in method references that are verified to be native. */
var Promise$2 = getNative$2(root$2, 'Promise');

var _Promise = Promise$2;

var getNative$1 = _getNative,
    root$1 = _root;

/* Built-in method references that are verified to be native. */
var Set$2 = getNative$1(root$1, 'Set');

var _Set = Set$2;

var getNative = _getNative,
    root = _root;

/* Built-in method references that are verified to be native. */
var WeakMap$1 = getNative(root, 'WeakMap');

var _WeakMap = WeakMap$1;

var DataView = _DataView,
    Map$1 = _Map,
    Promise$1 = _Promise,
    Set$1 = _Set,
    WeakMap = _WeakMap,
    baseGetTag$2 = _baseGetTag,
    toSource = _toSource;

/** `Object#toString` result references. */
var mapTag$4 = '[object Map]',
    objectTag$2 = '[object Object]',
    promiseTag = '[object Promise]',
    setTag$4 = '[object Set]',
    weakMapTag$1 = '[object WeakMap]';

var dataViewTag$2 = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map$1),
    promiseCtorString = toSource(Promise$1),
    setCtorString = toSource(Set$1),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag$5 = baseGetTag$2;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag$5(new DataView(new ArrayBuffer(1))) != dataViewTag$2) ||
    (Map$1 && getTag$5(new Map$1) != mapTag$4) ||
    (Promise$1 && getTag$5(Promise$1.resolve()) != promiseTag) ||
    (Set$1 && getTag$5(new Set$1) != setTag$4) ||
    (WeakMap && getTag$5(new WeakMap) != weakMapTag$1)) {
  getTag$5 = function(value) {
    var result = baseGetTag$2(value),
        Ctor = result == objectTag$2 ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag$2;
        case mapCtorString: return mapTag$4;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag$4;
        case weakMapCtorString: return weakMapTag$1;
      }
    }
    return result;
  };
}

var _getTag = getTag$5;

var Stack$2 = _Stack,
    equalArrays = _equalArrays,
    equalByTag = _equalByTag,
    equalObjects = _equalObjects,
    getTag$4 = _getTag,
    isArray$f = isArray_1,
    isBuffer$3 = isBuffer$6.exports,
    isTypedArray$1 = isTypedArray_1;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$2 = 1;

/** `Object#toString` result references. */
var argsTag$1 = '[object Arguments]',
    arrayTag$1 = '[object Array]',
    objectTag$1 = '[object Object]';

/** Used for built-in method references. */
var objectProto$2 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$2.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray$f(object),
      othIsArr = isArray$f(other),
      objTag = objIsArr ? arrayTag$1 : getTag$4(object),
      othTag = othIsArr ? arrayTag$1 : getTag$4(other);

  objTag = objTag == argsTag$1 ? objectTag$1 : objTag;
  othTag = othTag == argsTag$1 ? objectTag$1 : othTag;

  var objIsObj = objTag == objectTag$1,
      othIsObj = othTag == objectTag$1,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer$3(object)) {
    if (!isBuffer$3(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack$2);
    return (objIsArr || isTypedArray$1(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
    var objIsWrapped = objIsObj && hasOwnProperty$3.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty$3.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack$2);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack$2);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

var _baseIsEqualDeep = baseIsEqualDeep$1;

var baseIsEqualDeep = _baseIsEqualDeep,
    isObjectLike$4 = isObjectLike_1;

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual$3(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike$4(value) && !isObjectLike$4(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$3, stack);
}

var _baseIsEqual = baseIsEqual$3;

var Stack$1 = _Stack,
    baseIsEqual$2 = _baseIsEqual;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$1 = 1,
    COMPARE_UNORDERED_FLAG$1 = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch$1(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack$1;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual$2(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

var _baseIsMatch = baseIsMatch$1;

var isObject$3 = isObject_1;

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable$2(value) {
  return value === value && !isObject$3(value);
}

var _isStrictComparable = isStrictComparable$2;

var isStrictComparable$1 = _isStrictComparable,
    keys$4 = keys_1;

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData$1(object) {
  var result = keys$4(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable$1(value)];
  }
  return result;
}

var _getMatchData = getMatchData$1;

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */

function matchesStrictComparable$2(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

var _matchesStrictComparable = matchesStrictComparable$2;

var baseIsMatch = _baseIsMatch,
    getMatchData = _getMatchData,
    matchesStrictComparable$1 = _matchesStrictComparable;

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches$1(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

var _baseMatches = baseMatches$1;

var baseGetTag$1 = _baseGetTag,
    isObjectLike$3 = isObjectLike_1;

/** `Object#toString` result references. */
var symbolTag$2 = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol$5(value) {
  return typeof value == 'symbol' ||
    (isObjectLike$3(value) && baseGetTag$1(value) == symbolTag$2);
}

var isSymbol_1 = isSymbol$5;

var isArray$e = isArray_1,
    isSymbol$4 = isSymbol_1;

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey$3(value, object) {
  if (isArray$e(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol$4(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

var _isKey = isKey$3;

var MapCache = _MapCache;

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize$1(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize$1.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize$1.Cache = MapCache;

var memoize_1 = memoize$1;

var memoize = memoize_1;

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped$1(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

var _memoizeCapped = memoizeCapped$1;

var memoizeCapped = _memoizeCapped;

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath$1 = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

var _stringToPath = stringToPath$1;

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */

function arrayMap$7(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

var _arrayMap = arrayMap$7;

var Symbol$3 = _Symbol,
    arrayMap$6 = _arrayMap,
    isArray$d = isArray_1,
    isSymbol$3 = isSymbol_1;

/** Used as references for various `Number` constants. */
var INFINITY$4 = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto$1 = Symbol$3 ? Symbol$3.prototype : undefined,
    symbolToString = symbolProto$1 ? symbolProto$1.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString$4(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray$d(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap$6(value, baseToString$4) + '';
  }
  if (isSymbol$3(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$4) ? '-0' : result;
}

var _baseToString = baseToString$4;

var baseToString$3 = _baseToString;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString$9(value) {
  return value == null ? '' : baseToString$3(value);
}

var toString_1 = toString$9;

var isArray$c = isArray_1,
    isKey$2 = _isKey,
    stringToPath = _stringToPath,
    toString$8 = toString_1;

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath$6(value, object) {
  if (isArray$c(value)) {
    return value;
  }
  return isKey$2(value, object) ? [value] : stringToPath(toString$8(value));
}

var _castPath = castPath$6;

var isSymbol$2 = isSymbol_1;

/** Used as references for various `Number` constants. */
var INFINITY$3 = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey$6(value) {
  if (typeof value == 'string' || isSymbol$2(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$3) ? '-0' : result;
}

var _toKey = toKey$6;

var castPath$5 = _castPath,
    toKey$5 = _toKey;

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet$5(object, path) {
  path = castPath$5(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey$5(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

var _baseGet = baseGet$5;

var baseGet$4 = _baseGet;

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get$1(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet$4(object, path);
  return result === undefined ? defaultValue : result;
}

var get_1 = get$1;

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */

function baseHasIn$1(object, key) {
  return object != null && key in Object(object);
}

var _baseHasIn = baseHasIn$1;

var castPath$4 = _castPath,
    isArguments$2 = isArguments_1,
    isArray$b = isArray_1,
    isIndex$1 = _isIndex,
    isLength = isLength_1,
    toKey$4 = _toKey;

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath$1(object, path, hasFunc) {
  path = castPath$4(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey$4(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex$1(key, length) &&
    (isArray$b(object) || isArguments$2(object));
}

var _hasPath = hasPath$1;

var baseHasIn = _baseHasIn,
    hasPath = _hasPath;

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn$2(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

var hasIn_1 = hasIn$2;

var baseIsEqual$1 = _baseIsEqual,
    get = get_1,
    hasIn$1 = hasIn_1,
    isKey$1 = _isKey,
    isStrictComparable = _isStrictComparable,
    matchesStrictComparable = _matchesStrictComparable,
    toKey$3 = _toKey;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty$1(path, srcValue) {
  if (isKey$1(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey$3(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn$1(object, path)
      : baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

var _baseMatchesProperty = baseMatchesProperty$1;

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */

function baseProperty$1(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

var _baseProperty = baseProperty$1;

var baseGet$3 = _baseGet;

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep$1(path) {
  return function(object) {
    return baseGet$3(object, path);
  };
}

var _basePropertyDeep = basePropertyDeep$1;

var baseProperty = _baseProperty,
    basePropertyDeep = _basePropertyDeep,
    isKey = _isKey,
    toKey$2 = _toKey;

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property$1(path) {
  return isKey(path) ? baseProperty(toKey$2(path)) : basePropertyDeep(path);
}

var property_1 = property$1;

var baseMatches = _baseMatches,
    baseMatchesProperty = _baseMatchesProperty,
    identity$1 = identity_1,
    isArray$a = isArray_1,
    property = property_1;

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee$9(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity$1;
  }
  if (typeof value == 'object') {
    return isArray$a(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

var _baseIteratee = baseIteratee$9;

var baseEach$3 = _baseEach;

/**
 * The base implementation of `_.some` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function baseSome$1(collection, predicate) {
  var result;

  baseEach$3(collection, function(value, index, collection) {
    result = predicate(value, index, collection);
    return !result;
  });
  return !!result;
}

var _baseSome = baseSome$1;

var arraySome = _arraySome,
    baseIteratee$8 = _baseIteratee,
    baseSome = _baseSome,
    isArray$9 = isArray_1,
    isIterateeCall$1 = _isIterateeCall;

/**
 * Checks if `predicate` returns truthy for **any** element of `collection`.
 * Iteration is stopped once `predicate` returns truthy. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 * @example
 *
 * _.some([null, 0, 'yes', false], Boolean);
 * // => true
 *
 * var users = [
 *   { 'user': 'barney', 'active': true },
 *   { 'user': 'fred',   'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.some(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.some(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.some(users, 'active');
 * // => true
 */
function some(collection, predicate, guard) {
  var func = isArray$9(collection) ? arraySome : baseSome;
  if (guard && isIterateeCall$1(collection, predicate, guard)) {
    predicate = undefined;
  }
  return func(collection, baseIteratee$8(predicate));
}

var some_1 = some;

var baseKeys = _baseKeys,
    getTag$3 = _getTag,
    isArguments$1 = isArguments_1,
    isArray$8 = isArray_1,
    isArrayLike$3 = isArrayLike_1,
    isBuffer$2 = isBuffer$6.exports,
    isPrototype = _isPrototype,
    isTypedArray = isTypedArray_1;

/** `Object#toString` result references. */
var mapTag$3 = '[object Map]',
    setTag$3 = '[object Set]';

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$1.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike$3(value) &&
      (isArray$8(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        isBuffer$2(value) || isTypedArray(value) || isArguments$1(value))) {
    return !value.length;
  }
  var tag = getTag$3(value);
  if (tag == mapTag$3 || tag == setTag$3) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty$2.call(value, key)) {
      return false;
    }
  }
  return true;
}

var isEmpty_1 = isEmpty;

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */

function baseSlice$2(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

var _baseSlice = baseSlice$2;

var baseSlice$1 = _baseSlice;

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice$2(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return (!start && end >= length) ? array : baseSlice$1(array, start, end);
}

var _castSlice = castSlice$2;

/** Used to compose unicode character classes. */

var rsAstralRange$2 = '\\ud800-\\udfff',
    rsComboMarksRange$3 = '\\u0300-\\u036f',
    reComboHalfMarksRange$3 = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange$3 = '\\u20d0-\\u20ff',
    rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
    rsVarRange$2 = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsZWJ$2 = '\\u200d';

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ$2 + rsAstralRange$2  + rsComboRange$3 + rsVarRange$2 + ']');

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode$2(string) {
  return reHasUnicode.test(string);
}

var _hasUnicode = hasUnicode$2;

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

function asciiToArray$1(string) {
  return string.split('');
}

var _asciiToArray = asciiToArray$1;

/** Used to compose unicode character classes. */

var rsAstralRange$1 = '\\ud800-\\udfff',
    rsComboMarksRange$2 = '\\u0300-\\u036f',
    reComboHalfMarksRange$2 = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange$2 = '\\u20d0-\\u20ff',
    rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2,
    rsVarRange$1 = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange$1 + ']',
    rsCombo$2 = '[' + rsComboRange$2 + ']',
    rsFitz$1 = '\\ud83c[\\udffb-\\udfff]',
    rsModifier$1 = '(?:' + rsCombo$2 + '|' + rsFitz$1 + ')',
    rsNonAstral$1 = '[^' + rsAstralRange$1 + ']',
    rsRegional$1 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair$1 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ$1 = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod$1 = rsModifier$1 + '?',
    rsOptVar$1 = '[' + rsVarRange$1 + ']?',
    rsOptJoin$1 = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
    rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
    rsSymbol = '(?:' + [rsNonAstral$1 + rsCombo$2 + '?', rsCombo$2, rsRegional$1, rsSurrPair$1, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz$1 + '(?=' + rsFitz$1 + ')|' + rsSymbol + rsSeq$1, 'g');

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray$1(string) {
  return string.match(reUnicode) || [];
}

var _unicodeToArray = unicodeToArray$1;

var asciiToArray = _asciiToArray,
    hasUnicode$1 = _hasUnicode,
    unicodeToArray = _unicodeToArray;

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray$2(string) {
  return hasUnicode$1(string)
    ? unicodeToArray(string)
    : asciiToArray(string);
}

var _stringToArray = stringToArray$2;

var castSlice$1 = _castSlice,
    hasUnicode = _hasUnicode,
    stringToArray$1 = _stringToArray,
    toString$7 = toString_1;

/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */
function createCaseFirst$2(methodName) {
  return function(string) {
    string = toString$7(string);

    var strSymbols = hasUnicode(string)
      ? stringToArray$1(string)
      : undefined;

    var chr = strSymbols
      ? strSymbols[0]
      : string.charAt(0);

    var trailing = strSymbols
      ? castSlice$1(strSymbols, 1).join('')
      : string.slice(1);

    return chr[methodName]() + trailing;
  };
}

var _createCaseFirst = createCaseFirst$2;

var createCaseFirst$1 = _createCaseFirst;

/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */
var upperFirst$1 = createCaseFirst$1('toUpperCase');

var upperFirst_1 = upperFirst$1;

var baseEach$2 = _baseEach;

/**
 * The base implementation of `_.filter` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function baseFilter$1(collection, predicate) {
  var result = [];
  baseEach$2(collection, function(value, index, collection) {
    if (predicate(value, index, collection)) {
      result.push(value);
    }
  });
  return result;
}

var _baseFilter = baseFilter$1;

var arrayFilter$1 = _arrayFilter,
    baseFilter = _baseFilter,
    baseIteratee$7 = _baseIteratee,
    isArray$7 = isArray_1;

/**
 * Iterates over elements of `collection`, returning an array of all elements
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * **Note:** Unlike `_.remove`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see _.reject
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * _.filter(users, function(o) { return !o.active; });
 * // => objects for ['fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, { 'age': 36, 'active': true });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, ['active', false]);
 * // => objects for ['fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.filter(users, 'active');
 * // => objects for ['barney']
 *
 * // Combining several predicates using `_.overEvery` or `_.overSome`.
 * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
 * // => objects for ['fred', 'barney']
 */
function filter(collection, predicate) {
  var func = isArray$7(collection) ? arrayFilter$1 : baseFilter;
  return func(collection, baseIteratee$7(predicate));
}

var filter_1 = filter;

var copyObject$4 = _copyObject,
    keys$3 = keys_1;

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign$1(object, source) {
  return object && copyObject$4(source, keys$3(source), object);
}

var _baseAssign = baseAssign$1;

var copyObject$3 = _copyObject,
    keysIn$2 = keysIn_1;

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn$1(object, source) {
  return object && copyObject$3(source, keysIn$2(source), object);
}

var _baseAssignIn = baseAssignIn$1;

var copyObject$2 = _copyObject,
    getSymbols$2 = _getSymbols;

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols$1(source, object) {
  return copyObject$2(source, getSymbols$2(source), object);
}

var _copySymbols = copySymbols$1;

var arrayPush$3 = _arrayPush,
    getPrototype = _getPrototype,
    getSymbols$1 = _getSymbols,
    stubArray = stubArray_1;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush$3(result, getSymbols$1(object));
    object = getPrototype(object);
  }
  return result;
};

var _getSymbolsIn = getSymbolsIn$2;

var copyObject$1 = _copyObject,
    getSymbolsIn$1 = _getSymbolsIn;

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn$1(source, object) {
  return copyObject$1(source, getSymbolsIn$1(source), object);
}

var _copySymbolsIn = copySymbolsIn$1;

var baseGetAllKeys = _baseGetAllKeys,
    getSymbolsIn = _getSymbolsIn,
    keysIn$1 = keysIn_1;

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn$2(object) {
  return baseGetAllKeys(object, keysIn$1, getSymbolsIn);
}

var _getAllKeysIn = getAllKeysIn$2;

/** Used for built-in method references. */

var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray$1(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty$1.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

var _initCloneArray = initCloneArray$1;

var cloneArrayBuffer$1 = _cloneArrayBuffer;

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView$1(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer$1(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

var _cloneDataView = cloneDataView$1;

/** Used to match `RegExp` flags from their coerced string values. */

var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp$1(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

var _cloneRegExp = cloneRegExp$1;

var Symbol$2 = _Symbol;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol$2 ? Symbol$2.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol$1(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

var _cloneSymbol = cloneSymbol$1;

var cloneArrayBuffer = _cloneArrayBuffer,
    cloneDataView = _cloneDataView,
    cloneRegExp = _cloneRegExp,
    cloneSymbol = _cloneSymbol,
    cloneTypedArray = _cloneTypedArray;

/** `Object#toString` result references. */
var boolTag$1 = '[object Boolean]',
    dateTag$1 = '[object Date]',
    mapTag$2 = '[object Map]',
    numberTag$1 = '[object Number]',
    regexpTag$1 = '[object RegExp]',
    setTag$2 = '[object Set]',
    stringTag$2 = '[object String]',
    symbolTag$1 = '[object Symbol]';

var arrayBufferTag$1 = '[object ArrayBuffer]',
    dataViewTag$1 = '[object DataView]',
    float32Tag$1 = '[object Float32Array]',
    float64Tag$1 = '[object Float64Array]',
    int8Tag$1 = '[object Int8Array]',
    int16Tag$1 = '[object Int16Array]',
    int32Tag$1 = '[object Int32Array]',
    uint8Tag$1 = '[object Uint8Array]',
    uint8ClampedTag$1 = '[object Uint8ClampedArray]',
    uint16Tag$1 = '[object Uint16Array]',
    uint32Tag$1 = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag$1(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag$1:
      return cloneArrayBuffer(object);

    case boolTag$1:
    case dateTag$1:
      return new Ctor(+object);

    case dataViewTag$1:
      return cloneDataView(object, isDeep);

    case float32Tag$1: case float64Tag$1:
    case int8Tag$1: case int16Tag$1: case int32Tag$1:
    case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
      return cloneTypedArray(object, isDeep);

    case mapTag$2:
      return new Ctor;

    case numberTag$1:
    case stringTag$2:
      return new Ctor(object);

    case regexpTag$1:
      return cloneRegExp(object);

    case setTag$2:
      return new Ctor;

    case symbolTag$1:
      return cloneSymbol(object);
  }
}

var _initCloneByTag = initCloneByTag$1;

var getTag$2 = _getTag,
    isObjectLike$2 = isObjectLike_1;

/** `Object#toString` result references. */
var mapTag$1 = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap$1(value) {
  return isObjectLike$2(value) && getTag$2(value) == mapTag$1;
}

var _baseIsMap = baseIsMap$1;

var baseIsMap = _baseIsMap,
    baseUnary$3 = _baseUnary,
    nodeUtil$1 = _nodeUtil.exports;

/* Node.js helper references. */
var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap$1 = nodeIsMap ? baseUnary$3(nodeIsMap) : baseIsMap;

var isMap_1 = isMap$1;

var getTag$1 = _getTag,
    isObjectLike$1 = isObjectLike_1;

/** `Object#toString` result references. */
var setTag$1 = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet$1(value) {
  return isObjectLike$1(value) && getTag$1(value) == setTag$1;
}

var _baseIsSet = baseIsSet$1;

var baseIsSet = _baseIsSet,
    baseUnary$2 = _baseUnary,
    nodeUtil = _nodeUtil.exports;

/* Node.js helper references. */
var nodeIsSet = nodeUtil && nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet$1 = nodeIsSet ? baseUnary$2(nodeIsSet) : baseIsSet;

var isSet_1 = isSet$1;

var Stack = _Stack,
    arrayEach = _arrayEach,
    assignValue$1 = _assignValue,
    baseAssign = _baseAssign,
    baseAssignIn = _baseAssignIn,
    cloneBuffer = _cloneBuffer.exports,
    copyArray$1 = _copyArray,
    copySymbols = _copySymbols,
    copySymbolsIn = _copySymbolsIn,
    getAllKeys = _getAllKeys,
    getAllKeysIn$1 = _getAllKeysIn,
    getTag = _getTag,
    initCloneArray = _initCloneArray,
    initCloneByTag = _initCloneByTag,
    initCloneObject = _initCloneObject,
    isArray$6 = isArray_1,
    isBuffer$1 = isBuffer$6.exports,
    isMap = isMap_1,
    isObject$2 = isObject_1,
    isSet = isSet_1,
    keys$2 = keys_1,
    keysIn = keysIn_1;

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG$2 = 1,
    CLONE_FLAT_FLAG$1 = 2,
    CLONE_SYMBOLS_FLAG$3 = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag$1 = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag$1] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone$3(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG$2,
      isFlat = bitmask & CLONE_FLAT_FLAG$1,
      isFull = bitmask & CLONE_SYMBOLS_FLAG$3;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject$2(value)) {
    return value;
  }
  var isArr = isArray$6(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray$1(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer$1(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone$3(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone$3(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn$1 : getAllKeys)
    : (isFlat ? keysIn : keys$2);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue$1(result, key, baseClone$3(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

var _baseClone = baseClone$3;

var baseClone$2 = _baseClone;

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG$1 = 1,
    CLONE_SYMBOLS_FLAG$2 = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone$2(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$2);
}

var cloneDeep_1 = cloneDeep;

var assignValue = _assignValue,
    castPath$3 = _castPath,
    isIndex = _isIndex,
    isObject$1 = isObject_1,
    toKey$1 = _toKey;

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet$2(object, path, value, customizer) {
  if (!isObject$1(object)) {
    return object;
  }
  path = castPath$3(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey$1(path[index]),
        newValue = value;

    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
      return object;
    }

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject$1(objValue)
          ? objValue
          : (isIndex(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

var _baseSet = baseSet$2;

var baseSet$1 = _baseSet;

/**
 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
 * it's created. Arrays are created for missing index properties while objects
 * are created for all other missing properties. Use `_.setWith` to customize
 * `path` creation.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.set(object, 'a[0].b.c', 4);
 * console.log(object.a[0].b.c);
 * // => 4
 *
 * _.set(object, ['x', '0', 'y', 'z'], 5);
 * console.log(object.x[0].y.z);
 * // => 5
 */
function set(object, path, value) {
  return object == null ? object : baseSet$1(object, path, value);
}

var set_1 = set;

var Symbol$1 = _Symbol,
    isArguments = isArguments_1,
    isArray$5 = isArray_1;

/** Built-in value references. */
var spreadableSymbol = Symbol$1 ? Symbol$1.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable$1(value) {
  return isArray$5(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

var _isFlattenable = isFlattenable$1;

var arrayPush$2 = _arrayPush,
    isFlattenable = _isFlattenable;

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten$6(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten$6(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush$2(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

var _baseFlatten = baseFlatten$6;

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

function baseFindIndex$3(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

var _baseFindIndex = baseFindIndex$3;

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */

function baseIsNaN$1(value) {
  return value !== value;
}

var _baseIsNaN = baseIsNaN$1;

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

function strictIndexOf$1(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

var _strictIndexOf = strictIndexOf$1;

var baseFindIndex$2 = _baseFindIndex,
    baseIsNaN = _baseIsNaN,
    strictIndexOf = _strictIndexOf;

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf$4(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex$2(array, baseIsNaN, fromIndex);
}

var _baseIndexOf = baseIndexOf$4;

var baseIndexOf$3 = _baseIndexOf;

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes$2(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf$3(array, value, 0) > -1;
}

var _arrayIncludes = arrayIncludes$2;

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */

function arrayIncludesWith$2(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

var _arrayIncludesWith = arrayIncludesWith$2;

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */

function noop$1() {
  // No operation performed.
}

var noop_1 = noop$1;

var Set = _Set,
    noop = noop_1,
    setToArray$1 = _setToArray;

/** Used as references for various `Number` constants. */
var INFINITY$2 = 1 / 0;

/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */
var createSet$1 = !(Set && (1 / setToArray$1(new Set([,-0]))[1]) == INFINITY$2) ? noop : function(values) {
  return new Set(values);
};

var _createSet = createSet$1;

var SetCache$1 = _SetCache,
    arrayIncludes$1 = _arrayIncludes,
    arrayIncludesWith$1 = _arrayIncludesWith,
    cacheHas$1 = _cacheHas,
    createSet = _createSet,
    setToArray = _setToArray;

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE$1 = 200;

/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */
function baseUniq$1(array, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes$1,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith$1;
  }
  else if (length >= LARGE_ARRAY_SIZE$1) {
    var set = iteratee ? null : createSet(array);
    if (set) {
      return setToArray(set);
    }
    isCommon = false;
    includes = cacheHas$1;
    seen = new SetCache$1;
  }
  else {
    seen = iteratee ? [] : result;
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var seenIndex = seen.length;
      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }
      if (iteratee) {
        seen.push(computed);
      }
      result.push(value);
    }
    else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

var _baseUniq = baseUniq$1;

var baseFlatten$5 = _baseFlatten,
    baseRest$3 = _baseRest,
    baseUniq = _baseUniq,
    isArrayLikeObject$2 = isArrayLikeObject_1;

/**
 * Creates an array of unique values, in order, from all given arrays using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * _.union([2], [1, 2]);
 * // => [2, 1]
 */
var union = baseRest$3(function(arrays) {
  return baseUniq(baseFlatten$5(arrays, 1, isArrayLikeObject$2, true));
});

var union_1 = union;

var baseFlatten$4 = _baseFlatten;

/** Used as references for various `Number` constants. */
var INFINITY$1 = 1 / 0;

/**
 * Recursively flattens `array`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flattenDeep([1, [2, [3, [4]], 5]]);
 * // => [1, 2, 3, 4, 5]
 */
function flattenDeep(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten$4(array, INFINITY$1) : [];
}

var flattenDeep_1 = flattenDeep;

var MERGE_KEYS = ['presets', 'usePresets', 'addClasses', 'prependClasses', 'removeClasses', 'replaceClasses', 'overrideClasses'];
var LOCALS_KEYS = ['addClass', 'removeClass', 'replaceClass', 'overrideClass'];
class MergeClasses {
  constructor() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this.options = options;
    if (this.shouldMergeTemplateClasses) {
      this.componentClasses = this.templateClasses;
      this.merge({
        overrideClasses: {
          [this.component]: this.themeClasses
        }
      });
    } else {
      this.componentClasses = this.templateClasses;
    }
    this.merge(this.config);
    each(options.merge, merge => {
      this.merge(merge);
    });
    this.merge(this.locals || this.component$.value, true);
    if (this.config.classHelpers && this.config.env !== 'production') {
      this.merge({
        prependClasses: {
          [this.component]: this.getClassHelpers(this.componentClasses, [this.component])
        }
      });
    }
  }
  get classes() {
    return new Proxy(this.componentClasses, {
      get: (target, prop) => {
        if (typeof prop !== 'string') {
          return target[prop];
        }
        return this.getDynamicClasses(target, prop);
      }
    });
  }
  get config() {
    return this.options.config || {};
  }
  get component() {
    return this.options.component;
  }
  get component$() {
    return this.options.component$;
  }
  get locals() {
    return this.options.locals;
  }
  get view() {
    return this.options.view;
  }
  get theme() {
    return this.options.theme;
  }
  get presets() {
    return this.config.presets;
  }
  get templates() {
    return this.options.templates || {};
  }
  get template() {
    return this.view && this.templates["".concat(this.component, "_").concat(this.view)] ? this.templates["".concat(this.component, "_").concat(this.view)] : this.templates[this.component] || {};
  }
  get themeClasses() {
    return cloneDeep_1(this.toArray(this.view && this.theme.classes["".concat(this.component, "_").concat(this.view)] ? this.theme.classes["".concat(this.component, "_").concat(this.view)] : this.theme.classes[this.component]));
  }
  get templateClasses() {
    return cloneDeep_1(this.toArray(this.defaultClasses));
  }
  get shouldMergeTemplateClasses() {
    var merge = typeof this.template.data === 'function' && this.template.data().merge !== undefined ? this.template.data().merge : this.component$.value.merge;
    return merge !== undefined ? merge : false;
  }
  get defaultClasses() {
    return typeof this.template.data === 'function' && this.template.data().defaultClasses ? this.template.data().defaultClasses : this.component$.value.defaultClasses;
  }
  get mainClass() {
    var defaultClasses = typeof this.template.data === 'function' && this.template.data().defaultClasses ? this.template.data().defaultClasses : this.component$.value.defaultClasses;
    return Object.keys(defaultClasses)[0];
  }
  merge(merge) {
    var locals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    each(this.pick(merge, locals ? LOCALS_KEYS : MERGE_KEYS), (mergables, key) => {
      if (typeof mergables === 'function') {
        mergables = mergables(this.component$.value.form$, 'el$' in this.component$.value && typeof this.component$.value.el$ === 'object' ? this.component$.value.el$ : undefined, this.component$.value);
      }
      switch (key) {
        case 'addClasses':
        case 'prependClasses':
        case 'overrideClasses':
          if (!mergables || mergables[this.component] === undefined) {
            return;
          }
          this.mergeComponentClasses(this.toArray(mergables[this.component]), key);
          break;
        case 'removeClasses':
        case 'replaceClasses':
          if (!mergables || mergables[this.component] === undefined) {
            return;
          }
          this.mergeComponentClasses(mergables[this.component], key);
          break;
        case 'addClass':
        case 'removeClass':
        case 'replaceClass':
        case 'overrideClass':
          if (!mergables) {
            return;
          }
          if (typeof mergables === 'string' || Array.isArray(mergables)) {
            if (!Array.isArray(mergables)) {
              mergables = mergables.length > 0 ? mergables.split(' ') : [];
            }
            this.mergeComponentClasses({
              [this.mainClass]: mergables
            }, "".concat(key, "es"));
          } else if (key === 'replaceClass') {
            this.mergeComponentClasses(mergables, "".concat(key, "es"));
          } else if (isPlainObject_1(mergables)) {
            this.mergeComponentClasses(this.toArray(mergables), "".concat(key, "es"));
          } else ;
          break;
        case 'presets':
        case 'usePresets':
          if (!Array.isArray(mergables)) {
            return;
          }
          each(mergables, presetName => {
            this.merge(this.presets[presetName]);
          });
          break;
      }
    });
  }
  mergeComponentClasses(componentClasses, key) {
    each(componentClasses, (classes, className) => {
      this[key](classes, [className]);
    });
  }
  addClasses(add, levels) {
    var base = get_1(this.componentClasses, levels.join('.'));
    if (add.length == 1 && !add[0]) {
      return;
    }
    if (isPlainObject_1(base)) {
      each(add, (subclasses, subclassName) => {
        this.addClasses(subclasses, levels.concat(subclassName));
      });
    } else {
      set_1(this.componentClasses, levels.join('.'), union_1(base, add));
    }
  }
  prependClasses(prepend, levels) {
    var base = get_1(this.componentClasses, levels.join('.'));
    if (prepend.length == 1 && !prepend[0]) {
      return;
    }
    if (isPlainObject_1(base)) {
      each(prepend, (subclasses, subclassName) => {
        this.prependClasses(subclasses, levels.concat(subclassName));
      });
    } else {
      set_1(this.componentClasses, levels.join('.'), union_1(prepend, base));
    }
  }
  removeClasses(remove, levels) {
    var base = get_1(this.componentClasses, levels.join('.'));
    if (isPlainObject_1(base)) {
      each(remove, (subclasses, subclassName) => {
        this.removeClasses(subclasses, levels.concat(subclassName));
      });
    } else if (Array.isArray(base)) {
      set_1(this.componentClasses, levels.join('.'), base.filter(c => {
        return typeof c !== 'string' || remove.indexOf(c) === -1;
      }));
    }
  }
  replaceClasses(replace, levels) {
    var base = get_1(this.componentClasses, levels.join('.'));
    if (Array.isArray(replace)) {
      var tempReplace = {};
      replace.forEach(r => {
        tempReplace = _objectSpread2$1(_objectSpread2$1({}, tempReplace), r);
      });
      replace = tempReplace;
    }
    if (isPlainObject_1(base)) {
      each(replace, (subclasses, subclassName) => {
        this.replaceClasses(subclasses, levels.concat(subclassName));
      });
    } else if (Array.isArray(base)) {
      set_1(this.componentClasses, levels.join('.'), base.map(c => {
        return typeof c !== 'string' || Object.keys(replace).indexOf(c) === -1 ? c : replace[c];
      }));
    }
  }
  overrideClasses(override, levels) {
    var base = get_1(this.componentClasses, levels.join('.'));
    if (isPlainObject_1(base)) {
      each(override, (subclasses, subclassName) => {
        this.overrideClasses(subclasses, levels.concat(subclassName));
      });
    } else {
      set_1(this.componentClasses, levels.join('.'), override);
    }
  }
  toArray(componentClasses) {
    var arrayClasses = {};
    each(componentClasses, (classes, className) => {
      arrayClasses[className] = this.classesToArray(classes, [className]);
    });
    return arrayClasses;
  }
  classesToArray(classes, path) {
    var _classes$constructor;
    var arrayClasses = classes;
    var base = path ? get_1(this.componentClasses, path.join('.')) : undefined;
    if (typeof classes === 'string') {
      arrayClasses = classes.length > 0 ? classes.split(' ') : [];
    } else if (isPlainObject_1(classes)) {
      if (base && Array.isArray(base)) {
        arrayClasses = [classes];
      } else if (!base || isPlainObject_1(base)) {
        arrayClasses = {};
        each(classes, (subclasses, subclassName) => {
          arrayClasses[subclassName] = this.classesToArray(subclasses, path.concat([subclassName]));
        });
      }
    } else if (typeof classes === 'boolean' || typeof classes === 'object' && ['ComputedRefImpl', 'RefImpl'].indexOf(classes === null || classes === void 0 || (_classes$constructor = classes.constructor) === null || _classes$constructor === void 0 ? void 0 : _classes$constructor.name) !== -1) {
      throw Error("Cannot add conditional class to ".concat(this.component, ": '").concat(path.join('.'), "'"));
    }
    return arrayClasses;
  }
  getDynamicClasses(target, prop, mainTarget) {
    if (!mainTarget) {
      mainTarget = target;
    }
    var classes = Array.isArray(target[prop]) ? flattenDeep_1(target[prop]) : target[prop];
    if (target["$".concat(prop)]) {
      var propVal = target["$".concat(prop)](mainTarget, this.component$.value);
      return typeof propVal === 'function' ? propVal : flattenDeep_1(propVal);
    }
    if (isPlainObject_1(classes)) {
      classes = cloneDeep_1(classes);
      each(classes, (classList, className) => {
        classes[className] = this.getDynamicClasses(classes, className, target);
      });
    }
    return classes;
  }
  getClassHelpers(componentClasses, path) {
    var classHelpers = {};
    each(componentClasses, (classes, className) => {
      if (className.match(/[$]/)) {
        return;
      }

      // let name = componentClasses[`$${className}`] !== undefined ? `$${className}` : className

      if (isPlainObject_1(classes)) {
        classHelpers[className] = this.getClassHelpers(componentClasses[className], path.concat([className]));
      } else {
        classHelpers[className] = ["".concat(path.join('.'), ".").concat(className, "-->")];
      }
    });
    return classHelpers;
  }
  pick(from, picks) {
    var picked = {};
    if (!from) {
      return picked;
    }
    each(picks, pick => {
      if (pick in from) {
        picked[pick] = from[pick];
      }
    });
    return picked;
  }
}

var _getFormData = function getFormData(data, formData, namespace) {
  if (formData === undefined) {
    formData = new FormData();
  }
  if (namespace === undefined) {
    namespace = '';
  }
  if (isArray_1(data)) {
    each(data, (value, key) => {
      _getFormData(value, formData, namespace + '[' + key + ']');
    });
  } else if (isPlainObject_1(data)) {
    each(data, (value, key) => {
      _getFormData(value, formData, namespace ? namespace + '[' + key + ']' : key);
    });
  } else {
    formData.append(namespace, data === null ? '' : data);
  }
  return formData;
};

var arrayMap$5 = _arrayMap;

/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */
function baseValues$1(object, props) {
  return arrayMap$5(props, function(key) {
    return object[key];
  });
}

var _baseValues = baseValues$1;

var baseValues = _baseValues,
    keys$1 = keys_1;

/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */
function values$1(object) {
  return object == null ? [] : baseValues(object, keys$1(object));
}

var values_1 = values$1;

function asyncForEach(_x, _x2) {
  return _asyncForEach.apply(this, arguments);
}
function _asyncForEach() {
  _asyncForEach = _asyncToGenerator(function* (array, callback) {
    for (var index = 0; index < (isPlainObject_1(array) ? values_1(array) : array).length; index++) {
      var key = isPlainObject_1(array) ? keys_1(array)[index] : index;
      yield callback(array[key], key, array);
    }
  });
  return _asyncForEach.apply(this, arguments);
}

var baseAssignValue = _baseAssignValue,
    baseForOwn = _baseForOwn,
    baseIteratee$6 = _baseIteratee;

/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */
function mapValues(object, iteratee) {
  var result = {};
  iteratee = baseIteratee$6(iteratee);

  baseForOwn(object, function(value, key, object) {
    baseAssignValue(result, key, iteratee(value, key, object));
  });
  return result;
}

var mapValues_1 = mapValues;

var baseIsEqual = _baseIsEqual;

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

var isEqual_1 = isEqual;

var fileToObject = function fileToObject(file) {
  return {
    lastModified: file.lastModified,
    name: file.name,
    size: file.size,
    type: file.type
  };
};
var _dataToComperable = function dataToComperable(data) {
  if (data instanceof File) {
    return fileToObject(data);
  } else if (data instanceof Date) {
    return data.toString();
  } else if (Array.isArray(data)) {
    return data.map(_dataToComperable);
  } else if (typeof data === 'object' && data !== null) {
    return mapValues_1(data, _dataToComperable);
  }
  return data;
};
function dataEquals(a, b) {
  return isEqual_1(_dataToComperable(a), _dataToComperable(b));
}

var findScrollableParent = element => {
  var currentElement = element.parentElement;
  while (currentElement && currentElement !== document.body) {
    var overflowY = window.getComputedStyle(currentElement).overflowY;
    var overflowX = window.getComputedStyle(currentElement).overflowX;
    var isScrollableY = (overflowY === 'scroll' || overflowY === 'auto') && currentElement.scrollHeight > currentElement.clientHeight;
    var isScrollableX = (overflowX === 'scroll' || overflowX === 'auto') && currentElement.scrollWidth > currentElement.clientWidth;
    if (isScrollableY || isScrollableX) {
      return currentElement;
    }
    currentElement = currentElement.parentElement;
  }
  return null;
};

var scrollIntoView = (element, scrollableParent) => {
  if (!scrollableParent) {
    return;
  }
  var elementRect = element.getBoundingClientRect();
  var parentRect = scrollableParent.getBoundingClientRect();
  var offsetTop = elementRect.top - parentRect.top + scrollableParent.scrollTop;
  var offsetLeft = elementRect.left - parentRect.left + scrollableParent.scrollLeft;
  scrollableParent.scrollTo({
    top: offsetTop,
    left: offsetLeft,
    behavior: 'smooth'
  });
};

function isComponentRegistered (vm, component) {
  return vm.appContext !== undefined ? typeof vm.appContext.app.component(component) !== 'string' : !!vm.proxy.$root.$options.components[component];
}

var flatten$3 = source => {
  var collection = [];
  source.forEach(item => {
    collection.push(item.path);
    if (item.children) {
      flatten$3(item.children).forEach(child => {
        collection.push(child);
      });
    }
  });
  return collection;
};
var _collect = function collect(elements, pages) {
  var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var createMember = name => {
    var element = elements[name];
    var path = prefix.length ? "".concat(prefix, ".").concat(name) : name;
    var member = {
      name,
      path,
      type: element.type
    };
    if (['group', 'object'].indexOf(element.type) !== -1 && Object.keys(element.schema || {}).length) {
      member.children = _collect(element.schema, null, path);
    }
    if (element.type === 'list' && Object.keys((element === null || element === void 0 ? void 0 : element.element) || {}).length) {
      member.children = _collect({
        0: element.element
      }, null, path);
    }
    return member;
  };
  var children = [];
  if (pages && Object.keys(pages).length) {
    Object.values(pages).forEach(page => {
      page.elements.forEach(name => {
        children.push(createMember(name));
      });
    });
  } else {
    Object.keys(elements).forEach(name => {
      children.push(createMember(name));
    });
  }
  return children;
};

var toString$6 = toString_1,
    upperFirst = upperFirst_1;

/**
 * Converts the first character of `string` to upper case and the remaining
 * to lower case.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to capitalize.
 * @returns {string} Returns the capitalized string.
 * @example
 *
 * _.capitalize('FRED');
 * // => 'Fred'
 */
function capitalize$1(string) {
  return upperFirst(toString$6(string).toLowerCase());
}

var capitalize_1 = capitalize$1;

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */

function arrayReduce$2(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

var _arrayReduce = arrayReduce$2;

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */

function basePropertyOf$1(object) {
  return function(key) {
    return object == null ? undefined : object[key];
  };
}

var _basePropertyOf = basePropertyOf$1;

var basePropertyOf = _basePropertyOf;

/** Used to map Latin Unicode letters to basic Latin letters. */
var deburredLetters = {
  // Latin-1 Supplement block.
  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
  '\xc7': 'C',  '\xe7': 'c',
  '\xd0': 'D',  '\xf0': 'd',
  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
  '\xd1': 'N',  '\xf1': 'n',
  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
  '\xc6': 'Ae', '\xe6': 'ae',
  '\xde': 'Th', '\xfe': 'th',
  '\xdf': 'ss',
  // Latin Extended-A block.
  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
  '\u0134': 'J',  '\u0135': 'j',
  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
  '\u0174': 'W',  '\u0175': 'w',
  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
  '\u0132': 'IJ', '\u0133': 'ij',
  '\u0152': 'Oe', '\u0153': 'oe',
  '\u0149': "'n", '\u017f': 's'
};

/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */
var deburrLetter$1 = basePropertyOf(deburredLetters);

var _deburrLetter = deburrLetter$1;

var deburrLetter = _deburrLetter,
    toString$5 = toString_1;

/** Used to match Latin Unicode letters (excluding mathematical operators). */
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

/** Used to compose unicode character classes. */
var rsComboMarksRange$1 = '\\u0300-\\u036f',
    reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange$1 = '\\u20d0-\\u20ff',
    rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;

/** Used to compose unicode capture groups. */
var rsCombo$1 = '[' + rsComboRange$1 + ']';

/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */
var reComboMark = RegExp(rsCombo$1, 'g');

/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */
function deburr$1(string) {
  string = toString$5(string);
  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
}

var deburr_1 = deburr$1;

/** Used to match words composed of alphanumeric characters. */

var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function asciiWords$1(string) {
  return string.match(reAsciiWord) || [];
}

var _asciiWords = asciiWords$1;

/** Used to detect strings that need a more robust regexp to match words. */

var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */
function hasUnicodeWord$1(string) {
  return reHasUnicodeWord.test(string);
}

var _hasUnicodeWord = hasUnicodeWord$1;

/** Used to compose unicode character classes. */

var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsDingbatRange = '\\u2700-\\u27bf',
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = '\\u2000-\\u206f',
    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange = '\\ufe0e\\ufe0f',
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

/** Used to compose unicode capture groups. */
var rsApos$1 = "['\u2019]",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptContrLower = '(?:' + rsApos$1 + '(?:d|ll|m|re|s|t|ve))?',
    rsOptContrUpper = '(?:' + rsApos$1 + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

/** Used to match complex or compound words. */
var reUnicodeWord = RegExp([
  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
  rsUpper + '+' + rsOptContrUpper,
  rsOrdUpper,
  rsOrdLower,
  rsDigits,
  rsEmoji
].join('|'), 'g');

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function unicodeWords$1(string) {
  return string.match(reUnicodeWord) || [];
}

var _unicodeWords = unicodeWords$1;

var asciiWords = _asciiWords,
    hasUnicodeWord = _hasUnicodeWord,
    toString$4 = toString_1,
    unicodeWords = _unicodeWords;

/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */
function words$1(string, pattern, guard) {
  string = toString$4(string);
  pattern = guard ? undefined : pattern;

  if (pattern === undefined) {
    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
  }
  return string.match(pattern) || [];
}

var words_1 = words$1;

var arrayReduce$1 = _arrayReduce,
    deburr = deburr_1,
    words = words_1;

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]";

/** Used to match apostrophes. */
var reApos = RegExp(rsApos, 'g');

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */
function createCompounder$1(callback) {
  return function(string) {
    return arrayReduce$1(words(deburr(string).replace(reApos, '')), callback, '');
  };
}

var _createCompounder = createCompounder$1;

var capitalize = capitalize_1,
    createCompounder = _createCompounder;

/**
 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the camel cased string.
 * @example
 *
 * _.camelCase('Foo Bar');
 * // => 'fooBar'
 *
 * _.camelCase('--foo-bar--');
 * // => 'fooBar'
 *
 * _.camelCase('__FOO_BAR__');
 * // => 'fooBar'
 */
var camelCase = createCompounder(function(result, word, index) {
  word = word.toLowerCase();
  return result + (index ? capitalize(word) : word);
});

var camelCase_1 = camelCase;

var base$1i = function base(props, context, dependencies) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  if (!options.events) {
    throw new Error('`events` option is required for useEvents');
  }

  // ================ DATA ================

  /**
   * Helper property used to store available events for the element.
   * 
   * @type {array}
   * @default []
   * @private
   */
  var events = ref(options.events);

  /**
   * Helper property used to store listeners for events.
   * 
   * @type {object}
   * @default {}
   * @private
   */
  var listeners = ref({});

  // =============== METHODS ==============

  /**
   * Adds a listener for an event.
   *
   * @param {string} event* name of the event to listen for
   * @param {function} callback* callback to run when the event is triggered
   * @returns {void}
   */
  var on = (evt, callback) => {
    if (!listeners.value[evt]) {
      listeners.value[evt] = [];
    }
    listeners.value[evt].push(callback);
  };

  /**
   * Removes all listeners for an event.
   *
   * @param {string} event* name of the event to remove
   * @returns {void}
   */
  var off = evt => {
    delete listeners.value[evt];
  };

  /**
   * Fires and emits an event.
   *
   * @param {any} args list of arguments to pass over to the event callback 
   * @returns {void}
   */
  var fire = function fire() {
    var evt = arguments[0];
    var args = [].slice.call(arguments).splice(1);
    each(listeners.value[evt], callback => {
      callback(...args);
    });
    if (!listeners.value[evt] || !listeners.value[evt].length) {
      context.emit(...[evt].concat(args));
    }
  };

  // =============== HOOKS ================

  // If component has descriptor subscribe upfront
  // for events using `onEvent` format 
  each(events.value, evt => {
    var callback = props['on' + upperFirst_1(camelCase_1(evt))];
    if (callback) {
      on(evt, callback);
    }
  });
  return {
    events,
    listeners,
    on,
    off,
    fire
  };
};

function useModel (props, context, dependencies) {
  var {
    value: v,
    modelValue: mv,
    sync
  } = toRefs(props);
  var $this = dependencies.$this;

  /**
   * Any `v-model` / `value` / `modelValue` prop provided for the form.
   * 
   * @type {object}
   * @private
   */
  var externalValue = $this.$vueform.vueVersion === 3 ? mv : v;

  // ================ DATA =================

  /**
   * The internal store for the form's model. 
   * 
   * @type {object}
   * @default {}
   * @private
   */
  var internalData = ref({});

  /**
   * The intermediary value.
   * 
   * @type {object}
   * @private
   */
  var intermediaryValue = ref(externalValue && externalValue.value ? cloneDeep_1(externalValue.value) : null);

  // ============== COMPUTED ===============

  /**
   * Whether form data should be synced when the external value changes (when external value is used).
   * 
   * @type {boolean}
   * @private
   */
  var isSync = computed(() => {
    return sync.value && externalValue && externalValue.value !== undefined;
  });

  /**
   * The form's model, which either comes from `externalValue` or `internalData`.
   * 
   * @type {object}
   * @private
   */
  var model = computed(() => {
    return cloneDeep_1(externalValue.value || internalData.value);
  });

  // =============== METHODS ==============

  /**
   * Updates an element's data in the form model.
   * 
   * @param {string} dataPath* the `dataPath` property of the element to update
   * @param {any} val* value to update with
   * @returns {void}
   * @private
   */
  var updateModel = (dataPath, val) => {
    // When using v-model as model
    if (externalValue.value) {
      // Non-flat elements
      if (dataPath) {
        var parts = dataPath.split('.');
        var element = parts.pop();
        var parent = parts.join('.') || null;
        var externalValueObject = parent ? get_1(externalValue.value, parent) : externalValue.value;

        // Thinking about cases when it tries to to set an element 
        // which no longer exists in the same tick (eg. when removing
        // a list element with order and tries to refresh its order field)
        if (externalValueObject !== undefined) {
          // We are setting externalValue (v-model) to instantly reflect changes in field value
          $this.$set(externalValueObject, element, val);
        }

        // Setting directly because externalValue might contain changes
        // that intermediary does not have yet, so it would overwrite
        // external model with old value
        intermediaryValue.value = cloneDeep_1(externalValue.value);
      }

      // Group element
      else {
        each(val, (v, key) => {
          if (externalValue.value !== undefined) {
            $this.$set(externalValue.value, key, v);
          }
          if (intermediaryValue.value !== undefined) {
            $this.$set(intermediaryValue.value, key, v);
          }
        });
      }

      // When using this.data as model
    } else {
      // We need a different clone than this.valueValue clone to not effect children watching model
      var _model = cloneDeep_1(externalValue.value || internalData.value);

      // Non-flat elements
      if (dataPath) {
        set_1(_model, dataPath, val);

        // Flat elements (eg. Group)
      } else {
        _model = Object.assign({}, _model, val);
      }
      internalData.value = _model;
    }
  };
  if (externalValue && externalValue.value) {
    watch(model, (n, o) => {
      if (dataEquals(n, o)) {
        return;
      }
      internalData.value = n;
    }, {
      deep: true,
      immediate: false
    });
  }
  return {
    model,
    internalData,
    intermediaryValue,
    externalValue,
    isSync,
    updateModel
  };
}

var base$1h = function base(props, context) {
  var {
    schema,
    tabs,
    steps,
    size,
    view,
    views,
    addClass,
    removeClass,
    replaceClass,
    overrideClass,
    addClasses,
    removeClasses,
    replaceClasses,
    overrideClasses,
    presets,
    templates,
    theme,
    messages,
    columns,
    languages,
    formKey,
    endpoint,
    method,
    formData,
    language,
    locale,
    validateOn,
    scrollToInvalid,
    scrollOnNext,
    showRequired,
    forceLabels,
    floatPlaceholders,
    multilingual,
    stepsControls,
    displayErrors,
    displayMessages,
    formatLoad,
    formatData,
    forceNumbers,
    prepare,
    default: default_,
    disabled,
    loading,
    providers,
    useProviders,
    providerOptions,
    onChange: _onChange,
    onReset: _onReset,
    onClear: _onClear,
    onSubmit: _onSubmit,
    onSuccess: _onSuccess,
    onError: _onError,
    onLanguage: _onLanguage,
    onBeforeMount: _onBeforeMount,
    onMounted: _onMounted,
    onBeforeUpdate: _onBeforeUpdate,
    onUpdated: _onUpdated,
    onBeforeUnmount: _onBeforeUnmount,
    onUnmounted: _onUnmounted
  } = toRefs(props);
  var evts = ['change', 'reset', 'clear', 'submit', 'success', 'error', 'language', 'response', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'];
  var vm = getCurrentInstance();
  var $this = vm.proxy;

  // ============ DEPENDENCIES ============

  var {
    events,
    listeners,
    fire,
    on,
    off
  } = base$1i(props, context, {
    form$: $this
  }, {
    events: evts
  });
  var {
    externalValue,
    model,
    internalData,
    intermediaryValue,
    isSync,
    updateModel
  } = useModel(props, context, {
    $this,
    fire
  });
  var expression;

  // ================ DATA ================

  /**
  * The components of highest level form elements.
  *
  * @type {object}
  * @default {}
  * @private
  */
  var elements$ = ref({});

  /**
  * The [`FormTabs`](/reference/form-tabs) component.
  *
  * @type {FormTabs}
  */
  var tabs$ = ref(null);

  /**
  * The [`FormSteps`](/reference/form-steps) component.
  *
  * @type {FormSteps}
  */
  var steps$ = ref(null);

  /**
   * Enables/disables validation for the form globally.
   *
   * @type {boolean}
   * @default true
   */
  var validation = ref(true);

  /**
   * Enables/disables conditions for the form globally.
   *
   * @type {boolean}
   * @default true
   */
  var conditions = ref(true);

  /**
   * Instance of MessageBag service. It can be used to add [custom errors and messages](/docs/validating-elements#custom-errors-and-messages).
   *
   * @type {MessageBag}
   * @default MessageBag
   */
  var messageBag = ref({});

  /**
   * Whether the async process of submitting the form is currently in progress.
   *
   * @type {boolean}
   * @default false
   */
  var submitting = ref(false);

  /**
   * Whether the async process of preparing the elements for submit is currently in progress.
   *
   * @type {boolean}
   * @default false
   */
  var preparing = ref(false);

  /**
   * The axios cancel token when a request is in progress.
   *
   * @type {boolean}
   * @default false
   */
  var cancelToken = ref(null);

  /**
   * The code of the currently selected language (eg. `en`).
   *
   * @type {string}
   * @default config.language
   */
  var selectedLanguage = ref(null);

  /**
   * The configuration object of the user when using SFC mode. Basically the value of the component's `data.vueform` object.
   *
   * @type {object}
   * @default {}
   * @private
   */
  var userConfig = ref({});

  /**
   * Whether the form has been mounted.
   *
   * @type {boolean}
   * @default false
   */
  var mounted = ref(false);

  /**
   * Whether FormMessages component is registered.
   *
   * @type {boolean}
   * @default false
   * @private
   */
  var messagesRegistered = ref(isComponentRegistered(vm, 'FormMessages'));

  /**
   * Whether FormErrors component is registered.
   *
   * @type {boolean}
   * @default false
   * @private
   */
  var errorsRegistered = ref(isComponentRegistered(vm, 'FormErrors'));

  /**
   * Whether FormLanguages component is registered.
   *
   * @type {boolean}
   * @default false
   * @private
   */
  var languagesRegistered = ref(isComponentRegistered(vm, 'FormLanguages'));

  /**
   * Whether FormTabs component is registered.
   *
   * @type {boolean}
   * @default false
   * @private
   */
  var tabsRegistered = ref(isComponentRegistered(vm, 'FormTabs'));

  /**
   * Whether FormSteps component is registered.
   *
   * @type {boolean}
   * @default false
   * @private
   */
  var stepsRegistered = ref(isComponentRegistered(vm, 'FormSteps'));

  // ============== COMPUTED ==============

  /**
   * The form component instance (self).
   *
   * @type {Vueform}
   */
  var form$ = computed(() => {
    return $this;
  });

  /**
   * The default configuration object.
   *
   * @type {object}
   * @private
   */
  var baseConfig = computed(() => {
    return $this.$vueform;
  });

  /**
   * The default configuration object.
   *
   * @type {object}
   */
  var config$ = computed(() => {
    return baseConfig.value;
  });

  /**
   * The active locale of the form.
   *
   * @type {string}
   */
  var locale$ = computed(() => {
    return options.value.locale || baseConfig.value.i18n.locale;
  });

  /**
   * Registered services.
   *
   * @type {object}
   */
  var services = computed(() => {
    return $this.$vueform.services;
  });

  /**
   * Form options merged from config, component props & the component's `data.vueform` options.
   *
   * @type {object}
   * @private
   */
  var options = computed(() => {
    var options = {
      schema: orderedSchema.value,
      tabs: formTabs.value,
      steps: formSteps.value
    };

    // Prop options will override Component.data() options
    var override = {
      columns,
      languages,
      language,
      theme,
      method,
      validateOn,
      showRequired,
      messages,
      formKey,
      multilingual,
      formatLoad,
      formatData,
      prepare,
      default: default_,
      formData,
      templates,
      addClass,
      removeClass,
      replaceClass,
      overrideClass,
      addClasses,
      removeClasses,
      replaceClasses,
      overrideClasses,
      presets,
      size,
      view,
      views,
      locale
    };

    // Only set from prop option if it is not `null` - means the prop is set
    // (otherwise will use the value defined in `defaults` or `undefined` if not)
    var ifPropSet = {
      stepsControls,
      displayErrors,
      displayMessages,
      forceLabels,
      disabled,
      loading,
      floatPlaceholders,
      endpoint,
      forceNumbers,
      scrollOnNext,
      scrollToInvalid,
      onChange: _onChange.value,
      onReset: _onReset.value,
      onClear: _onClear.value,
      onSubmit: _onSubmit.value,
      onSuccess: _onSuccess.value,
      onError: _onError.value,
      onLanguage: _onLanguage.value,
      onBeforeMount: _onBeforeMount.value,
      onMounted: _onMounted.value,
      onBeforeUpdate: _onBeforeUpdate.value,
      onUpdated: _onUpdated.value,
      onBeforeUnmount: _onBeforeUnmount.value,
      onUnmounted: _onUnmounted.value
    };
    var toMerge = {
      useProviders,
      providers,
      providerOptions
    };
    var defaults = {
      providers: baseConfig.value.config.providers,
      useProviders: baseConfig.value.config.useProviders,
      providerOptions: baseConfig.value.config.providerOptions,
      languages: baseConfig.value.config.languages,
      language: baseConfig.value.config.language,
      endpoint: typeof baseConfig.value.config.endpoints.submit === 'function' ? baseConfig.value.config.endpoints.submit : baseConfig.value.config.endpoints.submit.url,
      method: typeof baseConfig.value.config.endpoints.submit === 'function' ? null : baseConfig.value.config.endpoints.submit.method,
      validateOn: baseConfig.value.config.validateOn,
      scrollToInvalid: baseConfig.value.config.scrollToInvalid,
      scrollOnNext: baseConfig.value.config.scrollOnNext,
      showRequired: baseConfig.value.config.showRequired,
      displayErrors: baseConfig.value.config.displayErrors,
      displayMessages: baseConfig.value.config.displayMessages,
      forceLabels: baseConfig.value.config.forceLabels,
      floatPlaceholders: baseConfig.value.config.floatPlaceholders,
      formData: baseConfig.value.config.formData,
      theme: baseConfig.value.theme,
      view: baseConfig.value.config.view,
      views: {},
      columns: {},
      size: null,
      addClass: null,
      removeClass: null,
      replaceClass: null,
      overrideClass: null,
      addClasses: {},
      removeClasses: {},
      replaceClasses: {},
      overrideClasses: {},
      presets: [],
      templates: {},
      messages: {},
      default: {},
      formKey: null,
      formatLoad: null,
      formatData: null,
      forceNumbers: null,
      prepare: null,
      multilingual: false,
      stepsControls: true,
      disabled: false,
      loading: false
    };
    each(override, (val, key) => {
      options[key] = userConfig.value[key] !== undefined ? userConfig.value[key] : (val && val.value ? val.value : undefined) || defaults[key];
    });
    each(ifPropSet, (val, key) => {
      options[key] = userConfig.value[key] !== undefined ? userConfig.value[key] : val && val.value !== null ? val.value : defaults[key];
    });
    each(toMerge, (val, key) => {
      options[key] = merge_1({}, defaults[key], userConfig.value[key] || {}, val && val.value ? val.value : {});
    });
    return options;
  });

  /**
  * The global schema which has already been ordered based on tabs/steps element order.
  *
  * @type {object}
  * @private
  */
  var orderedSchema = computed(() => {
    var blocks;
    var orderedSchema = formSchema.value;
    if (Object.keys(formSteps.value).length > 0) {
      blocks = formSteps.value;
    }
    if (Object.keys(formTabs.value).length > 0) {
      blocks = formTabs.value;
    }
    if (blocks) {
      orderedSchema = {};
      each(blocks, block => {
        each(block.elements, name => {
          if (formSchema.value[name]) {
            orderedSchema[name] = formSchema.value[name];
          }
        });
      });
      each(Object.keys(formSchema.value), name => {
        if (orderedSchema[name] === undefined) {
          orderedSchema[name] = formSchema.value[name];
        }
      });
    }
    return orderedSchema;
  });

  /**
   * The form's schema merged from `schema` prop and the component's `data.vueform.schema` object.
   *
   * @type {object}
   * @private
   */
  var formSchema = computed(() => {
    return merge_1({}, schema && schema.value ? schema.value : {}, userConfig.value.schema || {});
  });

  /**
   * The form's tabs merged from `tabs` prop and the component's `data.vueform.tabs` object.
   *
   * @type {object}
   * @private
   */
  var formTabs = computed(() => {
    return merge_1({}, tabs && tabs.value ? tabs.value : {}, userConfig.value.tabs || {});
  });

  /**
   * The form's steps merged from `steps` prop and the component's `data.vueform.steps` object.
   *
   * @type {object}
   * @private
   */
  var formSteps = computed(() => {
    return merge_1({}, steps && steps.value ? steps.value : {}, userConfig.value.steps || {});
  });

  /**
   * The tree representation of the form schema.
   *
   * @type {array}
   */
  var tree = computed(() => {
    return _collect(formSchema.value, hasTabs.value ? formTabs.value : formSteps.value);
  });

  /**
   * The flat tree representation of the form schema.
   *
   * @type {array}
   */
  var flatTree = computed(() => {
    return flatten$3(tree.value);
  });

  /**
   * The form data including the data of all elements even the ones with `available: false` and `submit: false`.
   *
   * @type {object}
   */
  var data = computed(() => {
    var data = {};
    each(elements$.value, e$ => {
      if (e$.isStatic) {
        return;
      }
      data = Object.assign({}, data, e$.data);
    });
    return data;
  });

  /**
   * The form data excluding elements with `available: false` and `submit: false`. This one gets submitted by default, but can be changed with [`formData`](#option-form-data)
   *
   * @type {object}
   */
  var requestData = computed(() => {
    var requestData = {};
    each(elements$.value, e$ => {
      if (e$.isStatic) {
        return;
      }
      requestData = Object.assign({}, requestData, e$.requestData);
    });
    return formatData.value ? formatData.value(requestData) : requestData;
  });

  /**
   * Whether the form has any elements which were modified.
   *
   * @type {boolean}
   */
  var dirty = computed(() => {
    return some_1(elements$.value, element$ => {
      return element$.isStatic === false && element$.available === true && element$.dirty === true;
    });
  });

  /**
   * Whether the form has any invalid elements.
   *
   * @type {boolean}
   */
  var invalid = computed(() => {
    return some_1(elements$.value, element$ => {
      return element$.isStatic === false && element$.available === true && element$.invalid === true;
    });
  });

  /**
   * Whether the form has any elements with active debounce process.
   *
   * @type {boolean}
   */
  var debouncing = computed(() => {
    return some_1(elements$.value, element$ => {
      return element$.isStatic === false && element$.available === true && element$.debouncing === true;
    });
  });

  /**
   * Whether the form has any elements with pending async validation.
   *
   * @type {boolean}
   */
  var pending = computed(() => {
    return some_1(elements$.value, element$ => {
      return element$.isStatic === false && element$.available === true && element$.pending === true;
    });
  });

  /**
   * Whether each element in the form has been validated at least once.
   *
   * @type {boolean}
   */
  var validated = computed(() => {
    return !some_1(elements$.value, element$ => {
      return element$.isStatic === false && element$.available === true && element$.validated === false;
    });
  });

  /**
   * Whether the form has any elements with `busy: true` or the [`isLoading`](#property-is-loading), [`preparing`](#property-preparing) or [`submitting`](#property-submitting) property is `true`.
   *
   * @type {boolean}
   */
  var busy = computed(() => {
    return some_1(elements$.value, element$ => {
      return element$.isStatic === false && element$.available === true && element$.busy === true;
    }) || submitting.value || preparing.value || isLoading.value;
  });

  // no export
  /**
   * Errors collected from elements.
   *
   * @type {array}
   * @private
   */
  var elementErrors = computed(() => {
    var errors = [];
    each(filter_1(elements$.value, {
      available: true,
      isStatic: false
    }), element$ => {
      each(element$.errors, error => {
        errors.push(error);
      });
    });
    return errors;
  });

  /**
   * Form errors including element errors and the ones added to [`messageBag`](#property-message-bag) manually.
   *
   * @type {array}
   */
  var formErrors = computed(() => {
    return messageBag.value.errors;
  });

  /**
   * Whether the form has any errors.
   *
   * @type {boolean}
   */
  var hasErrors = computed(() => {
    return formErrors.value.length > 0;
  });

  /**
   * Whether the form should display errors above the form with [`FormErrors`](form-errors) component. Can be disabled by [`displayErrors`](#option-display-errors) or in `config.displayErrors`.
   *
   * @type {boolean}
   */
  var showErrors = computed(() => {
    return hasErrors.value && options.value.displayErrors && errorsRegistered.value;
  });

  /**
   * Form messages including element messages and the ones added to [`messageBag`](#property-message-bag) manually.
   *
   * @type {array}
   */
  var formMessages = computed(() => {
    return messageBag.value.messages;
  });

  /**
   * Whether the form has any messages.
   *
   * @ignore
   * @type {boolean}
   */
  var hasMessages = computed(() => {
    return formMessages.value.length > 0;
  });

  /**
   * Whether the form should display messages above the form with [`FormMessages`](form-messages) component. Can be disabled by [`displayMessages`](#option-display-messages) or in `config.displayMessages`.
   *
   * @type {boolean}
   */
  var showMessages = computed(() => {
    return hasMessages.value && options.value.displayMessages && messagesRegistered.value;
  });

  /**
   * Whether the form is multilingual and should show [`FormLanguages`](form-languages) component. Returns `true` if [`multilingual`](#option-multilingual) is enabled.
   *
   * @type {boolean}
   */
  var isMultilingual = computed(() => {
    return options.value.multilingual;
  });

  /**
   * Whether the form should show langauge selectors.
   *
   * @type {boolean}
   */
  var showLanguages = computed(() => {
    return isMultilingual.value && languagesRegistered.value;
  });

  /**
   * Whether submitting the form is disabled. Returns `true` if:
   * * the form has any invalid elements and [`validateOn`](#option-validate-on) contains `change`
   * * the form is [`busy`](#property-busy)
   * * manually disabled with [`disabled`](#option-disabled) option.
   *
   * @type {boolean}
   */
  var isDisabled = computed(() => {
    if (invalid.value && shouldValidateOnChange.value || busy.value) {
      return true;
    }
    if (typeof options.value.disabled === 'boolean') {
      return options.value.disabled;
    }
    if (typeof options.value.disabled === 'object' && options.value.disabled && options.value.disabled.value !== undefined) {
      return options.value.disabled.value;
    }
    if (typeof options.value.disabled === 'function') {
      return options.value.disabled(form$.value);
    }
    if (Array.isArray(options.value.disabled)) {
      return options.value.disabled.every(condition => {
        return $this.$vueform.services.condition.check(condition, null, form$.value);
      });
    }
  });

  /**
   * Whether loading state is triggered manually via [`loading`](#option-loading) option.
   *
   * @type {boolean}
   */
  var isLoading = computed(() => {
    return options.value.loading;
  });

  /**
   * Whether the `validateOn` prop or `config.validateOn` contains `'change'`.
   *
   * @type {boolean}
   * @private
   */
  var shouldValidateOnChange = computed(() => {
    return options.value.validateOn.split('|').indexOf('change') !== -1;
  });

  /**
   * Whether the `validateOn` prop or `config.validateOn` contains `'step'`.
   *
   * @type {boolean}
   * @private
   */
  var shouldValidateOnStep = computed(() => {
    return options.value.validateOn.split('|').indexOf('step') !== -1;
  });

  /**
   * Whether the form has any steps.
   *
   * @type {boolean}
   * @private
   */
  var hasSteps = computed(() => {
    return !isEmpty_1(options.value.steps);
  });

  /**
   * Whether the form should show [`FormSteps`](form-steps) component. Returns `true` if [`steps`](#option-steps) has value.
   *
   * @type {boolean}
   */
  var showSteps = computed(() => {
    return hasSteps.value && stepsRegistered.value;
  });

  /**
   * Whether the form should display steps controls below form with [`FormStepsControls`](form-steps-control) component when it has [`steps`](#option-steps). Can be disabled with [`stepsControls`](#option-steps-controls).
   *
   * @type {boolean}
   */
  var showStepsControls = computed(() => {
    return hasSteps.value && options.value.stepsControls && stepsRegistered.value;
  });

  /**
   * Whether the form has any tabs.
   *
   * @ignore
   * @type {boolean}
   */
  var hasTabs = computed(() => {
    return !isEmpty_1(options.value.tabs);
  });

  /**
   * Whether the form should show [`FormTabs`](form-tabs) component. Returns `true` if [`tabs`](#option-tabs) has value.
   *
   * @type {boolean}
   */
  var showTabs = computed(() => {
    return hasTabs.value && tabsRegistered.value;
  });

  /**
   * The selected theme, extended by local template and class overrides, using [`templates`](#option-replace-templates), [`addClasses`](#option-add-classes) and [`replaceClasses`](#option-replace-classes).
   *
   * @type {object}
   */
  var extendedTheme = computed(() => {
    var presetTemplates = {};
    each(baseConfig.value.config.usePresets.concat(options.value.presets), presetName => {
      var preset = baseConfig.value.config.presets[presetName];
      if (!preset || !preset.templates) {
        return;
      }
      presetTemplates = Object.assign({}, presetTemplates, preset.templates);
    });
    return Object.assign({}, options.value.theme, {
      // Add registered component to theme (or overwrite)
      templates: Object.assign({}, options.value.theme.templates, baseConfig.value.templates, presetTemplates, options.value.templates || {})
    });
  });

  /**
   * The default list of templates available to the form components.
   *
   * @type {object}
   * @private
   */
  var Templates = computed(() => {
    return extendedTheme.value.templates;
  });

  /**
   * The component's template.
   *
   * @type {object}
   */
  var template = computed(() => {
    return View.value && Templates.value["Vueform_".concat(View.value)] ? Templates.value["Vueform_".concat(View.value)] : Templates.value.Vueform;
  });

  /**
   * The component's classes.
   *
   * @type {object}
   */
  var classes = computed(() => {
    return new MergeClasses({
      component: 'Vueform',
      component$: form$,
      theme: extendedTheme.value,
      config: baseConfig.value.config,
      templates: Templates.value,
      view: View.value,
      locals: options.value,
      merge: [options.value]
    }).classes;
  });

  /**
   * The resolved default size for each element and component within the form.
   *
   * @type {string}
   */
  var Size = computed(() => {
    var Size;
    if (options.value.size) {
      Size = options.value.size;
    } else {
      each(baseConfig.value.config.usePresets.concat(options.value.presets), presetName => {
        var preset = baseConfig.value.config.presets[presetName];
        if (!preset || !preset.size) {
          return;
        }
        Size = preset.size;
      });
    }
    if (!Size) {
      Size = baseConfig.value.config.size;
    }
    return Size;
  });

  /**
   * The name of the views for the components within the form.
   *
   * @type {object}
   * @private
   */
  var Views = computed(() => {
    var Views = baseConfig.value.config.views;
    each(baseConfig.value.config.usePresets.concat(options.value.presets), presetName => {
      var preset = baseConfig.value.config.presets[presetName];
      if (!preset || !preset.views) {
        return;
      }
      Views = Object.assign({}, Views, preset.views);
    });
    Views = Object.assign({}, Views, options.value.views);
    return Views;
  });

  /**
   * The name of the resolved view for Vueform component. This one should be used to determine the component's view in class functions.
   *
   * @type {string}
   */
  var View = computed(() => {
    if (options.value.view) {
      return options.value.view;
    }
    return Views.value.Vueform;
  });

  /**
   * The translation tags of the current locale.
   *
   * @type {object}
   */
  var translations = computed(() => {
    var i18n = $this.$vueform.i18n;
    var locales = i18n.locales;
    var currentLocale = locale.value || i18n.locale;
    var fallbackLocale = i18n.fallbackLocale || 'en';
    return currentLocale ? merge_1({}, locales[fallbackLocale], locales[currentLocale]) : locales[fallbackLocale];
  });

  // =============== METHODS ==============

  /**
   * Updates the form data. Can be used to update a single element by providing the element's `path` as second option.
   *
   * @param {object} data* data to update with
   * @param {object} path the `path` of the element to update (default: `null`)
   * @returns {void}
   */
  var update = function update(data) {
    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    if (path) {
      el$(path).update(data);
      return;
    }
    each(elements$.value, element$ => {
      if (element$.isStatic) {
        return;
      }
      if (data[element$.name] === undefined && !element$.flat) {
        return;
      }
      element$.update(element$.flat ? data : data[element$.name]);
    });
  };

  /**
   * Loads data to the form using optional [`formatLoad`](#option-format-load) formatter.
   *
   * @param {string} value* the value to be loaded
   * @param {boolean} format whether the loaded value should be formatted with [`formatLoad`](#option-format-load) (default: `false`)
   * @returns {Promise}
   */
  var load = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* (data) {
      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (steps$.value !== null) {
        steps$.value.enableAllSteps();
      }
      var formatted = format && options.value.formatLoad !== null ? options.value.formatLoad(data) : data;
      yield asyncForEach(elements$.value, /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator(function* (e$) {
          if (e$.isStatic) {
            return;
          }
          var loadValue = e$.flat ? formatted : formatted[e$.name];
          if (loadValue === undefined) {
            e$.clear();
            return;
          }
          yield e$.load(loadValue, format);
        });
        return function (_x2) {
          return _ref2.apply(this, arguments);
        };
      }());
    });
    return function load(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  /**
   * Resets the form's data to default state. Also resets all the validation state for the elements.
   *
   * @returns {void}
   */
  var reset = () => {
    each(elements$.value, e$ => {
      if (e$.isStatic) {
        return;
      }
      e$.reset();
    });
    if (steps$.value !== null) {
      steps$.value.reset();
    }
    if (tabs$.value !== null) {
      tabs$.value.reset();
    }
    fire('reset');
  };

  /**
   * Clears the forms data.
   *
   * @returns {void}
   */
  var clear = () => {
    each(elements$.value, e$ => {
      if (e$.isStatic) {
        return;
      }
      e$.clear();
    });
    if (steps$.value !== null) {
      steps$.value.reset();
    }
    if (tabs$.value !== null) {
      tabs$.value.reset();
    }
    fire('clear');
  };

  /**
   * Sets all elements' `dirty` to `false`.
   *
   * @returns {void}
   */
  var clean = () => {
    each(elements$.value, e$ => {
      if (e$.isStatic) {
        return;
      }
      e$.clean();
    });
  };

  /**
   * Clears the manually added messages from the form's and each element's `messageBag`.
   *
   * @returns {void}
   */
  var clearMessages = () => {
    if (messageBag.value) {
      messageBag.value.clear();
    }
    each(elements$.value, e$ => {
      if (e$.isStatic) {
        return;
      }
      e$.clearMessages();
    });
  };

  /**
   * Validates all elements (async) which weren't validated before. If [`validateOn`](#option-validate-on) does not contain `change` it will validate all elements on each call.
   *
   * @public
   * @returns {Promise}
   */
  var validate = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator(function* () {
      if (!invalid.value && validated.value && shouldValidateOnChange.value) {
        return;
      }
      var validatableElements = Object.values(elements$.value).filter(e$ => {
        return e$.available && !e$.isStatic && (!e$.validated || !shouldValidateOnChange.value);
      });
      yield asyncForEach(validatableElements, /*#__PURE__*/function () {
        var _ref4 = _asyncToGenerator(function* (e$) {
          yield e$.validate();
        });
        return function (_x3) {
          return _ref4.apply(this, arguments);
        };
      }());
    });
    return function validate() {
      return _ref3.apply(this, arguments);
    };
  }();

  /**
   * Sets all element validators to default state.
   *
   * @returns {void}
   */
  var resetValidators = () => {
    each(elements$.value, e$ => {
      if (e$.isStatic) {
        return;
      }
      e$.resetValidators();
    });
  };
  var scrollToFirstInvalid = () => {
    if (!options.value.scrollToInvalid) {
      return;
    }
    var findFirstInvalid$ = elements$ => {
      var firstInvalid$;
      Object.keys(elements$).forEach(key => {
        if (firstInvalid$) {
          return;
        }
        var e$ = elements$[key];
        if (e$ && !e$.isStatic && e$.available && e$.invalid) {
          if (e$.isObjectType || e$.isGroupType || e$.isListType || e$.isGridType) {
            firstInvalid$ = findFirstInvalid$(e$.children$);
          } else {
            firstInvalid$ = e$;
          }
        }
      });
      return firstInvalid$;
    };
    var firstInvalid$ = findFirstInvalid$(elements$.value);
    if (!firstInvalid$) {
      return;
    }
    var scrollableParent = findScrollableParent(firstInvalid$.$el);
    if (scrollableParent) {
      scrollIntoView(firstInvalid$.$el, scrollableParent);
    } else if (firstInvalid$.$el.scrollIntoView) {
      firstInvalid$.$el.scrollIntoView({
        behavior: 'smooth'
      });
    }
  };

  /**
   * Validates and prepares elements then submits the form (async).
   *
   * @returns {Promise}
   */
  var submit = /*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator(function* () {
      if (isDisabled.value) {
        return;
      }
      yield validate();
      if (invalid.value) {
        scrollToFirstInvalid();
        return;
      }
      preparing.value = true;
      try {
        yield prepareElements();
        if (typeof options.value.prepare === 'function') {
          yield options.value.prepare(form$.value);
        }
        if (typeof $this.$vueform.config.beforeSend === 'function') {
          yield $this.$vueform.config.beforeSend(form$.value);
        }
      } catch (error) {
        fire('error', error, {
          type: 'prepare'
        }, form$.value);
        console.error(error);
        return;
      } finally {
        preparing.value = false;
      }
      var data = options.value.formData(form$.value);
      fire('submit', form$.value, data);
      if (!options.value.endpoint) {
        return;
      }
      send();
    });
    return function submit() {
      return _ref5.apply(this, arguments);
    };
  }();

  /**
   * Sends form data to [`endpoint`](#option-endpoint) with the selected [`method`](#option-method) (async).
   *
   * @returns {Promise}
   */
  var send = /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator(function* () {
      submitting.value = true;
      var response = {};
      try {
        var _response2, _response3;
        resetValidators();
        var _data = options.value.formData(form$.value);
        if (typeof options.value.endpoint === 'function') {
          response = yield options.value.endpoint(_data, form$.value);
        } else {
          var _$this$$vueform$confi, _$this$$vueform$confi2;
          cancelToken.value = services.value.axios.CancelToken.source();
          var url = ((_$this$$vueform$confi = $this.$vueform.config.endpoints[options.value.endpoint]) === null || _$this$$vueform$confi === void 0 ? void 0 : _$this$$vueform$confi.url) || options.value.endpoint;
          var _method = ((_$this$$vueform$confi2 = $this.$vueform.config.endpoints[options.value.endpoint]) === null || _$this$$vueform$confi2 === void 0 ? void 0 : _$this$$vueform$confi2.method) || options.value.method;
          response = yield services.value.axios.request({
            url,
            method: _method.toLowerCase(),
            [_method.toLowerCase() === 'get' ? 'params' : 'data']: _data,
            cancelToken: cancelToken.value.token
          });
        }
        if (response && !(response instanceof Promise)) {
          var _response;
          if ((_response = response) !== null && _response !== void 0 && (_response = _response.data) !== null && _response !== void 0 && (_response = _response.payload) !== null && _response !== void 0 && _response.updates) {
            update(response.data.payload.updates);
          }
        }
        if (((_response2 = response) === null || _response2 === void 0 ? void 0 : _response2.status) >= 200 && ((_response3 = response) === null || _response3 === void 0 ? void 0 : _response3.status) < 300) {
          fire('success', response, form$.value);
        } else {
          fire('error', {
            response
          }, {
            type: 'submit'
          }, form$.value);
        }
      } catch (error) {
        if (error.response) {
          fire('error', error, {
            type: 'submit'
          }, form$.value);
          fire('response', error.response, form$.value);
        } else if (services.value.axios.isCancel(error)) {
          fire('error', error, {
            type: 'cancel'
          }, form$.value);
        } else {
          fire('error', error, {
            type: 'other'
          }, form$.value);
        }
        console.error(error);
        return;
      } finally {
        cancelToken.value = null;
        submitting.value = false;
      }
      fire('response', response, form$.value);
    });
    return function send() {
      return _ref6.apply(this, arguments);
    };
  }();

  /**
   * Cancels the form request in progress.
   *
   * @returns {void}
   */
  var cancel = () => {
    if (!cancelToken.value) {
      return;
    }
    cancelToken.value.cancel();
  };

  /**
  * Prepares all elements to submit (async).
  *
  * @returns {Promise}
  * @private
  */
  var prepareElements = /*#__PURE__*/function () {
    var _ref7 = _asyncToGenerator(function* () {
      try {
        yield asyncForEach(elements$.value, /*#__PURE__*/function () {
          var _ref8 = _asyncToGenerator(function* (e$) {
            if (e$.prepare) {
              yield e$.prepare();
            }
          });
          return function (_x4) {
            return _ref8.apply(this, arguments);
          };
        }());
      } catch (e) {
        throw new Error(e);
      }
    });
    return function prepareElements() {
      return _ref7.apply(this, arguments);
    };
  }();

  /**
   * Disabled form validation globally.
   *
   * @returns {void}
   */
  var disableValidation = () => {
    validation.value = false;
  };

  /**
   * Enables form validation globally.
   *
   * @returns {void}
   */
  var enableValidation = () => {
    validation.value = true;
  };

  /**
  * Enables conditions globally.
  *
  * @returns {void}
  */
  var enableConditions = () => {
    conditions.value = true;
  };

  /**
  * Disables conditions globally.
  *
  * @returns {void}
  */
  var disableConditions = () => {
    conditions.value = false;
  };

  /**
  * Sets current language when using [`multilingual`](#option-multilingual).
  *
  * @param {string} code* the language code to be selected
  * @returns {void}
  */
  var setLanguage = code => {
    selectedLanguage.value = code;
    fire('language', code);
  };

  /**
   * Handles `submit` event.
   *
   * @returns {void}
   */
  var handleSubmit = () => {
    submit();
  };

  /**
  * Converts form data to [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData).
  *
  * @param {object} data* the data to be converted
  * @returns {FormData}
  */
  var convertFormData = data => {
    return _getFormData(data);
  };

  /**
  * Resolves an expression.
  *
  * @param {string} exp* the expression to resolve
  * @param {string} dataPath* the dataPath of the element (required to resolve * in nested paths relative to the element)
  * @returns {string}
  */
  var resolveExpression = (exp, dataPath) => {
    return expression.resolve(exp, requestData.value, dataPath);
  };

  /**
   * Returns an element by its path.
   *
   * @param {string} path* path of the element
   * @param {object} elements the object of elements to look into (defaults to elements$)
   * @returns {VueformElement|null}
   */
  var el$ = (path, elements) => {
    if (elements === undefined) {
      elements = elements$.value;
    }
    if (isEmpty_1(elements) || !path) {
      return null;
    }
    var matches = String(path).match(/^[^.]+\./);
    if (matches) {
      var current = matches[0].replace('.', '');
      if (!elements[current]) {
        return null;
      }
      return el$(path.replace(matches[0], ''), elements[current].children$);
    } else if (elements[path] !== undefined) {
      return elements[path];
    }
    return null;
  };

  /**
   * Returns the siblings of an element.
   *
   * @param {string} path* path of the element
   * @returns {void}
   */
  var siblings$ = path => {
    var _el$;
    if (!/\.+/.test(path)) {
      return elements$.value;
    }
    return ((_el$ = el$(path.match(/.*(?=\.)/)[0])) === null || _el$ === void 0 ? void 0 : _el$.children$) || {};
  };

  /**
  * Inits MessageBag service.
  *
  * @returns {void}
  * @private
  */
  var initMessageBag = () => {
    messageBag.value = new services.value.messageBag(elementErrors);
  };

  /**
  * Inits Expression service.
  *
  * @returns {void}
  * @private
  */
  var initExpressionService = () => {
    expression = new services.value.expression(config$.value.config.expression, config$, form$);
  };

  // ============== PROVIDES ==============

  provide('form$', form$);
  provide('theme', extendedTheme);
  provide('Size', Size);
  provide('Views', Views);
  provide('translations', translations);
  provide('config$', config$);

  // ================ HOOKS ===============

  initMessageBag();
  initExpressionService();
  setLanguage(options.value.language);
  onBeforeMount(() => {
    userConfig.value = $this.vueform || {};

    // Manually subscribe to events defined in options object
    each(evts, evt => {
      var callback = options.value['on' + upperFirst_1(evt)];
      if (callback) {
        on(evt, callback);
      }
    });
    fire('beforeMount', $this);
  });
  onMounted(() => {
    mounted.value = true;

    // Watching model to track old/new values
    watch(data, (n, o) => {
      if (dataEquals(n, o)) {
        return;
      }
      fire('change', n, o, $this);
      if (externalValue && externalValue.value !== undefined) {
        context.emit('input', n);
        context.emit('update:modelValue', n);
      }
    }, {
      deep: true,
      immediate: false
    });

    // If has v-model & not equals to form data
    if (externalValue && externalValue.value !== undefined && JSON.stringify(externalValue.value) !== JSON.stringify(data.value)) {
      context.emit('input', data.value);
      context.emit('update:modelValue', data.value);
    }
    fire('mounted', $this);
  });
  onBeforeUpdate(() => fire('beforeUpdate', $this));
  onUpdated(() => fire('updated', $this));
  onBeforeUnmount(() => fire('beforeUnmount', $this));
  onUnmounted(() => fire('unmounted', $this));

  // ============== WATCHERS ==============

  watch(computed(() => options.value.language), (n, o) => {
    if (n) {
      setLanguage(n);
    }
  });
  return {
    tabs$,
    steps$,
    elements$,
    options,
    validation,
    conditions,
    messageBag,
    selectedLanguage,
    submitting,
    preparing,
    cancelToken,
    events,
    listeners,
    internalData,
    data,
    requestData,
    dirty,
    invalid,
    debouncing,
    pending,
    validated,
    busy,
    formErrors,
    formMessages,
    isDisabled,
    isLoading,
    shouldValidateOnChange,
    shouldValidateOnStep,
    hasSteps,
    hasTabs,
    hasErrors,
    hasMessages,
    isMultilingual,
    showErrors,
    showMessages,
    showLanguages,
    showSteps,
    showTabs,
    showStepsControls,
    classes,
    Templates,
    template,
    extendedTheme,
    Size,
    View,
    Views,
    form$,
    model,
    intermediaryValue,
    userConfig,
    isSync,
    tree,
    flatTree,
    translations,
    locale$,
    prepareElements,
    updateModel,
    update,
    load,
    reset,
    clear,
    clean,
    clearMessages,
    validate,
    resetValidators,
    convertFormData,
    resolveExpression,
    submit,
    scrollToFirstInvalid,
    send,
    cancel,
    disableValidation,
    enableValidation,
    enableConditions,
    disableConditions,
    setLanguage,
    handleSubmit,
    el$,
    siblings$,
    initMessageBag,
    initExpressionService,
    fire,
    on,
    off,
    messagesRegistered,
    errorsRegistered,
    languagesRegistered,
    tabsRegistered,
    stepsRegistered,
    expression
  };
};

var base$1g = function base(props, context, dependencies) {
  var componentName = context.name;

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var el$ = dependencies.el$;
  var component$ = dependencies.component$ || dependencies.el$;
  var theme = dependencies.theme;
  var Templates = dependencies.Templates;
  var View = dependencies.View;

  // ============== COMPUTED ==============

  /**
   * The classes instance (for testing purpose).
   *
   * @type {MergeClasses}
   * @private
   */
  var classesInstance = computed(() => {
    return new MergeClasses({
      component: componentName.value,
      component$: component$,
      theme: theme.value,
      config: form$.value.$vueform.config,
      templates: Templates.value,
      view: View.value,
      merge: [form$.value.options, el$.value]
    });
  });

  /**
   * The component's classes.
   *
   * @type {object}
   */
  var classes = computed(() => {
    var _classesInstance$valu;
    return _objectSpread2$1({}, (_classesInstance$valu = classesInstance.value) === null || _classesInstance$valu === void 0 ? void 0 : _classesInstance$valu.classes);
  });
  return {
    classes,
    classesInstance
  };
};

var VueformComponent = {
  name: 'Vueform',
  emits: ['input', 'update:modelValue', 'change', 'reset', 'clear', 'submit', 'success', 'error', 'response', 'language', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  slots: ['default', 'empty'],
  setup: (props, context) => {
    context.emits = ['input', 'update:modelValue', 'change', 'reset', 'clear', 'submit', 'success', 'error', 'response', 'language', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'];
    context.name = ref('Vueform');
    var {
      tabs$,
      steps$,
      elements$,
      options,
      validation,
      conditions,
      messageBag,
      selectedLanguage,
      submitting,
      preparing,
      cancelToken,
      events,
      listeners,
      internalData,
      data,
      requestData,
      dirty,
      invalid,
      debouncing,
      pending,
      validated,
      busy,
      formErrors,
      formMessages,
      isDisabled,
      isLoading,
      shouldValidateOnChange,
      shouldValidateOnStep,
      hasSteps,
      hasTabs,
      hasErrors,
      hasMessages,
      isMultilingual,
      showErrors,
      showMessages,
      showLanguages,
      showSteps,
      showTabs,
      showStepsControls,
      classes,
      Templates,
      template,
      extendedTheme,
      Size,
      View,
      Views,
      form$,
      model,
      intermediaryValue,
      userConfig,
      isSync,
      tree,
      flatTree,
      translations,
      locale$,
      prepareElements,
      updateModel,
      update,
      load,
      reset,
      clear,
      clean,
      clearMessages,
      validate,
      resetValidators,
      convertFormData,
      resolveExpression,
      submit,
      scrollToFirstInvalid,
      scrollOnNext,
      send,
      cancel,
      disableValidation,
      enableValidation,
      enableConditions,
      disableConditions,
      setLanguage,
      handleSubmit,
      el$,
      siblings$,
      initMessageBag,
      initExpressionService,
      fire,
      on,
      off,
      messagesRegistered,
      errorsRegistered,
      languagesRegistered,
      tabsRegistered,
      stepsRegistered,
      expression
    } = base$1h(props, context);
    return {
      tabs$,
      steps$,
      elements$,
      options,
      validation,
      conditions,
      messageBag,
      selectedLanguage,
      submitting,
      preparing,
      cancelToken,
      events,
      listeners,
      internalData,
      data,
      requestData,
      dirty,
      invalid,
      debouncing,
      pending,
      validated,
      busy,
      formErrors,
      formMessages,
      isDisabled,
      isLoading,
      shouldValidateOnChange,
      shouldValidateOnStep,
      hasSteps,
      hasTabs,
      hasErrors,
      hasMessages,
      isMultilingual,
      showErrors,
      showMessages,
      showLanguages,
      showSteps,
      showTabs,
      showStepsControls,
      classes,
      Templates,
      template,
      extendedTheme,
      Size,
      View,
      Views,
      form$,
      model,
      intermediaryValue,
      userConfig,
      isSync,
      tree,
      flatTree,
      translations,
      locale$,
      prepareElements,
      updateModel,
      update,
      load,
      reset,
      clear,
      clean,
      clearMessages,
      validate,
      resetValidators,
      convertFormData,
      resolveExpression,
      submit,
      scrollToFirstInvalid,
      scrollOnNext,
      send,
      cancel,
      disableValidation,
      enableValidation,
      enableConditions,
      disableConditions,
      setLanguage,
      handleSubmit,
      el$,
      siblings$,
      initMessageBag,
      initExpressionService,
      fire,
      on,
      off,
      messagesRegistered,
      errorsRegistered,
      languagesRegistered,
      tabsRegistered,
      stepsRegistered,
      expression
    };
  },
  props: {
    schema: {
      type: Object,
      required: false,
      default: null
    },
    name: {
      type: String,
      required: false,
      default: null,
      private: true
    },
    tabs: {
      type: Object,
      required: false,
      default: null
    },
    steps: {
      type: Object,
      required: false,
      default: null
    },
    stepsControls: {
      type: Boolean,
      required: false,
      default: null,
      '@default': true
    },
    scrollOnNext: {
      type: Boolean,
      required: false,
      default: null
    },
    validateOn: {
      type: String,
      required: false,
      default: null
    },
    scrollToInvalid: {
      type: Boolean,
      required: false,
      default: null
    },
    showRequired: {
      type: Array,
      required: false,
      default: null
    },
    displayErrors: {
      type: Boolean,
      required: false,
      default: null
    },
    displayMessages: {
      type: Boolean,
      required: false,
      default: null
    },
    messages: {
      type: Object,
      required: false,
      default: null
    },
    endpoint: {
      type: [String, Boolean, Function, Promise],
      required: false,
      default: null
    },
    method: {
      type: String,
      required: false,
      default: null
    },
    prepare: {
      type: Function,
      required: false,
      default: null
    },
    formKey: {
      type: [String, Number],
      required: false,
      default: null
    },
    formData: {
      type: Function,
      required: false,
      default: null
    },
    value: {
      type: Object,
      required: false,
      default: undefined
    },
    modelValue: {
      type: Object,
      required: false,
      default: undefined
    },
    sync: {
      type: Boolean,
      required: false,
      default: false
    },
    default: {
      type: Object,
      required: false,
      default: null
    },
    forceNumbers: {
      required: false,
      type: [Boolean],
      default: null
    },
    formatData: {
      type: Function,
      required: false,
      default: null
    },
    formatLoad: {
      type: Function,
      required: false,
      default: null
    },
    loading: {
      type: Boolean,
      required: false,
      default: null
    },
    disabled: {
      type: [Boolean, Function, Object, Array],
      required: false,
      default: null
    },
    columns: {
      type: Object,
      required: false,
      default: null
    },
    forceLabels: {
      type: Boolean,
      required: false,
      default: null
    },
    floatPlaceholders: {
      type: Boolean,
      required: false,
      default: null
    },
    size: {
      required: false,
      type: [String],
      default: null
    },
    view: {
      required: false,
      type: [String],
      default: null
    },
    views: {
      required: false,
      type: [Object],
      default: null
    },
    addClasses: {
      required: false,
      type: [Object, Function],
      default: null
    },
    addClass: {
      required: false,
      type: [Array, Object, String, Function],
      default: null
    },
    removeClasses: {
      required: false,
      type: [Object, Function],
      default: null
    },
    removeClass: {
      required: false,
      type: [Array, Object, Function],
      default: null
    },
    replaceClasses: {
      required: false,
      type: [Object, Function],
      default: null
    },
    replaceClass: {
      required: false,
      type: [Object, Function],
      default: null
    },
    overrideClasses: {
      required: false,
      type: [Object, Function],
      default: null
    },
    overrideClass: {
      required: false,
      type: [Array, Object, String, Function],
      default: null
    },
    templates: {
      type: Object,
      required: false,
      default: null
    },
    presets: {
      required: false,
      type: [Array],
      default: null
    },
    multilingual: {
      type: Boolean,
      required: false,
      default: null
    },
    languages: {
      type: Object,
      required: false,
      default: null
    },
    language: {
      type: String,
      required: false,
      default: null
    },
    locale: {
      type: String,
      required: false,
      default: null
    },
    providers: {
      type: [Object],
      required: false,
      default: null
    },
    useProviders: {
      type: [Object],
      required: false,
      default: null
    },
    providerOptions: {
      type: [Object],
      required: false,
      default: null
    },
    onChange: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onReset: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onClear: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onSubmit: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onResponse: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onSuccess: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onError: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onLanguage: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onBeforeMount: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onMounted: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onBeforeUpdate: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onUpdated: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onBeforeUnmount: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onUnmounted: {
      required: false,
      type: [Function],
      default: null,
      private: true
    }
  },
  render() {
    return this.template.render.apply(this, arguments);
  }
  // staticRenderFns() {
  //   return this.templates.Vueform.staticRenderFns
  // }
};

var baseEach$1 = _baseEach,
    isArrayLike$2 = isArrayLike_1;

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap$2(collection, iteratee) {
  var index = -1,
      result = isArrayLike$2(collection) ? Array(collection.length) : [];

  baseEach$1(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

var _baseMap = baseMap$2;

var arrayMap$4 = _arrayMap,
    baseIteratee$5 = _baseIteratee,
    baseMap$1 = _baseMap,
    isArray$4 = isArray_1;

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray$4(collection) ? arrayMap$4 : baseMap$1;
  return func(collection, baseIteratee$5(iteratee));
}

var map_1 = map;

var baseGetTag = _baseGetTag,
    isArray$3 = isArray_1,
    isObjectLike = isObjectLike_1;

/** `Object#toString` result references. */
var stringTag = '[object String]';

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString$1(value) {
  return typeof value == 'string' ||
    (!isArray$3(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
}

var isString_1 = isString$1;

/** Used to match a single whitespace character. */

var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex$1(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

var _trimmedEndIndex = trimmedEndIndex$1;

var trimmedEndIndex = _trimmedEndIndex;

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim$2(string) {
  return string
    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
    : string;
}

var _baseTrim = baseTrim$2;

var baseIndexOf$2 = _baseIndexOf;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the last unmatched string symbol.
 */
function charsEndIndex$1(strSymbols, chrSymbols) {
  var index = strSymbols.length;

  while (index-- && baseIndexOf$2(chrSymbols, strSymbols[index], 0) > -1) {}
  return index;
}

var _charsEndIndex = charsEndIndex$1;

var baseIndexOf$1 = _baseIndexOf;

/**
 * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the first unmatched string symbol.
 */
function charsStartIndex$1(strSymbols, chrSymbols) {
  var index = -1,
      length = strSymbols.length;

  while (++index < length && baseIndexOf$1(chrSymbols, strSymbols[index], 0) > -1) {}
  return index;
}

var _charsStartIndex = charsStartIndex$1;

var baseToString$2 = _baseToString,
    baseTrim$1 = _baseTrim,
    castSlice = _castSlice,
    charsEndIndex = _charsEndIndex,
    charsStartIndex = _charsStartIndex,
    stringToArray = _stringToArray,
    toString$3 = toString_1;

/**
 * Removes leading and trailing whitespace or specified characters from `string`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to trim.
 * @param {string} [chars=whitespace] The characters to trim.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the trimmed string.
 * @example
 *
 * _.trim('  abc  ');
 * // => 'abc'
 *
 * _.trim('-_-abc-_-', '_-');
 * // => 'abc'
 *
 * _.map(['  foo  ', '  bar  '], _.trim);
 * // => ['foo', 'bar']
 */
function trim(string, chars, guard) {
  string = toString$3(string);
  if (string && (guard || chars === undefined)) {
    return baseTrim$1(string);
  }
  if (!string || !(chars = baseToString$2(chars))) {
    return string;
  }
  var strSymbols = stringToArray(string),
      chrSymbols = stringToArray(chars),
      start = charsStartIndex(strSymbols, chrSymbols),
      end = charsEndIndex(strSymbols, chrSymbols) + 1;

  return castSlice(strSymbols, start, end).join('');
}

var trim_1 = trim;

function localize(object, $config, form$) {
  var locale = form$.locale$ || $config.i18n.locale;
  if (!locale) {
    return object;
  }
  return object && typeof object === 'object' ? (object === null || object === void 0 ? void 0 : object[locale]) || (object === null || object === void 0 ? void 0 : object[locale.toUpperCase()]) || (object === null || object === void 0 ? void 0 : object[$config.i18n.fallbackLocale]) || (object === null || object === void 0 ? void 0 : object[$config.i18n.fallbackLocale.toUpperCase()]) || (object === null || object === void 0 ? void 0 : object[Object.keys(object)[0]]) || '' : object;
}

var Validator = class {
  constructor(rule, props) {
    var _props$element$;
    this.rule = rule;
    this.attributes = rule.attributes || {};
    this.conditions = rule.conditions || [];
    this.dependents = rule.dependents || [];
    this.element$ = props.element$;
    this.form$ = ((_props$element$ = props.element$) === null || _props$element$ === void 0 ? void 0 : _props$element$.form$) || {};
    this.config$ = props.config$;
    this.numeric = props.numeric || false;
    this.elementMessages = props.element$.messages;
    this.invalid = false;
    this.pending = false;
    this.debouncer = null;
    this.lastValue = null;
    this.watchers = {};
    this.dependents.forEach(dependent => {
      watch(computed(() => {
        var _this$form$$el$;
        return (_this$form$$el$ = this.form$.el$(dependent)) === null || _this$form$$el$ === void 0 ? void 0 : _this$form$$el$.value;
      }), () => {
        if (this.element$.validated) {
          // we need to revalidate the whole element
          if (this.name === 'nullable') {
            this.element$.validate();
          }

          // we need to revalidate only current validator
          else {
            // We need to do this instead of this.validate()
            // because Vue3 does not recognize `invalid` as
            // as a reactive property if used that way.
            this.revalidate();
          }
        }
      });
    });
    watch(computed(() => props.element$.messages), (n, o) => {
      if (isEqual_1(n, o)) {
        return;
      }
      this.elementMessages = props.element$.messages;
    }, {
      deep: true
    });
    this.init();
  }
  get moment() {
    return this.form$.$vueform.services.moment;
  }
  get name() {
    return this.rule.name;
  }
  get failing() {
    return this.invalid;
  }
  get defaultMessage() {
    return this.form$.translations.vueform.defaultMessage;
  }
  get message() {
    var _this$form$$translati;
    var message = '';
    if (this.msg) {
      message = this.msg;
    } else if (this.elementMessages[this.name]) {
      message = localize(this.elementMessages[this.name], this.config$.value, this.form$);
    } else if (this.form$.options.messages[this.name]) {
      message = localize(this.form$.options.messages[this.name], this.config$.value, this.form$);
    } else if (this.name !== '_class' && ((_this$form$$translati = this.form$.translations.validation) === null || _this$form$$translati === void 0 ? void 0 : _this$form$$translati[this.name]) !== undefined) {
      message = this.form$.translations.validation[this.name];
      if (isPlainObject_1(message)) {
        message = message[this.messageType];
      }
    } else {
      message = this.defaultMessage;
    }

    // replace :params
    each(map_1(message.match(/:\w+/g), p => p.replace(':', '')), param => {
      message = message.replace(":".concat(param), this.messageParams[param]);
    });

    // replace {params}
    each(map_1(message.match(/{[^}]+/g), p => p.replace('{', '')), param => {
      message = message.replace("{".concat(param, "}"), this.messageParams[param]);
    });
    return message;
  }
  get messageType() {
    if (this.isNumeric) {
      return 'numeric';
    } else if (this.isFile) {
      return 'file';
    } else if (this.isArray) {
      return 'array';
    }
    return 'string';
  }
  get messageParams() {
    return {
      attribute: this.attributeName
    };
  }
  get attributeName() {
    return this.element$.genericName;
  }
  get type() {
    if (this.isNumeric) {
      return 'numeric';
    } else if (this.isFile) {
      return 'file';
    } else if (this.isArray) {
      return 'array';
    }
    return 'string';
  }
  get isNumeric() {
    return some_1(this.element$.Validators, {
      name: 'numeric'
    }) || some_1(this.element$.Validators, {
      name: 'integer'
    });
  }
  get isNullable() {
    var nullable = false;
    each(this.element$.Validators, Validator => {
      if (Validator.name !== 'nullable') {
        return;
      }
      if (!Validator.conditions.length) {
        nullable = true;
        return;
      }
      nullable = Validator.conditions(this.form$, this, this.element$);
    });
    return nullable;
  }
  get isFile() {
    return this.element$.isFileType;
  }
  get isArray() {
    return this.element$.isArrayType;
  }
  get isAsync() {
    return false;
  }
  get debounce() {
    if (this.attributes.debounce) {
      return this.attributes.debounce;
    }
    if (this.element$.debounce) {
      return this.element$.debounce;
    }
    return false;
  }
  get debouncing() {
    return this.debouncer !== null;
  }
  init() {}
  validate(value) {
    var _this = this;
    return _asyncToGenerator(function* () {
      if (value === undefined) {
        var _this$element$;
        value = (_this$element$ = _this.element$) === null || _this$element$ === void 0 ? void 0 : _this$element$.value;
      }
      if (!_this.form$.validation) {
        return;
      }
      if (_this.isNullable && !_this.filled(value)) {
        _this.invalid = false;
        return;
      }
      if (_this.conditions.length) {
        if (!_this.conditions(_this.form$, _this, _this.element$)) {
          _this.invalid = false;
          return;
        }
      }
      if (_this.debounce && _this.filled(value)) {
        yield _this._validateWithDebounce(value);
      } else {
        if (_this.debounce && _this.debouncer) {
          clearTimeout(_this.debouncer);
        }
        yield _this._validate(value);
      }
    })();
  }
  replaceParams(message) {
    // replace :params
    each(map_1(message.match(/:\w+/g), p => p.replace(':', '')), param => {
      message = message.replace(":".concat(param), this.messageParams[param]);
    });

    // replace {params}
    each(map_1(message.match(/{[^}]+/g), p => p.replace('{', '')), param => {
      message = message.replace("{".concat(param, "}"), this.messageParams[param]);
    });
    return message;
  }
  reset() {
    this.invalid = false;
  }
  watch(variables) {
    if (!Array.isArray(variables)) {
      variables = [variables];
    }
    variables.forEach(variable => {
      this.addWatcher(variable);
    });
  }
  addWatcher(variable) {
    if (this.watchers[variable]) {
      return;
    }
    this.watchers[variable] = watch(computed(() => get_1(this.form$.data, variable)), () => {
      this.revalidate();
    });
  }
  revalidate() {
    this.element$.Validators.forEach(Validator => {
      if (Validator.rule.name === this.rule.name) {
        Validator.validate();
      }
    });
  }
  watchOther() {
    this.form$.$nextTick(() => {
      if (!this.other$) {
        return;
      }
      this.form$.$watch(() => {
        var _this$other$;
        return (_this$other$ = this.other$) === null || _this$other$ === void 0 ? void 0 : _this$other$.value;
      }, () => {
        if (this.element$.validated) {
          this.element$.validate();
        }
      });
    });
  }
  isOtherNumeric(other$) {
    return some_1(other$.Validators, {
      name: 'numeric'
    }) || some_1(other$.Validators, {
      name: 'integer'
    });
  }
  size(value, other$) {
    if (other$ && this.isOtherNumeric(other$) || !other$ && this.isNumeric) {
      if (!isNaN(value)) {
        var num = parseFloat(value);
        if (Number.isInteger(num)) {
          return parseInt(value);
        }
        return num;
      }
      return null;
    } else if (this.isFile) {
      return value ? value.size / 1000 : 0;
    } else if (this.isArray) {
      return value.length;
    } else if (value === null) {
      return 0;
    } else if (value === undefined) {
      return 0;
    } else if (value === '') {
      return 0;
    }
    return String(value).length;
  }
  filled(value) {
    if (this.element$.useCustomFilled) {
      return this.element$.isFilled;
    } else if (value === undefined || value === null && value !== this.element$.trueValue || value === this.element$.falseValue) {
      return false;
    } else if (this.isNumeric && trim_1(value) === '') {
      return false;
    } else if (isString_1(value) && trim_1(value) === '') {
      return false;
    } else if (isArray_1(value) && value.length < 1) {
      return false;
    } else if (value instanceof File && value.name === '') {
      return false;
    }
    return true;
  }
  _validate(value) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      if (_this2.isAsync) {
        yield _this2._validateAsync(value);
      } else {
        _this2._validateSync(value);
      }
    })();
  }
  _validateAsync(value) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      _this3.lastValue = value;
      _this3.pending = true;
      var valid = yield _this3.check(value);
      if (dataEquals(_this3.lastValue, value)) {
        _this3.invalid = !valid;
        _this3.pending = false;
      }
    })();
  }
  _validateSync(value) {
    this.invalid = !this.check(value);
  }
  _validateWithDebounce(value) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      return new Promise((resolve, reject) => {
        if (_this4.debouncer) {
          resolve();
          clearTimeout(_this4.debouncer);
        }
        _this4.debouncer = setTimeout(/*#__PURE__*/_asyncToGenerator(function* () {
          yield _this4._validate(value);
          _this4.debouncer = null;
          resolve();
        }), _this4.debounce);
      });
    })();
  }
};

/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */

function last$1(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : undefined;
}

var last_1 = last$1;

var baseGet$2 = _baseGet,
    baseSlice = _baseSlice;

/**
 * Gets the parent value at `path` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path to get the parent value of.
 * @returns {*} Returns the parent value.
 */
function parent$1(object, path) {
  return path.length < 2 ? object : baseGet$2(object, baseSlice(path, 0, -1));
}

var _parent = parent$1;

var castPath$2 = _castPath,
    last = last_1,
    parent = _parent,
    toKey = _toKey;

/**
 * The base implementation of `_.unset`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The property path to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 */
function baseUnset$1(object, path) {
  path = castPath$2(path, object);
  object = parent(object, path);
  return object == null || delete object[toKey(last(path))];
}

var _baseUnset = baseUnset$1;

var isPlainObject = isPlainObject_1;

/**
 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
 * objects.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {string} key The key of the property to inspect.
 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
 */
function customOmitClone$1(value) {
  return isPlainObject(value) ? undefined : value;
}

var _customOmitClone = customOmitClone$1;

var baseFlatten$3 = _baseFlatten;

/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten$2(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten$3(array, 1) : [];
}

var flatten_1 = flatten$2;

var flatten$1 = flatten_1,
    overRest = _overRest,
    setToString = _setToString;

/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
function flatRest$2(func) {
  return setToString(overRest(func, undefined, flatten$1), func + '');
}

var _flatRest = flatRest$2;

var arrayMap$3 = _arrayMap,
    baseClone$1 = _baseClone,
    baseUnset = _baseUnset,
    castPath$1 = _castPath,
    copyObject = _copyObject,
    customOmitClone = _customOmitClone,
    flatRest$1 = _flatRest,
    getAllKeysIn = _getAllKeysIn;

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG$1 = 4;

/**
 * The opposite of `_.pick`; this method creates an object composed of the
 * own and inherited enumerable property paths of `object` that are not omitted.
 *
 * **Note:** This method is considerably slower than `_.pick`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to omit.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omit(object, ['a', 'c']);
 * // => { 'b': '2' }
 */
var omit = flatRest$1(function(object, paths) {
  var result = {};
  if (object == null) {
    return result;
  }
  var isDeep = false;
  paths = arrayMap$3(paths, function(path) {
    path = castPath$1(path, object);
    isDeep || (isDeep = path.length > 1);
    return path;
  });
  copyObject(object, getAllKeysIn(object), result);
  if (isDeep) {
    result = baseClone$1(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG$1, customOmitClone);
  }
  var length = paths.length;
  while (length--) {
    baseUnset(result, paths[length]);
  }
  return result;
});

var omit_1 = omit;

var baseGet$1 = _baseGet,
    baseSet = _baseSet,
    castPath = _castPath;

/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy$1(object, paths, predicate) {
  var index = -1,
      length = paths.length,
      result = {};

  while (++index < length) {
    var path = paths[index],
        value = baseGet$1(object, path);

    if (predicate(value, path)) {
      baseSet(result, castPath(path, object), value);
    }
  }
  return result;
}

var _basePickBy = basePickBy$1;

var basePickBy = _basePickBy,
    hasIn = hasIn_1;

/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @returns {Object} Returns the new object.
 */
function basePick$1(object, paths) {
  return basePickBy(object, paths, function(value, path) {
    return hasIn(object, path);
  });
}

var _basePick = basePick$1;

var basePick = _basePick,
    flatRest = _flatRest;

/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */
var pick = flatRest(function(object, paths) {
  return object == null ? {} : basePick(object, paths);
});

var pick_1 = pick;

var SetCache = _SetCache,
    arrayIncludes = _arrayIncludes,
    arrayIncludesWith = _arrayIncludesWith,
    arrayMap$2 = _arrayMap,
    baseUnary$1 = _baseUnary,
    cacheHas = _cacheHas;

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */
function baseDifference$2(array, values, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;

  if (!length) {
    return result;
  }
  if (iteratee) {
    values = arrayMap$2(values, baseUnary$1(iteratee));
  }
  if (comparator) {
    includes = arrayIncludesWith;
    isCommon = false;
  }
  else if (values.length >= LARGE_ARRAY_SIZE) {
    includes = cacheHas;
    isCommon = false;
    values = new SetCache(values);
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee == null ? value : iteratee(value);

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var valuesIndex = valuesLength;
      while (valuesIndex--) {
        if (values[valuesIndex] === computed) {
          continue outer;
        }
      }
      result.push(value);
    }
    else if (!includes(values, computed, comparator)) {
      result.push(value);
    }
  }
  return result;
}

var _baseDifference = baseDifference$2;

var baseDifference$1 = _baseDifference,
    baseRest$2 = _baseRest,
    isArrayLikeObject$1 = isArrayLikeObject_1;

/**
 * Creates an array excluding all given values using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * **Note:** Unlike `_.pull`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...*} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.difference, _.xor
 * @example
 *
 * _.without([2, 1, 2, 3], 1, 2);
 * // => [3]
 */
var without = baseRest$2(function(array, values) {
  return isArrayLikeObject$1(array)
    ? baseDifference$1(array, values)
    : [];
});

var without_1 = without;

function isBuffer(obj) {
  return obj && obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}
function keyIdentity(key) {
  return key;
}
function flatten(target, opts) {
  opts = opts || {};
  var delimiter = opts.delimiter || '.';
  var maxDepth = opts.maxDepth;
  var transformKey = opts.transformKey || keyIdentity;
  var output = {};
  function step(object, prev, currentDepth) {
    currentDepth = currentDepth || 1;
    Object.keys(object).forEach(function (key) {
      var value = object[key];
      var isarray = opts.safe && Array.isArray(value);
      var type = Object.prototype.toString.call(value);
      var isbuffer = isBuffer(value);
      var isobject = type === '[object Object]' || type === '[object Array]';
      var newKey = prev ? prev + delimiter + transformKey(key) : transformKey(key);
      if (!isarray && !isbuffer && isobject && Object.keys(value).length && (!opts.maxDepth || currentDepth < maxDepth)) {
        return step(value, newKey, currentDepth + 1);
      }
      output[newKey] = value;
    });
  }
  step(target);
  return output;
}

var baseDifference = _baseDifference,
    baseFlatten$2 = _baseFlatten,
    baseRest$1 = _baseRest,
    isArrayLikeObject = isArrayLikeObject_1;

/**
 * Creates an array of `array` values not included in the other given arrays
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. The order and references of result values are
 * determined by the first array.
 *
 * **Note:** Unlike `_.pullAll`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.without, _.xor
 * @example
 *
 * _.difference([2, 1], [2, 3]);
 * // => [1]
 */
var difference = baseRest$1(function(array, values) {
  return isArrayLikeObject(array)
    ? baseDifference(array, baseFlatten$2(values, 1, isArrayLikeObject, true))
    : [];
});

var difference_1 = difference;

function shouldApplyPlugin (name, plugin) {
  if (!plugin.apply && difference_1(Object.keys(plugin), ['config', 'install']).length > 0) {
    return true;
  }
  var apply = plugin.apply;
  if (!Array.isArray(apply)) {
    apply = [apply];
  }
  var shouldApply = false;
  each(apply, condition => {
    if (typeof condition === 'string' && condition === name) {
      shouldApply = true;
      return false;
    } else if (typeof condition === 'object' && condition instanceof RegExp && name.match(condition)) {
      shouldApply = true;
      return false;
    }
  });
  return shouldApply;
}

var name = "@vueform/vueform";
var version$1 = "1.13.2";
var description = "Open-Source Form Framework for Vue";
var homepage = "https://vueform.com";
var license = "MIT";
var authors = [
	{
		name: "Adam Berecz",
		email: "adam@vueform.com"
	}
];
var sideEffects = [
	"./themes/tailwind/templates/**/*.css",
	"./themes/vueform/templates/**/*.css"
];
var main = "./dist/index.mjs";
var module = "./dist/index.mjs";
var types = "./types/index.d.ts";
var exports = {
	".": {
		types: "./types/index.d.ts",
		"default": "./dist/index.mjs"
	},
	"./core": {
		types: "./types/index.d.ts",
		"default": "./dist/core.mjs"
	},
	"./core.js": {
		types: "./types/index.d.ts",
		"default": "./dist/core.mjs"
	},
	"./element": "./element.mjs",
	"./element.js": "./element.mjs",
	"./plugin": "./plugin.mjs",
	"./plugin.js": "./plugin.mjs",
	"./locales/*.js": "./locales/*/index.mjs",
	"./locales/*": "./locales/*/index.mjs",
	"./src/*": "./src/*",
	"./src/components": "./src/components/index.js",
	"./src/services/validation/rules": "./src/services/validation/rules/index.js",
	"./types/*": "./types/*",
	"./dist/*.js": "./dist/*.mjs",
	"./dist/*": "./dist/*.mjs",
	"./dist/*.css": "./dist/*.css",
	"./tailwind": "./tailwind.js",
	"./tailwind.js": "./tailwind.js",
	"./vite": "./vite.js",
	"./vite.js": "./vite.js",
	"./vite.d.ts": "./vite.d.ts",
	"./tailwind-prefixer": "./tailwind-prefixer.js",
	"./tailwind-prefixer.js": "./tailwind-prefixer.js",
	"./postcss.config": "./postcss.config.js",
	"./postcss.config.js": "./postcss.config.js",
	"./tailwind.config": "./tailwind.config.js",
	"./tailwind.config.js": "./tailwind.config.js",
	"./package.json": "./package.json",
	"./themes/blank/templates/*": "./themes/blank/templates/*",
	"./themes/blank/*": "./themes/blank/*.mjs",
	"./themes/blank/*.js": "./themes/blank/*.mjs",
	"./themes/bootstrap/css/*": "./themes/bootstrap/css/*",
	"./themes/bootstrap/scss/*": "./themes/bootstrap/scss/*",
	"./themes/bootstrap/*": "./themes/bootstrap/*.mjs",
	"./themes/bootstrap/*.js": "./themes/bootstrap/*.mjs",
	"./themes/bootstrap.js": "./themes/bootstrap/index.mjs",
	"./themes/material/css/*": "./themes/material/css/*",
	"./themes/material/scss/*": "./themes/material/scss/*",
	"./themes/material/*": "./themes/material/*.mjs",
	"./themes/material/*.js": "./themes/material/*.mjs",
	"./themes/material.js": "./themes/material/index.mjs",
	"./themes/tailwind/templates/*": "./themes/tailwind/templates/*",
	"./themes/tailwind/*": "./themes/tailwind/*.mjs",
	"./themes/tailwind/*.js": "./themes/tailwind/*.mjs",
	"./themes/tailwind.js": "./themes/tailwind/index.mjs",
	"./themes/tailwind-material/css/*": "./themes/tailwind-material/css/*",
	"./themes/tailwind-material/scss/*": "./themes/tailwind-material/scss/*",
	"./themes/tailwind-material/*": "./themes/tailwind-material/*.mjs",
	"./themes/tailwind-material/*.js": "./themes/tailwind-material/*.mjs",
	"./themes/tailwind-material.js": "./themes/tailwind-material/index.mjs",
	"./themes/vueform/css/*": "./themes/vueform/css/*",
	"./themes/vueform/scss/*": "./themes/vueform/scss/*",
	"./themes/vueform/templates/*": "./themes/vueform/templates/*",
	"./themes/vueform/*": "./themes/vueform/*.mjs",
	"./themes/vueform/*.js": "./themes/vueform/*.mjs",
	"./themes/vueform.js": "./themes/vueform/index.mjs",
	"./themes/*": {
		types: "./dist/*.d.mts",
		"default": "./themes/*/index.mjs"
	}
};
var scripts = {
	update: "ncu --dep prod -t minor -u; rm -r node_modules package-lock.json; npm i",
	prelease: "npm run update && npm run build",
	build: "npm run build3 && npm run build2 && npm run generate",
	build2: "node ./scripts/pre-build-vue2 && rollup --config build/rollup.vue2.config.js && node ./scripts/post-build-vue2",
	build3: "rollup --config build/rollup.config.js",
	test: "npm run generate:elements-base && NODE_OPTIONS=\"--max_old_space_size=5120 --no-experimental-fetch\" VUE=3 jest --config=./tests/jest.config.js",
	"generate:types": "npx babel-node  scripts/generate-types.js --presets @babel/preset-env",
	"generate:common-features": "npx babel-node scripts/generate-common-features.js --presets @babel/preset-env",
	"generate:element-features": "npx babel-node scripts/generate-element-features.js --presets @babel/preset-env",
	"generate:elements-base": "npx babel-node scripts/generate-elements-base.js --presets @babel/preset-env",
	"generate:elements": "npx babel-node scripts/generate-elements.js --presets @babel/preset-env",
	"generate:components": "npx babel-node scripts/generate-components.js --presets @babel/preset-env",
	generate: "npm run generate:common-features; npm run generate:element-features; npm run generate:elements-base; npm run generate:elements; npm run generate:components; npm run generate:types; npm run fix-locales",
	"fix-locales": "npx babel-node --presets @babel/preset-env ./scripts/fix-locales.js"
};
var devDependencies = {
	"@babel/core": "^7.2.2",
	"@babel/node": "^7.12.10",
	"@babel/preset-env": "^7.3.1",
	"@rollup/plugin-alias": "^5.1.0",
	"@rollup/plugin-babel": "^5.3.0",
	"@rollup/plugin-commonjs": "^22.0.1",
	"@rollup/plugin-json": "^4.1.0",
	"@rollup/plugin-node-resolve": "^13.0.6",
	"@testing-library/jest-dom": "^5.11.5",
	"@vue/compiler-sfc": "^3.0.0",
	"@vue/test-utils": "2.0.0-rc.16",
	autoprefixer: "^9",
	autosize: "^6.0.1",
	"babel-core": "^7.0.0-bridge.0",
	"babel-loader": "^8.0.5",
	"core-js": "^3.10.1",
	"css-loader": "^2.1.0",
	"expr-eval": "^2.0.2",
	flatpickr: "^4.6.13",
	"flush-promises": "^1.0.2",
	"html-loader": "^1.3.2",
	jest: "^27.3.1",
	"jest-canvas-mock": "^2.3.1",
	"jest-environment-jsdom-sixteen": "^1.0.3",
	"jest-transform-stub": "^2.0.0",
	"json-loader": "^0.5.7",
	locutus: "^2.0.16",
	"module-alias": "^2.2.3",
	moxios: "^0.4.0",
	"mutationobserver-shim": "^0.3.7",
	ncp: "^2.0.0",
	"rollup-plugin-license": "^3.2.0",
	"rollup-plugin-postcss": "^4.0.1",
	"rollup-plugin-terser": "^7.0.2",
	"rollup-plugin-vue": "^6.0.0",
	"rollup-plugin-vue2": "npm:rollup-plugin-vue@^5.1.9",
	"sass-loader": "^7.1.0",
	signature_pad: "^5.0.2",
	sortablejs: "^1.15.0",
	tailwindcss: "npm:@tailwindcss/postcss7-compat@^2.0.2",
	vue: "3.3.13",
	"vue-jest": "npm:@vue/vue3-jest@^27.0.0-alpha.1",
	"vue-loader": "^15.10.0",
	"vue-template-compiler": "^2.7.8",
	vue2: "npm:vue@^2.7.0"
};
var dependencies = {
	"@popperjs/core": "^2.11.8",
	"@vueform/country-phones": "^1.0.3",
	"@vueform/multiselect": "^2.6.11",
	"@vueform/slider": "^2.1.10",
	"@vueform/toggle": "^2.1.4",
	axios: "^1.8.4",
	color: "^4.2.3",
	dompurify: "^3.2.4",
	lodash: "^4.17.21",
	"mini-svg-data-uri": "^1.4.4",
	moment: "^2.30.1",
	nouislider: "^15.8.1",
	sass: "^1.86.2",
	trix: "^2.1.14",
	wnumb: "^1.2.0"
};
var packageJson = {
	"private": false,
	name: name,
	version: version$1,
	description: description,
	homepage: homepage,
	license: license,
	authors: authors,
	sideEffects: sideEffects,
	main: main,
	module: module,
	types: types,
	exports: exports,
	scripts: scripts,
	devDependencies: devDependencies,
	dependencies: dependencies
};

var normalize = function normalize(value) {
  if (value === undefined || typeof value != 'string') {
    return value;
  }

  // is number
  if (value.match(/^-*\d+$/)) {
    return parseInt(value, 10);

    // is float
  } else if (value.match(/^\d+\.\d+$/)) {
    return parseFloat(value);

    // everything else
  } else {
    return value;
  }
};

var parse = string => {
  var parseRule = () => {
    return string.split(':')[0];
  };
  var parseAttributes = () => {
    var parts = string.split(':');
    if (parts.length <= 1) {
      return null;
    }
    var attributes = {};
    var rule = parts[0];
    parts.shift();
    var params = parts.join(':');
    if (['regex', 'not_regex'].indexOf(rule) !== -1) {
      attributes[0] = params;
      return attributes;
    }
    each(params.split(','), (attribute, index) => {
      var attrParts = attribute.split('=');
      if (attrParts.length <= 1) {
        attributes[index] = normalize(attribute);
      } else {
        attributes[attrParts[0]] = normalize(attrParts[1]);
      }
    });
    return attributes;
  };
  return {
    name: parseRule(),
    attributes: parseAttributes()
  };
};

function replaceWildcards (fillable, fill) {
  if (!fill.match(/\.([0-9]+)(?![a-zA-Z]+)/g)) {
    return fillable;
  }
  fill.match(/\.([0-9]+)(?![a-zA-Z]+)/g).forEach(match => {
    fillable = fillable.replace('.*', match);
  });
  return fillable;
}

function replaceWildcardsExpr(fillable, fill) {
  var brackets = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  if (!fillable.includes('[*]')) {
    return fillable;
  }
  var fillParts = fill.split('.');
  var keys = {};
  fillParts.forEach((part, i) => {
    if (!/^[0-9]+$/.test(part)) {
      return;
    }
    keys[fillParts[i - 1]] = part;
  });
  Object.keys(keys).forEach(key => {
    fillable = fillable.replace(new RegExp("(?<![a-zA-Z0-9_-])".concat(key, "\\[\\*\\]"), 'g'), brackets ? "".concat(key, "[").concat(keys[key], "]") : "".concat(key, ".").concat(keys[key]));
  });
  return fillable;
}

var baseTrim = _baseTrim,
    isObject = isObject_1,
    isSymbol$1 = isSymbol_1;

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber$1(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol$1(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

var toNumber_1 = toNumber$1;

var toNumber = toNumber_1;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite$1(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

var toFinite_1 = toFinite$1;

var toFinite = toFinite_1;

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger$5(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

var toInteger_1 = toInteger$5;

var baseIndexOf = _baseIndexOf,
    isArrayLike$1 = isArrayLike_1,
    isString = isString_1,
    toInteger$4 = toInteger_1,
    values = values_1;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$2 = Math.max;

/**
 * Checks if `value` is in `collection`. If `collection` is a string, it's
 * checked for a substring of `value`, otherwise
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * is used for equality comparisons. If `fromIndex` is negative, it's used as
 * the offset from the end of `collection`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=0] The index to search from.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
 * @returns {boolean} Returns `true` if `value` is found, else `false`.
 * @example
 *
 * _.includes([1, 2, 3], 1);
 * // => true
 *
 * _.includes([1, 2, 3], 1, 2);
 * // => false
 *
 * _.includes({ 'a': 1, 'b': 2 }, 1);
 * // => true
 *
 * _.includes('abcd', 'bc');
 * // => true
 */
function includes(collection, value, fromIndex, guard) {
  collection = isArrayLike$1(collection) ? collection : values(collection);
  fromIndex = (fromIndex && !guard) ? toInteger$4(fromIndex) : 0;

  var length = collection.length;
  if (fromIndex < 0) {
    fromIndex = nativeMax$2(length + fromIndex, 0);
  }
  return isString(collection)
    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
}

var includes_1 = includes;

/**
 * The base implementation of `_.clamp` which doesn't coerce arguments.
 *
 * @private
 * @param {number} number The number to clamp.
 * @param {number} [lower] The lower bound.
 * @param {number} upper The upper bound.
 * @returns {number} Returns the clamped number.
 */

function baseClamp$2(number, lower, upper) {
  if (number === number) {
    if (upper !== undefined) {
      number = number <= upper ? number : upper;
    }
    if (lower !== undefined) {
      number = number >= lower ? number : lower;
    }
  }
  return number;
}

var _baseClamp = baseClamp$2;

var baseClamp$1 = _baseClamp,
    baseToString$1 = _baseToString,
    toInteger$3 = toInteger_1,
    toString$2 = toString_1;

/**
 * Checks if `string` starts with the given target string.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {string} [target] The string to search for.
 * @param {number} [position=0] The position to search from.
 * @returns {boolean} Returns `true` if `string` starts with `target`,
 *  else `false`.
 * @example
 *
 * _.startsWith('abc', 'a');
 * // => true
 *
 * _.startsWith('abc', 'b');
 * // => false
 *
 * _.startsWith('abc', 'b', 1);
 * // => true
 */
function startsWith(string, target, position) {
  string = toString$2(string);
  position = position == null
    ? 0
    : baseClamp$1(toInteger$3(position), 0, string.length);

  target = baseToString$1(target);
  return string.slice(position, position + target.length) == target;
}

var startsWith_1 = startsWith;

var baseClamp = _baseClamp,
    baseToString = _baseToString,
    toInteger$2 = toInteger_1,
    toString$1 = toString_1;

/**
 * Checks if `string` ends with the given target string.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {string} [target] The string to search for.
 * @param {number} [position=string.length] The position to search up to.
 * @returns {boolean} Returns `true` if `string` ends with `target`,
 *  else `false`.
 * @example
 *
 * _.endsWith('abc', 'c');
 * // => true
 *
 * _.endsWith('abc', 'b');
 * // => false
 *
 * _.endsWith('abc', 'b', 2);
 * // => true
 */
function endsWith(string, target, position) {
  string = toString$1(string);
  target = baseToString(target);

  var length = string.length;
  position = position === undefined
    ? length
    : baseClamp(toInteger$2(position), 0, length);

  var end = position;
  position -= target.length;
  return position >= 0 && string.slice(position, end) == target;
}

var endsWith_1 = endsWith;

function compare (actual, operator, expected, el$, form$) {
  if (!operator) {
    return false;
  }
  var strict = form$.$vueform.config.strictConditions;
  actual = Array.isArray(actual) ? actual.map(e => normalize(e)) : normalize(actual);
  expected = Array.isArray(expected) ? expected.map(e => normalize(e)) : normalize(expected);
  var moment = form$.$vueform.services.moment;
  switch (operator.toLowerCase()) {
    case '>':
      return isArray_1(actual) ? actual.every(a => a > expected) : actual > expected;
    case '>=':
      return isArray_1(actual) ? strict ? actual.every(a => a >= expected && a !== null && a !== undefined && a !== '') : actual.every(a => a >= expected) : strict ? actual >= expected && actual !== null && actual !== undefined && actual !== '' : actual >= expected;
    case '<':
      return isArray_1(actual) ? strict ? actual.every(a => a < expected && a !== null && a !== undefined && a !== '') : actual.every(a => a < expected) : strict ? actual < expected && actual !== null && actual !== undefined && actual !== '' : actual < expected;
    case '<=':
      return isArray_1(actual) ? strict ? actual.every(a => a <= expected && a !== null && a !== undefined && a !== '') : actual.every(a => a <= expected) : strict ? actual <= expected && actual !== null && actual !== undefined && actual !== '' : actual <= expected;
    case 'between':
      return actual > expected[0] && actual < expected[1];
    case 'empty':
      if (isArray_1(actual)) {
        return !actual.length;
      } else if (actual && actual instanceof File) {
        return false;
      } else if (actual && actual instanceof Blob) {
        return false;
      } else if (actual && typeof actual === 'object') {
        var values = Object.values(actual);
        return !values.length || values.every(v => {
          if (Array.isArray(v)) {
            return !v.length;
          } else if (v && typeof v === 'object') {
            return Object.values(v).every(ov => {
              if (Array.isArray(ov)) {
                return !ov.length;
              } else {
                return ['', null, undefined].indexOf(ov) !== -1;
              }
            });
          } else {
            return ['', null, undefined].indexOf(v) !== -1;
          }
        });
      } else {
        return ['', null, undefined].indexOf(actual) !== -1;
      }
    case 'not_empty':
      if (isArray_1(actual)) {
        return !!actual.length;
      } else if (actual && actual instanceof File) {
        return true;
      } else if (actual && actual instanceof Blob) {
        return true;
      } else if (actual && typeof actual === 'object') {
        var _values = Object.values(actual);
        return _values.length && _values.some(v => {
          if (Array.isArray(v)) {
            return v.length;
          } else if (v && typeof v === 'object') {
            return Object.values(v).some(ov => {
              if (Array.isArray(ov)) {
                return ov.length;
              } else {
                return ['', null, undefined].indexOf(ov) === -1;
              }
            });
          } else {
            return ['', null, undefined].indexOf(v) === -1;
          }
        });
      } else {
        return ['', null, undefined].indexOf(actual) === -1;
      }
    case '==':
    case 'in':
      if (isArray_1(expected)) {
        if (isArray_1(actual)) {
          // ['checkboxes', [1,2,3]]
          return !expected.length ? !actual.length : actual.filter(a => includes_1(expected, a)).length > 0;
        } else {
          // ['text', [1,2,3]]
          return expected.indexOf(actual) !== -1;
        }
      } else {
        if (isArray_1(actual)) {
          // ['checkboxes', 1]
          return actual.indexOf(expected) !== -1;
        } else {
          // ['text', 1]
          return actual == expected;
        }
      }
    case '!=':
    case 'not_in':
      if (isArray_1(expected)) {
        if (isArray_1(actual)) {
          // ['checkboxes', 'not_in', [1,2,3]]
          return !expected.length ? !!actual.length : actual.filter(e => includes_1(expected, e)).length == 0;
        } else {
          // ['text', 'not_in', [1,2,3]]
          return expected.indexOf(actual) === -1;
        }
      } else {
        if (isArray_1(actual)) {
          // ['checkboxes', '!=', 1]
          return actual.indexOf(expected) === -1;
        } else {
          // ['text', '!=', 1]
          return actual != expected;
        }
      }
    case 'today':
      if (!isArray_1(actual)) {
        actual = [actual];
      }
      return actual.length && actual.every(a => moment(a, el$.valueDateFormat).isSame(moment(), 'day'));
    case 'before':
      if (!isArray_1(actual)) {
        actual = [actual];
      }
      return actual.length && actual.every(a => {
        var date = moment(a, el$.valueDateFormat);
        return date.isValid() && date.isBefore(moment(expected === 'today' ? undefined : expected), 'day');
      });
    case 'after':
      if (!isArray_1(actual)) {
        actual = [actual];
      }
      return actual.length && actual.every(a => {
        var date = moment(a, el$.valueDateFormat);
        return date.isValid() && date.isAfter(moment(expected === 'today' ? undefined : expected), 'day');
      });
    case '^':
      return startsWith_1(actual, expected);
    case '$':
      return endsWith_1(actual, expected);
    case '*':
      return includes_1(actual, expected);
    default:
      var customOperators = form$.$vueform.config.operators || {};
      if (customOperators[operator]) {
        return customOperators[operator](actual, expected, el$, form$);
      }
  }
}

var Factory = class {
  constructor(path, form$, config$) {
    this.form$ = form$;
    this.element$ = form$.el$(path);
    this.config$ = config$;
  }
  get rules() {
    var rules = Object.assign({}, this.form$.$vueform.services.validation.rules, this.form$.$vueform.rules);
    if (!rules.in && rules.in_) {
      rules.in = rules.in_;
    }
    return rules;
  }
  makeAll(rules) {
    var parsedRules = this.parseRules(rules);
    if (parsedRules.length == 0) {
      return [];
    }
    return map_1(parsedRules, rule => {
      return this.make(rule);
    });
  }
  make(rule) {
    var ruleClass = typeof rule == 'function' ? rule : Array.isArray(rule) ? rule[0] : this.rules[rule.name];
    if (!ruleClass) {
      throw new Error("Unknown rule: '".concat(rule.name, "'"));
    }
    return new ruleClass(rule !== null && rule !== void 0 && rule.name ? rule : {
      name: "custom_rule_".concat(Math.floor(Math.random() * 9000000) + 1000000),
      attributes: Array.isArray(rule) && rule[1] ? rule[1] : []
    }, {
      element$: this.element$,
      config$: this.config$
    });
  }
  parseRules(rules) {
    if (!isArray_1(rules)) {
      rules = rules.split('|');
    }
    return rules.map(rule => {
      if (typeof rule == 'function' || Array.isArray(rule)) {
        return rule;
      }
      return this.isConditional(rule) ? this.parseConditional(rule) : this.parse(rule);
    });
  }
  parse(rule) {
    return parse(rule);
  }
  isConditional(rule) {
    return isPlainObject_1(rule);
  }
  getExprDeps(condition) {
    var _this$element$;
    var ExpressionService = this.form$.expression;
    return ExpressionService.vars(ExpressionService.wrap(condition), (_this$element$ = this.element$) === null || _this$element$ === void 0 ? void 0 : _this$element$.dataPath);
  }
  parseConditional(rule) {
    var _conditions = values_1(rule)[0];
    if (!Array.isArray(_conditions[0])) {
      _conditions = [_conditions];
    }
    var parsed = _objectSpread2$1(_objectSpread2$1({}, parse(keys_1(rule)[0])), {}, {
      conditions: (form$, Validator, el$) => {
        return _conditions.every(condition => {
          if (isArray_1(condition)) {
            if (typeof condition[0] === 'string' && condition.length === 1) {
              return this.createConditionFromString(condition)(form$, Validator, el$);
            } else if (isArray_1(condition[0])) {
              return condition.some(subcondition => {
                if (typeof subcondition[0] === 'string' && subcondition.length === 1) {
                  return this.createConditionFromString(subcondition)(form$, Validator, el$);
                } else if (isArray_1(subcondition)) {
                  return this.createConditionFromArray(subcondition)(form$, Validator, el$);
                } else {
                  return condition(form$, Validator, el$);
                }
              });
            } else {
              return this.createConditionFromArray(condition)(form$, Validator, el$);
            }
          } else {
            return condition(form$, Validator, el$);
          }
        });
      },
      dependents: []
    });
    _conditions.forEach(condition => {
      if (isArray_1(condition)) {
        if (typeof condition[0] === 'string') {
          parsed.dependents.push(...this.getExprDeps(condition[0]));
        } else if (isArray_1(condition[0])) {
          condition.forEach(subcondition => {
            if (typeof subcondition === 'string') {
              parsed.dependents.push(...this.getExprDeps(subcondition[0]));
            } else if (isArray_1(subcondition)) {
              parsed.dependents.push(replaceWildcards(subcondition[0], this.element$.path));
            }
          });
        } else {
          parsed.dependents.push(replaceWildcards(condition[0], this.element$.path));
        }
      }
    });
    return parsed;
  }
  createConditionFromArray(condition) {
    var field = replaceWildcards(condition[0], this.element$.path);
    var operator = condition.length == 3 || ['empty', 'not_empty', 'today'].indexOf(condition[1]) !== -1 ? condition[1] : '==';
    var value = condition.length == 3 ? condition[2] : ['empty', 'not_empty', 'today'].indexOf(condition[1]) === -1 ? condition[1] : true;
    return (form$, Validator, el$) => {
      var _form$$el$;
      var actual = (_form$$el$ = form$.el$(field)) === null || _form$$el$ === void 0 ? void 0 : _form$$el$.value;
      var expected = value;
      return compare(actual, operator, expected, this.element$, form$);
    };
  }
  createConditionFromString(condition) {
    if (!/^{/.test(condition) && !/}$/.test(condition)) {
      condition = "{".concat(condition, "}");
    }
    return (form$, Validator, el$) => {
      var _this$element$2;
      return form$.resolveExpression(condition, (_this$element$2 = this.element$) === null || _this$element$2 === void 0 ? void 0 : _this$element$2.dataPath) !== 'false';
    };
  }
};

class accepted extends Validator {
  check(value) {
    return ['yes', 'on', '1', 1, true, 'true'].indexOf(value) !== -1;
  }
}

class active_url extends Validator {
  get isAsync() {
    return true;
  }
  check(value) {
    var _this = this;
    return _asyncToGenerator(function* () {
      var endpoint = _this.form$.$vueform.config.endpoints.activeUrl;
      var method = typeof endpoint !== 'function' ? endpoint.method : null;
      var res;
      if (typeof endpoint === 'function') {
        res = yield endpoint(value, _this.element$, _this.form$);
      } else {
        res = yield _this.form$.$vueform.services.axios.request({
          url: endpoint.url,
          method,
          [method.toLowerCase() === 'get' ? 'params' : 'data']: {
            url: value
          }
        });
      }
      return res.data;
    })();
  }
}

class after extends Validator {
  get messageParams() {
    return {
      attribute: this.attributeName,
      date: this.date.format(this.format)
    };
  }
  get param() {
    return this.path ? replaceWildcards(this.attributes[0], this.path) : this.attributes[0];
  }
  get format() {
    return ['date', 'dates'].indexOf(this.element$.type) !== -1 && this.element$.valueFormat ? this.element$.valueFormat : 'YYYY-MM-DD';
  }
  get otherFormat() {
    if (this.dateType != 'element') {
      return this.format;
    }
    return ['date', 'dates'].indexOf(this.other$.type) !== -1 && this.other$.valueFormat ? this.other$.valueFormat : this.format;
  }
  get path() {
    var _this$element$;
    return (_this$element$ = this.element$) === null || _this$element$ === void 0 ? void 0 : _this$element$.path;
  }
  get otherPath() {
    if (this.dateType != 'element') {
      return null;
    }
    return this.param;
  }
  get other$() {
    if (this.dateType != 'element') {
      return {};
    }
    return this.form$.el$(this.param);
  }
  get date() {
    var date = '';
    switch (this.dateType) {
      case 'relative':
        if (this.param === 'today') {
          date = this.moment().startOf('day');
        }
        if (this.param === 'tomorrow') {
          date = this.moment().startOf('day').add(1, 'days');
        }
        if (this.param === 'yesterday') {
          date = this.moment().startOf('day').subtract(1, 'days');
        }
        break;
      case 'element':
        date = this.moment(this.other$.value, this.otherFormat);
        break;
      case 'absolute':
        date = this.moment(this.param, this.format);
        break;
    }
    return date;
  }
  get dateType() {
    if (['today', 'tomorrow', 'yesterday'].indexOf(this.param) !== -1) {
      return 'relative';
    } else if (this.form$.el$(this.param)) {
      return 'element';
    } else {
      return 'absolute';
    }
  }
  init() {
    this.form$.$nextTick(() => {
      if (this.dateType == 'element') {
        this.watchOther();
      }
    });
  }
  check(value) {
    if (isArray_1(value)) {
      var valid = true;
      each(value, date => {
        if (!this.checkDate(date)) {
          valid = false;
        }
      });
      return valid;
    }
    return this.checkDate(value);
  }
  checkDate(value) {
    return this.moment(value, this.format).isAfter(this.moment(this.date, this.otherFormat));
  }
}

class after_or_equal extends after {
  checkDate(value) {
    return this.moment(value, this.format).isSameOrAfter(this.moment(this.date, this.otherFormat));
  }
}

class alpha extends Validator {
  check(value) {
    // Solution from XRegExp library:
    // https://stackoverflow.com/a/15861883/1276358
    return /^[\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]*$/.test(value);
  }
}

class alpha_dash extends Validator {
  check(value) {
    // Solution from XRegExp library:
    // https://stackoverflow.com/a/15861883/1276358
    return /^[0-9-_\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]*$/.test(value);
  }
}

class alpha_num extends Validator {
  check(value) {
    // Solution from XRegExp library:
    // https://stackoverflow.com/a/15861883/1276358
    return /^[0-9\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]*$/.test(value);
  }
}

class array$2 extends Validator {
  check(value) {
    return isArray_1(value);
  }
}

class before extends after {
  checkDate(value) {
    return this.moment(value, this.format).isBefore(this.moment(this.date, this.otherFormat));
  }
}

class before_or_equal extends after {
  checkDate(value) {
    return this.moment(value, this.format).isSameOrBefore(this.moment(this.date, this.otherFormat));
  }
}

class between extends Validator {
  get messageParams() {
    return {
      attribute: this.attributeName,
      min: this.min,
      max: this.max
    };
  }
  get min() {
    return this.attributes[0];
  }
  get max() {
    return this.attributes[1];
  }
  check(value) {
    if (typeof value !== 'number' && !value) {
      return true;
    }
    var size = this.size(value);
    return size >= this.min && size <= this.max;
  }
}

class boolean$1 extends Validator {
  check(value) {
    var accepted = [true, false, 0, 1, '0', '1'];
    return accepted.indexOf(value) !== -1;
  }
}

class captcha$2 extends Validator {
  get isAsync() {
    return true;
  }
  check(value) {
    var _this = this;
    return _asyncToGenerator(function* () {
      if (!_this.element$.shouldVerify) {
        return true;
      }
      return yield _this.element$.Provider.validate(_this.element$.Provider.getResponse());
    })();
  }
}

class completed extends Validator {
  get debounce() {
    if (this.attributes.debounce !== undefined) {
      return this.attributes.debounce;
    }
    if (this.element$.debounce !== null) {
      return this.element$.debounce;
    }
    return 1000;
  }
  check(value) {
    var _this$element$$Mask$m;
    if (!this.element$.Mask) {
      return this.filled(value);
    }
    var isComplete = (_this$element$$Mask$m = this.element$.Mask.masked.currentMask) === null || _this$element$$Mask$m === void 0 ? void 0 : _this$element$$Mask$m.isComplete;
    return isComplete === undefined || this.element$.empty ? true : isComplete;
  }
}

class confirmed extends Validator {
  get messageParams() {
    return {
      attribute: this.attributeName,
      other: this.other$.genericName
    };
  }
  get otherPath() {
    return "".concat(this.element$.path, "_confirmation");
  }
  get other$() {
    return this.form$.el$(replaceWildcards(this.otherPath, this.element$.path));
  }
  init() {
    this.watchOther();
  }
  check(value) {
    if (!this.filled(this.other$.value)) {
      return true;
    }
    return value == this.other$.value;
  }
}

var reSpace = '[ \\t]+';
var reSpaceOpt = '[ \\t]*';
var reMeridian = '(?:([ap])\\.?m\\.?([\\t ]|$))';
var reHour24 = '(2[0-4]|[01]?[0-9])';
var reHour24lz = '([01][0-9]|2[0-4])';
var reHour12 = '(0?[1-9]|1[0-2])';
var reMinute = '([0-5]?[0-9])';
var reMinutelz = '([0-5][0-9])';
var reSecond = '(60|[0-5]?[0-9])';
var reSecondlz = '(60|[0-5][0-9])';
var reFrac = '(?:\\.([0-9]+))';

var reDayfull = 'sunday|monday|tuesday|wednesday|thursday|friday|saturday';
var reDayabbr = 'sun|mon|tue|wed|thu|fri|sat';
var reDaytext = reDayfull + '|' + reDayabbr + '|weekdays?';

var reReltextnumber = 'first|second|third|fourth|fifth|sixth|seventh|eighth?|ninth|tenth|eleventh|twelfth';
var reReltexttext = 'next|last|previous|this';
var reReltextunit = '(?:second|sec|minute|min|hour|day|fortnight|forthnight|month|year)s?|weeks|' + reDaytext;

var reYear = '([0-9]{1,4})';
var reYear2 = '([0-9]{2})';
var reYear4 = '([0-9]{4})';
var reYear4withSign = '([+-]?[0-9]{4})';
var reMonth = '(1[0-2]|0?[0-9])';
var reMonthlz = '(0[0-9]|1[0-2])';
var reDay = '(?:(3[01]|[0-2]?[0-9])(?:st|nd|rd|th)?)';
var reDaylz = '(0[0-9]|[1-2][0-9]|3[01])';

var reMonthFull = 'january|february|march|april|may|june|july|august|september|october|november|december';
var reMonthAbbr = 'jan|feb|mar|apr|may|jun|jul|aug|sept?|oct|nov|dec';
var reMonthroman = 'i[vx]|vi{0,3}|xi{0,2}|i{1,3}';
var reMonthText = '(' + reMonthFull + '|' + reMonthAbbr + '|' + reMonthroman + ')';

var reTzCorrection = '((?:GMT)?([+-])' + reHour24 + ':?' + reMinute + '?)';
var reTzAbbr = '\\(?([a-zA-Z]{1,6})\\)?';
var reDayOfYear = '(00[1-9]|0[1-9][0-9]|[12][0-9][0-9]|3[0-5][0-9]|36[0-6])';
var reWeekOfYear = '(0[1-9]|[1-4][0-9]|5[0-3])';

var reDateNoYear = reMonthText + '[ .\\t-]*' + reDay + '[,.stndrh\\t ]*';

function processMeridian(hour, meridian) {
  meridian = meridian && meridian.toLowerCase();

  switch (meridian) {
    case 'a':
      hour += hour === 12 ? -12 : 0;
      break;
    case 'p':
      hour += hour !== 12 ? 12 : 0;
      break;
  }

  return hour;
}

function processYear(yearStr) {
  var year = +yearStr;

  if (yearStr.length < 4 && year < 100) {
    year += year < 70 ? 2000 : 1900;
  }

  return year;
}

function lookupMonth(monthStr) {
  return {
    jan: 0,
    january: 0,
    i: 0,
    feb: 1,
    february: 1,
    ii: 1,
    mar: 2,
    march: 2,
    iii: 2,
    apr: 3,
    april: 3,
    iv: 3,
    may: 4,
    v: 4,
    jun: 5,
    june: 5,
    vi: 5,
    jul: 6,
    july: 6,
    vii: 6,
    aug: 7,
    august: 7,
    viii: 7,
    sep: 8,
    sept: 8,
    september: 8,
    ix: 8,
    oct: 9,
    october: 9,
    x: 9,
    nov: 10,
    november: 10,
    xi: 10,
    dec: 11,
    december: 11,
    xii: 11
  }[monthStr.toLowerCase()];
}

function lookupWeekday(dayStr) {
  var desiredSundayNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  var dayNumbers = {
    mon: 1,
    monday: 1,
    tue: 2,
    tuesday: 2,
    wed: 3,
    wednesday: 3,
    thu: 4,
    thursday: 4,
    fri: 5,
    friday: 5,
    sat: 6,
    saturday: 6,
    sun: 0,
    sunday: 0
  };

  return dayNumbers[dayStr.toLowerCase()] || desiredSundayNumber;
}

function lookupRelative(relText) {
  var relativeNumbers = {
    last: -1,
    previous: -1,
    this: 0,
    first: 1,
    next: 1,
    second: 2,
    third: 3,
    fourth: 4,
    fifth: 5,
    sixth: 6,
    seventh: 7,
    eight: 8,
    eighth: 8,
    ninth: 9,
    tenth: 10,
    eleventh: 11,
    twelfth: 12
  };

  var relativeBehavior = {
    this: 1
  };

  var relTextLower = relText.toLowerCase();

  return {
    amount: relativeNumbers[relTextLower],
    behavior: relativeBehavior[relTextLower] || 0
  };
}

function processTzCorrection(tzOffset, oldValue) {
  var reTzCorrectionLoose = /(?:GMT)?([+-])(\d+)(:?)(\d{0,2})/i;
  tzOffset = tzOffset && tzOffset.match(reTzCorrectionLoose);

  if (!tzOffset) {
    return oldValue;
  }

  var sign = tzOffset[1] === '-' ? -1 : 1;
  var hours = +tzOffset[2];
  var minutes = +tzOffset[4];

  if (!tzOffset[4] && !tzOffset[3]) {
    minutes = Math.floor(hours % 100);
    hours = Math.floor(hours / 100);
  }

  // timezone offset in seconds
  return sign * (hours * 60 + minutes) * 60;
}

// tz abbrevation : tz offset in seconds
var tzAbbrOffsets = {
  acdt: 37800,
  acst: 34200,
  addt: -7200,
  adt: -10800,
  aedt: 39600,
  aest: 36000,
  ahdt: -32400,
  ahst: -36000,
  akdt: -28800,
  akst: -32400,
  amt: -13840,
  apt: -10800,
  ast: -14400,
  awdt: 32400,
  awst: 28800,
  awt: -10800,
  bdst: 7200,
  bdt: -36000,
  bmt: -14309,
  bst: 3600,
  cast: 34200,
  cat: 7200,
  cddt: -14400,
  cdt: -18000,
  cemt: 10800,
  cest: 7200,
  cet: 3600,
  cmt: -15408,
  cpt: -18000,
  cst: -21600,
  cwt: -18000,
  chst: 36000,
  dmt: -1521,
  eat: 10800,
  eddt: -10800,
  edt: -14400,
  eest: 10800,
  eet: 7200,
  emt: -26248,
  ept: -14400,
  est: -18000,
  ewt: -14400,
  ffmt: -14660,
  fmt: -4056,
  gdt: 39600,
  gmt: 0,
  gst: 36000,
  hdt: -34200,
  hkst: 32400,
  hkt: 28800,
  hmt: -19776,
  hpt: -34200,
  hst: -36000,
  hwt: -34200,
  iddt: 14400,
  idt: 10800,
  imt: 25025,
  ist: 7200,
  jdt: 36000,
  jmt: 8440,
  jst: 32400,
  kdt: 36000,
  kmt: 5736,
  kst: 30600,
  lst: 9394,
  mddt: -18000,
  mdst: 16279,
  mdt: -21600,
  mest: 7200,
  met: 3600,
  mmt: 9017,
  mpt: -21600,
  msd: 14400,
  msk: 10800,
  mst: -25200,
  mwt: -21600,
  nddt: -5400,
  ndt: -9052,
  npt: -9000,
  nst: -12600,
  nwt: -9000,
  nzdt: 46800,
  nzmt: 41400,
  nzst: 43200,
  pddt: -21600,
  pdt: -25200,
  pkst: 21600,
  pkt: 18000,
  plmt: 25590,
  pmt: -13236,
  ppmt: -17340,
  ppt: -25200,
  pst: -28800,
  pwt: -25200,
  qmt: -18840,
  rmt: 5794,
  sast: 7200,
  sdmt: -16800,
  sjmt: -20173,
  smt: -13884,
  sst: -39600,
  tbmt: 10751,
  tmt: 12344,
  uct: 0,
  utc: 0,
  wast: 7200,
  wat: 3600,
  wemt: 7200,
  west: 3600,
  wet: 0,
  wib: 25200,
  wita: 28800,
  wit: 32400,
  wmt: 5040,
  yddt: -25200,
  ydt: -28800,
  ypt: -28800,
  yst: -32400,
  ywt: -28800,
  a: 3600,
  b: 7200,
  c: 10800,
  d: 14400,
  e: 18000,
  f: 21600,
  g: 25200,
  h: 28800,
  i: 32400,
  k: 36000,
  l: 39600,
  m: 43200,
  n: -3600,
  o: -7200,
  p: -10800,
  q: -14400,
  r: -18000,
  s: -21600,
  t: -25200,
  u: -28800,
  v: -32400,
  w: -36000,
  x: -39600,
  y: -43200,
  z: 0
};

var formats$1 = {
  yesterday: {
    regex: /^yesterday/i,
    name: 'yesterday',
    callback: function callback() {
      this.rd -= 1;
      return this.resetTime();
    }
  },

  now: {
    regex: /^now/i,
    name: 'now'
    // do nothing
  },

  noon: {
    regex: /^noon/i,
    name: 'noon',
    callback: function callback() {
      return this.resetTime() && this.time(12, 0, 0, 0);
    }
  },

  midnightOrToday: {
    regex: /^(midnight|today)/i,
    name: 'midnight | today',
    callback: function callback() {
      return this.resetTime();
    }
  },

  tomorrow: {
    regex: /^tomorrow/i,
    name: 'tomorrow',
    callback: function callback() {
      this.rd += 1;
      return this.resetTime();
    }
  },

  timestamp: {
    regex: /^@(-?\d+)/i,
    name: 'timestamp',
    callback: function callback(match, timestamp) {
      this.rs += +timestamp;
      this.y = 1970;
      this.m = 0;
      this.d = 1;
      this.dates = 0;

      return this.resetTime() && this.zone(0);
    }
  },

  firstOrLastDay: {
    regex: /^(first|last) day of/i,
    name: 'firstdayof | lastdayof',
    callback: function callback(match, day) {
      if (day.toLowerCase() === 'first') {
        this.firstOrLastDayOfMonth = 1;
      } else {
        this.firstOrLastDayOfMonth = -1;
      }
    }
  },

  backOrFrontOf: {
    regex: RegExp('^(back|front) of ' + reHour24 + reSpaceOpt + reMeridian + '?', 'i'),
    name: 'backof | frontof',
    callback: function callback(match, side, hours, meridian) {
      var back = side.toLowerCase() === 'back';
      var hour = +hours;
      var minute = 15;

      if (!back) {
        hour -= 1;
        minute = 45;
      }

      hour = processMeridian(hour, meridian);

      return this.resetTime() && this.time(hour, minute, 0, 0);
    }
  },

  weekdayOf: {
    regex: RegExp('^(' + reReltextnumber + '|' + reReltexttext + ')' + reSpace + '(' + reDayfull + '|' + reDayabbr + ')' + reSpace + 'of', 'i'),
    name: 'weekdayof'
    // todo
  },

  mssqltime: {
    regex: RegExp('^' + reHour12 + ':' + reMinutelz + ':' + reSecondlz + '[:.]([0-9]+)' + reMeridian, 'i'),
    name: 'mssqltime',
    callback: function callback(match, hour, minute, second, frac, meridian) {
      return this.time(processMeridian(+hour, meridian), +minute, +second, +frac.substr(0, 3));
    }
  },

  oracledate: {
    regex: /^(\d{2})-([A-Z]{3})-(\d{2})$/i,
    name: 'd-M-y',
    callback: function callback(match, day, monthText, year) {
      var month = {
        JAN: 0,
        FEB: 1,
        MAR: 2,
        APR: 3,
        MAY: 4,
        JUN: 5,
        JUL: 6,
        AUG: 7,
        SEP: 8,
        OCT: 9,
        NOV: 10,
        DEC: 11
      }[monthText.toUpperCase()];
      return this.ymd(2000 + parseInt(year, 10), month, parseInt(day, 10));
    }
  },

  timeLong12: {
    regex: RegExp('^' + reHour12 + '[:.]' + reMinute + '[:.]' + reSecondlz + reSpaceOpt + reMeridian, 'i'),
    name: 'timelong12',
    callback: function callback(match, hour, minute, second, meridian) {
      return this.time(processMeridian(+hour, meridian), +minute, +second, 0);
    }
  },

  timeShort12: {
    regex: RegExp('^' + reHour12 + '[:.]' + reMinutelz + reSpaceOpt + reMeridian, 'i'),
    name: 'timeshort12',
    callback: function callback(match, hour, minute, meridian) {
      return this.time(processMeridian(+hour, meridian), +minute, 0, 0);
    }
  },

  timeTiny12: {
    regex: RegExp('^' + reHour12 + reSpaceOpt + reMeridian, 'i'),
    name: 'timetiny12',
    callback: function callback(match, hour, meridian) {
      return this.time(processMeridian(+hour, meridian), 0, 0, 0);
    }
  },

  soap: {
    regex: RegExp('^' + reYear4 + '-' + reMonthlz + '-' + reDaylz + 'T' + reHour24lz + ':' + reMinutelz + ':' + reSecondlz + reFrac + reTzCorrection + '?', 'i'),
    name: 'soap',
    callback: function callback(match, year, month, day, hour, minute, second, frac, tzCorrection) {
      return this.ymd(+year, month - 1, +day) && this.time(+hour, +minute, +second, +frac.substr(0, 3)) && this.zone(processTzCorrection(tzCorrection));
    }
  },

  wddx: {
    regex: RegExp('^' + reYear4 + '-' + reMonth + '-' + reDay + 'T' + reHour24 + ':' + reMinute + ':' + reSecond),
    name: 'wddx',
    callback: function callback(match, year, month, day, hour, minute, second) {
      return this.ymd(+year, month - 1, +day) && this.time(+hour, +minute, +second, 0);
    }
  },

  exif: {
    regex: RegExp('^' + reYear4 + ':' + reMonthlz + ':' + reDaylz + ' ' + reHour24lz + ':' + reMinutelz + ':' + reSecondlz, 'i'),
    name: 'exif',
    callback: function callback(match, year, month, day, hour, minute, second) {
      return this.ymd(+year, month - 1, +day) && this.time(+hour, +minute, +second, 0);
    }
  },

  xmlRpc: {
    regex: RegExp('^' + reYear4 + reMonthlz + reDaylz + 'T' + reHour24 + ':' + reMinutelz + ':' + reSecondlz),
    name: 'xmlrpc',
    callback: function callback(match, year, month, day, hour, minute, second) {
      return this.ymd(+year, month - 1, +day) && this.time(+hour, +minute, +second, 0);
    }
  },

  xmlRpcNoColon: {
    regex: RegExp('^' + reYear4 + reMonthlz + reDaylz + '[Tt]' + reHour24 + reMinutelz + reSecondlz),
    name: 'xmlrpcnocolon',
    callback: function callback(match, year, month, day, hour, minute, second) {
      return this.ymd(+year, month - 1, +day) && this.time(+hour, +minute, +second, 0);
    }
  },

  clf: {
    regex: RegExp('^' + reDay + '/(' + reMonthAbbr + ')/' + reYear4 + ':' + reHour24lz + ':' + reMinutelz + ':' + reSecondlz + reSpace + reTzCorrection, 'i'),
    name: 'clf',
    callback: function callback(match, day, month, year, hour, minute, second, tzCorrection) {
      return this.ymd(+year, lookupMonth(month), +day) && this.time(+hour, +minute, +second, 0) && this.zone(processTzCorrection(tzCorrection));
    }
  },

  iso8601long: {
    regex: RegExp('^t?' + reHour24 + '[:.]' + reMinute + '[:.]' + reSecond + reFrac, 'i'),
    name: 'iso8601long',
    callback: function callback(match, hour, minute, second, frac) {
      return this.time(+hour, +minute, +second, +frac.substr(0, 3));
    }
  },

  dateTextual: {
    regex: RegExp('^' + reMonthText + '[ .\\t-]*' + reDay + '[,.stndrh\\t ]+' + reYear, 'i'),
    name: 'datetextual',
    callback: function callback(match, month, day, year) {
      return this.ymd(processYear(year), lookupMonth(month), +day);
    }
  },

  pointedDate4: {
    regex: RegExp('^' + reDay + '[.\\t-]' + reMonth + '[.-]' + reYear4),
    name: 'pointeddate4',
    callback: function callback(match, day, month, year) {
      return this.ymd(+year, month - 1, +day);
    }
  },

  pointedDate2: {
    regex: RegExp('^' + reDay + '[.\\t]' + reMonth + '\\.' + reYear2),
    name: 'pointeddate2',
    callback: function callback(match, day, month, year) {
      return this.ymd(processYear(year), month - 1, +day);
    }
  },

  timeLong24: {
    regex: RegExp('^t?' + reHour24 + '[:.]' + reMinute + '[:.]' + reSecond),
    name: 'timelong24',
    callback: function callback(match, hour, minute, second) {
      return this.time(+hour, +minute, +second, 0);
    }
  },

  dateNoColon: {
    regex: RegExp('^' + reYear4 + reMonthlz + reDaylz),
    name: 'datenocolon',
    callback: function callback(match, year, month, day) {
      return this.ymd(+year, month - 1, +day);
    }
  },

  pgydotd: {
    regex: RegExp('^' + reYear4 + '\\.?' + reDayOfYear),
    name: 'pgydotd',
    callback: function callback(match, year, day) {
      return this.ymd(+year, 0, +day);
    }
  },

  timeShort24: {
    regex: RegExp('^t?' + reHour24 + '[:.]' + reMinute, 'i'),
    name: 'timeshort24',
    callback: function callback(match, hour, minute) {
      return this.time(+hour, +minute, 0, 0);
    }
  },

  iso8601noColon: {
    regex: RegExp('^t?' + reHour24lz + reMinutelz + reSecondlz, 'i'),
    name: 'iso8601nocolon',
    callback: function callback(match, hour, minute, second) {
      return this.time(+hour, +minute, +second, 0);
    }
  },

  iso8601dateSlash: {
    // eventhough the trailing slash is optional in PHP
    // here it's mandatory and inputs without the slash
    // are handled by dateslash
    regex: RegExp('^' + reYear4 + '/' + reMonthlz + '/' + reDaylz + '/'),
    name: 'iso8601dateslash',
    callback: function callback(match, year, month, day) {
      return this.ymd(+year, month - 1, +day);
    }
  },

  dateSlash: {
    regex: RegExp('^' + reYear4 + '/' + reMonth + '/' + reDay),
    name: 'dateslash',
    callback: function callback(match, year, month, day) {
      return this.ymd(+year, month - 1, +day);
    }
  },

  american: {
    regex: RegExp('^' + reMonth + '/' + reDay + '/' + reYear),
    name: 'american',
    callback: function callback(match, month, day, year) {
      return this.ymd(processYear(year), month - 1, +day);
    }
  },

  americanShort: {
    regex: RegExp('^' + reMonth + '/' + reDay),
    name: 'americanshort',
    callback: function callback(match, month, day) {
      return this.ymd(this.y, month - 1, +day);
    }
  },

  gnuDateShortOrIso8601date2: {
    // iso8601date2 is complete subset of gnudateshort
    regex: RegExp('^' + reYear + '-' + reMonth + '-' + reDay),
    name: 'gnudateshort | iso8601date2',
    callback: function callback(match, year, month, day) {
      return this.ymd(processYear(year), month - 1, +day);
    }
  },

  iso8601date4: {
    regex: RegExp('^' + reYear4withSign + '-' + reMonthlz + '-' + reDaylz),
    name: 'iso8601date4',
    callback: function callback(match, year, month, day) {
      return this.ymd(+year, month - 1, +day);
    }
  },

  gnuNoColon: {
    regex: RegExp('^t?' + reHour24lz + reMinutelz, 'i'),
    name: 'gnunocolon',
    callback: function callback(match, hour, minute) {
      // this rule is a special case
      // if time was already set once by any preceding rule, it sets the captured value as year
      switch (this.times) {
        case 0:
          return this.time(+hour, +minute, 0, this.f);
        case 1:
          this.y = hour * 100 + +minute;
          this.times++;

          return true;
        default:
          return false;
      }
    }
  },

  gnuDateShorter: {
    regex: RegExp('^' + reYear4 + '-' + reMonth),
    name: 'gnudateshorter',
    callback: function callback(match, year, month) {
      return this.ymd(+year, month - 1, 1);
    }
  },

  pgTextReverse: {
    // note: allowed years are from 32-9999
    // years below 32 should be treated as days in datefull
    regex: RegExp('^' + '(\\d{3,4}|[4-9]\\d|3[2-9])-(' + reMonthAbbr + ')-' + reDaylz, 'i'),
    name: 'pgtextreverse',
    callback: function callback(match, year, month, day) {
      return this.ymd(processYear(year), lookupMonth(month), +day);
    }
  },

  dateFull: {
    regex: RegExp('^' + reDay + '[ \\t.-]*' + reMonthText + '[ \\t.-]*' + reYear, 'i'),
    name: 'datefull',
    callback: function callback(match, day, month, year) {
      return this.ymd(processYear(year), lookupMonth(month), +day);
    }
  },

  dateNoDay: {
    regex: RegExp('^' + reMonthText + '[ .\\t-]*' + reYear4, 'i'),
    name: 'datenoday',
    callback: function callback(match, month, year) {
      return this.ymd(+year, lookupMonth(month), 1);
    }
  },

  dateNoDayRev: {
    regex: RegExp('^' + reYear4 + '[ .\\t-]*' + reMonthText, 'i'),
    name: 'datenodayrev',
    callback: function callback(match, year, month) {
      return this.ymd(+year, lookupMonth(month), 1);
    }
  },

  pgTextShort: {
    regex: RegExp('^(' + reMonthAbbr + ')-' + reDaylz + '-' + reYear, 'i'),
    name: 'pgtextshort',
    callback: function callback(match, month, day, year) {
      return this.ymd(processYear(year), lookupMonth(month), +day);
    }
  },

  dateNoYear: {
    regex: RegExp('^' + reDateNoYear, 'i'),
    name: 'datenoyear',
    callback: function callback(match, month, day) {
      return this.ymd(this.y, lookupMonth(month), +day);
    }
  },

  dateNoYearRev: {
    regex: RegExp('^' + reDay + '[ .\\t-]*' + reMonthText, 'i'),
    name: 'datenoyearrev',
    callback: function callback(match, day, month) {
      return this.ymd(this.y, lookupMonth(month), +day);
    }
  },

  isoWeekDay: {
    regex: RegExp('^' + reYear4 + '-?W' + reWeekOfYear + '(?:-?([0-7]))?'),
    name: 'isoweekday | isoweek',
    callback: function callback(match, year, week, day) {
      day = day ? +day : 1;

      if (!this.ymd(+year, 0, 1)) {
        return false;
      }

      // get day of week for Jan 1st
      var dayOfWeek = new Date(this.y, this.m, this.d).getDay();

      // and use the day to figure out the offset for day 1 of week 1
      dayOfWeek = 0 - (dayOfWeek > 4 ? dayOfWeek - 7 : dayOfWeek);

      this.rd += dayOfWeek + (week - 1) * 7 + day;
    }
  },

  relativeText: {
    regex: RegExp('^(' + reReltextnumber + '|' + reReltexttext + ')' + reSpace + '(' + reReltextunit + ')', 'i'),
    name: 'relativetext',
    callback: function callback(match, relValue, relUnit) {
      // todo: implement handling of 'this time-unit'
      // eslint-disable-next-line no-unused-vars
      var _lookupRelative = lookupRelative(relValue),
          amount = _lookupRelative.amount;

      switch (relUnit.toLowerCase()) {
        case 'sec':
        case 'secs':
        case 'second':
        case 'seconds':
          this.rs += amount;
          break;
        case 'min':
        case 'mins':
        case 'minute':
        case 'minutes':
          this.ri += amount;
          break;
        case 'hour':
        case 'hours':
          this.rh += amount;
          break;
        case 'day':
        case 'days':
          this.rd += amount;
          break;
        case 'fortnight':
        case 'fortnights':
        case 'forthnight':
        case 'forthnights':
          this.rd += amount * 14;
          break;
        case 'week':
        case 'weeks':
          this.rd += amount * 7;
          break;
        case 'month':
        case 'months':
          this.rm += amount;
          break;
        case 'year':
        case 'years':
          this.ry += amount;
          break;
        case 'mon':
        case 'monday':
        case 'tue':
        case 'tuesday':
        case 'wed':
        case 'wednesday':
        case 'thu':
        case 'thursday':
        case 'fri':
        case 'friday':
        case 'sat':
        case 'saturday':
        case 'sun':
        case 'sunday':
          this.resetTime();
          this.weekday = lookupWeekday(relUnit, 7);
          this.weekdayBehavior = 1;
          this.rd += (amount > 0 ? amount - 1 : amount) * 7;
          break;
      }
    }
  },

  relative: {
    regex: RegExp('^([+-]*)[ \\t]*(\\d+)' + reSpaceOpt + '(' + reReltextunit + '|week)', 'i'),
    name: 'relative',
    callback: function callback(match, signs, relValue, relUnit) {
      var minuses = signs.replace(/[^-]/g, '').length;

      var amount = +relValue * Math.pow(-1, minuses);

      switch (relUnit.toLowerCase()) {
        case 'sec':
        case 'secs':
        case 'second':
        case 'seconds':
          this.rs += amount;
          break;
        case 'min':
        case 'mins':
        case 'minute':
        case 'minutes':
          this.ri += amount;
          break;
        case 'hour':
        case 'hours':
          this.rh += amount;
          break;
        case 'day':
        case 'days':
          this.rd += amount;
          break;
        case 'fortnight':
        case 'fortnights':
        case 'forthnight':
        case 'forthnights':
          this.rd += amount * 14;
          break;
        case 'week':
        case 'weeks':
          this.rd += amount * 7;
          break;
        case 'month':
        case 'months':
          this.rm += amount;
          break;
        case 'year':
        case 'years':
          this.ry += amount;
          break;
        case 'mon':
        case 'monday':
        case 'tue':
        case 'tuesday':
        case 'wed':
        case 'wednesday':
        case 'thu':
        case 'thursday':
        case 'fri':
        case 'friday':
        case 'sat':
        case 'saturday':
        case 'sun':
        case 'sunday':
          this.resetTime();
          this.weekday = lookupWeekday(relUnit, 7);
          this.weekdayBehavior = 1;
          this.rd += (amount > 0 ? amount - 1 : amount) * 7;
          break;
      }
    }
  },

  dayText: {
    regex: RegExp('^(' + reDaytext + ')', 'i'),
    name: 'daytext',
    callback: function callback(match, dayText) {
      this.resetTime();
      this.weekday = lookupWeekday(dayText, 0);

      if (this.weekdayBehavior !== 2) {
        this.weekdayBehavior = 1;
      }
    }
  },

  relativeTextWeek: {
    regex: RegExp('^(' + reReltexttext + ')' + reSpace + 'week', 'i'),
    name: 'relativetextweek',
    callback: function callback(match, relText) {
      this.weekdayBehavior = 2;

      switch (relText.toLowerCase()) {
        case 'this':
          this.rd += 0;
          break;
        case 'next':
          this.rd += 7;
          break;
        case 'last':
        case 'previous':
          this.rd -= 7;
          break;
      }

      if (isNaN(this.weekday)) {
        this.weekday = 1;
      }
    }
  },

  monthFullOrMonthAbbr: {
    regex: RegExp('^(' + reMonthFull + '|' + reMonthAbbr + ')', 'i'),
    name: 'monthfull | monthabbr',
    callback: function callback(match, month) {
      return this.ymd(this.y, lookupMonth(month), this.d);
    }
  },

  tzCorrection: {
    regex: RegExp('^' + reTzCorrection, 'i'),
    name: 'tzcorrection',
    callback: function callback(tzCorrection) {
      return this.zone(processTzCorrection(tzCorrection));
    }
  },

  tzAbbr: {
    regex: RegExp('^' + reTzAbbr),
    name: 'tzabbr',
    callback: function callback(match, abbr) {
      var offset = tzAbbrOffsets[abbr.toLowerCase()];

      if (isNaN(offset)) {
        return false;
      }

      return this.zone(offset);
    }
  },

  ago: {
    regex: /^ago/i,
    name: 'ago',
    callback: function callback() {
      this.ry = -this.ry;
      this.rm = -this.rm;
      this.rd = -this.rd;
      this.rh = -this.rh;
      this.ri = -this.ri;
      this.rs = -this.rs;
      this.rf = -this.rf;
    }
  },

  year4: {
    regex: RegExp('^' + reYear4),
    name: 'year4',
    callback: function callback(match, year) {
      this.y = +year;
      return true;
    }
  },

  whitespace: {
    regex: /^[ .,\t]+/,
    name: 'whitespace'
    // do nothing
  },

  dateShortWithTimeLong: {
    regex: RegExp('^' + reDateNoYear + 't?' + reHour24 + '[:.]' + reMinute + '[:.]' + reSecond, 'i'),
    name: 'dateshortwithtimelong',
    callback: function callback(match, month, day, hour, minute, second) {
      return this.ymd(this.y, lookupMonth(month), +day) && this.time(+hour, +minute, +second, 0);
    }
  },

  dateShortWithTimeLong12: {
    regex: RegExp('^' + reDateNoYear + reHour12 + '[:.]' + reMinute + '[:.]' + reSecondlz + reSpaceOpt + reMeridian, 'i'),
    name: 'dateshortwithtimelong12',
    callback: function callback(match, month, day, hour, minute, second, meridian) {
      return this.ymd(this.y, lookupMonth(month), +day) && this.time(processMeridian(+hour, meridian), +minute, +second, 0);
    }
  },

  dateShortWithTimeShort: {
    regex: RegExp('^' + reDateNoYear + 't?' + reHour24 + '[:.]' + reMinute, 'i'),
    name: 'dateshortwithtimeshort',
    callback: function callback(match, month, day, hour, minute) {
      return this.ymd(this.y, lookupMonth(month), +day) && this.time(+hour, +minute, 0, 0);
    }
  },

  dateShortWithTimeShort12: {
    regex: RegExp('^' + reDateNoYear + reHour12 + '[:.]' + reMinutelz + reSpaceOpt + reMeridian, 'i'),
    name: 'dateshortwithtimeshort12',
    callback: function callback(match, month, day, hour, minute, meridian) {
      return this.ymd(this.y, lookupMonth(month), +day) && this.time(processMeridian(+hour, meridian), +minute, 0, 0);
    }
  }
};

var resultProto = {
  // date
  y: NaN,
  m: NaN,
  d: NaN,
  // time
  h: NaN,
  i: NaN,
  s: NaN,
  f: NaN,

  // relative shifts
  ry: 0,
  rm: 0,
  rd: 0,
  rh: 0,
  ri: 0,
  rs: 0,
  rf: 0,

  // weekday related shifts
  weekday: NaN,
  weekdayBehavior: 0,

  // first or last day of month
  // 0 none, 1 first, -1 last
  firstOrLastDayOfMonth: 0,

  // timezone correction in minutes
  z: NaN,

  // counters
  dates: 0,
  times: 0,
  zones: 0,

  // helper functions
  ymd: function ymd(y, m, d) {
    if (this.dates > 0) {
      return false;
    }

    this.dates++;
    this.y = y;
    this.m = m;
    this.d = d;
    return true;
  },
  time: function time(h, i, s, f) {
    if (this.times > 0) {
      return false;
    }

    this.times++;
    this.h = h;
    this.i = i;
    this.s = s;
    this.f = f;

    return true;
  },
  resetTime: function resetTime() {
    this.h = 0;
    this.i = 0;
    this.s = 0;
    this.f = 0;
    this.times = 0;

    return true;
  },
  zone: function zone(minutes) {
    if (this.zones <= 1) {
      this.zones++;
      this.z = minutes;
      return true;
    }

    return false;
  },
  toDate: function toDate(relativeTo) {
    if (this.dates && !this.times) {
      this.h = this.i = this.s = this.f = 0;
    }

    // fill holes
    if (isNaN(this.y)) {
      this.y = relativeTo.getFullYear();
    }

    if (isNaN(this.m)) {
      this.m = relativeTo.getMonth();
    }

    if (isNaN(this.d)) {
      this.d = relativeTo.getDate();
    }

    if (isNaN(this.h)) {
      this.h = relativeTo.getHours();
    }

    if (isNaN(this.i)) {
      this.i = relativeTo.getMinutes();
    }

    if (isNaN(this.s)) {
      this.s = relativeTo.getSeconds();
    }

    if (isNaN(this.f)) {
      this.f = relativeTo.getMilliseconds();
    }

    // adjust special early
    switch (this.firstOrLastDayOfMonth) {
      case 1:
        this.d = 1;
        break;
      case -1:
        this.d = 0;
        this.m += 1;
        break;
    }

    if (!isNaN(this.weekday)) {
      var date = new Date(relativeTo.getTime());
      date.setFullYear(this.y, this.m, this.d);
      date.setHours(this.h, this.i, this.s, this.f);

      var dow = date.getDay();

      if (this.weekdayBehavior === 2) {
        // To make "this week" work, where the current day of week is a "sunday"
        if (dow === 0 && this.weekday !== 0) {
          this.weekday = -6;
        }

        // To make "sunday this week" work, where the current day of week is not a "sunday"
        if (this.weekday === 0 && dow !== 0) {
          this.weekday = 7;
        }

        this.d -= dow;
        this.d += this.weekday;
      } else {
        var diff = this.weekday - dow;

        // some PHP magic
        if (this.rd < 0 && diff < 0 || this.rd >= 0 && diff <= -this.weekdayBehavior) {
          diff += 7;
        }

        if (this.weekday >= 0) {
          this.d += diff;
        } else {
          this.d -= 7 - (Math.abs(this.weekday) - dow);
        }

        this.weekday = NaN;
      }
    }

    // adjust relative
    this.y += this.ry;
    this.m += this.rm;
    this.d += this.rd;

    this.h += this.rh;
    this.i += this.ri;
    this.s += this.rs;
    this.f += this.rf;

    this.ry = this.rm = this.rd = 0;
    this.rh = this.ri = this.rs = this.rf = 0;

    var result = new Date(relativeTo.getTime());
    // since Date constructor treats years <= 99 as 1900+
    // it can't be used, thus this weird way
    result.setFullYear(this.y, this.m, this.d);
    result.setHours(this.h, this.i, this.s, this.f);

    // note: this is done twice in PHP
    // early when processing special relatives
    // and late
    // todo: check if the logic can be reduced
    // to just one time action
    switch (this.firstOrLastDayOfMonth) {
      case 1:
        result.setDate(1);
        break;
      case -1:
        result.setMonth(result.getMonth() + 1, 0);
        break;
    }

    // adjust timezone
    if (!isNaN(this.z) && result.getTimezoneOffset() !== this.z) {
      result.setUTCFullYear(result.getFullYear(), result.getMonth(), result.getDate());

      result.setUTCHours(result.getHours(), result.getMinutes(), result.getSeconds() - this.z, result.getMilliseconds());
    }

    return result;
  }
};

var strtotime = function strtotime(str, now) {
  //       discuss at: https://locutus.io/php/strtotime/
  //      original by: Caio Ariede (https://caioariede.com)
  //      improved by: Kevin van Zonneveld (https://kvz.io)
  //      improved by: Caio Ariede (https://caioariede.com)
  //      improved by: A. Matías Quezada (https://amatiasq.com)
  //      improved by: preuter
  //      improved by: Brett Zamir (https://brett-zamir.me)
  //      improved by: Mirko Faber
  //         input by: David
  //      bugfixed by: Wagner B. Soares
  //      bugfixed by: Artur Tchernychev
  //      bugfixed by: Stephan Bösch-Plepelits (https://github.com/plepe)
  // reimplemented by: Rafał Kukawski
  //           note 1: Examples all have a fixed timestamp to prevent
  //           note 1: tests to fail because of variable time(zones)
  //        example 1: strtotime('+1 day', 1129633200)
  //        returns 1: 1129719600
  //        example 2: strtotime('+1 week 2 days 4 hours 2 seconds', 1129633200)
  //        returns 2: 1130425202
  //        example 3: strtotime('last month', 1129633200)
  //        returns 3: 1127041200
  //        example 4: strtotime('2009-05-04 08:30:00+00')
  //        returns 4: 1241425800
  //        example 5: strtotime('2009-05-04 08:30:00+02:00')
  //        returns 5: 1241418600
  //        example 6: strtotime('2009-05-04 08:30:00 YWT')
  //        returns 6: 1241454600
  //        example 7: strtotime('10-JUL-17')
  //        returns 7: 1499644800

  if (now == null) {
    now = Math.floor(Date.now() / 1000);
  }

  // the rule order is important
  // if multiple rules match, the longest match wins
  // if multiple rules match the same string, the first match wins
  var rules = [formats$1.yesterday, formats$1.now, formats$1.noon, formats$1.midnightOrToday, formats$1.tomorrow, formats$1.timestamp, formats$1.firstOrLastDay, formats$1.backOrFrontOf,
  // formats.weekdayOf, // not yet implemented
  formats$1.timeTiny12, formats$1.timeShort12, formats$1.timeLong12, formats$1.mssqltime, formats$1.oracledate, formats$1.timeShort24, formats$1.timeLong24, formats$1.iso8601long, formats$1.gnuNoColon, formats$1.iso8601noColon, formats$1.americanShort, formats$1.american, formats$1.iso8601date4, formats$1.iso8601dateSlash, formats$1.dateSlash, formats$1.gnuDateShortOrIso8601date2, formats$1.gnuDateShorter, formats$1.dateFull, formats$1.pointedDate4, formats$1.pointedDate2, formats$1.dateNoDay, formats$1.dateNoDayRev, formats$1.dateTextual, formats$1.dateNoYear, formats$1.dateNoYearRev, formats$1.dateNoColon, formats$1.xmlRpc, formats$1.xmlRpcNoColon, formats$1.soap, formats$1.wddx, formats$1.exif, formats$1.pgydotd, formats$1.isoWeekDay, formats$1.pgTextShort, formats$1.pgTextReverse, formats$1.clf, formats$1.year4, formats$1.ago, formats$1.dayText, formats$1.relativeTextWeek, formats$1.relativeText, formats$1.monthFullOrMonthAbbr, formats$1.tzCorrection, formats$1.tzAbbr, formats$1.dateShortWithTimeShort12, formats$1.dateShortWithTimeLong12, formats$1.dateShortWithTimeShort, formats$1.dateShortWithTimeLong, formats$1.relative, formats$1.whitespace];

  var result = Object.create(resultProto);

  while (str.length) {
    var longestMatch = null;
    var finalRule = null;

    for (var i = 0, l = rules.length; i < l; i++) {
      var format = rules[i];

      var match = str.match(format.regex);

      if (match) {
        if (!longestMatch || match[0].length > longestMatch[0].length) {
          longestMatch = match;
          finalRule = format;
        }
      }
    }

    if (!finalRule || finalRule.callback && finalRule.callback.apply(result, longestMatch) === false) {
      return false;
    }

    str = str.substr(longestMatch[0].length);
    finalRule = null;
    longestMatch = null;
  }

  return Math.floor(result.toDate(new Date(now * 1000)) / 1000);
};

class date$4 extends Validator {
  check(value) {
    return !!strtotime(value);
  }
}

class date_equals extends Validator {
  get messageParams() {
    return {
      attribute: this.attributeName,
      date: this.date
    };
  }
  get date() {
    return this.attributes[0];
  }
  check(value) {
    return value === this.date;
  }
}

class date_format extends Validator {
  get messageParams() {
    return {
      attribute: this.attributeName,
      format: this.format
    };
  }
  get format() {
    return this.attributes[0];
  }
  check(value) {
    return value && this.moment(value, this.format).format(this.format) === value;
  }
}

class different extends Validator {
  get otherPath() {
    return this.attributes[0];
  }
  get other$() {
    return this.form$.el$(replaceWildcards(this.otherPath, this.element$.path));
  }
  get messageParams() {
    return {
      attribute: this.attributeName,
      other: this.other$.genericName
    };
  }
  init() {
    this.watchOther();
  }
  check(value) {
    if (!this.filled(value) && !this.filled(this.other$.value)) {
      return true;
    }
    return value != this.other$.value;
  }
}

class digits extends Validator {
  get messageParams() {
    return {
      attribute: this.attributeName,
      digits: this.digits
    };
  }
  get digits() {
    return this.attributes[0];
  }
  check(value) {
    return /^\d+$/.test(value) && value.toString().length == this.digits;
  }
}

class digits_between extends Validator {
  get messageParams() {
    return {
      attribute: this.attributeName,
      min: this.min,
      max: this.max
    };
  }
  get min() {
    return this.attributes[0];
  }
  get max() {
    return this.attributes[1];
  }
  check(value) {
    var length = value.toString().length;
    return /^\d+$/.test(value) && length >= this.min && length <= this.max;
  }
}

class dimensions extends Validator {
  get isAsync() {
    return true;
  }
  readImage(inputFile) {
    return _asyncToGenerator(function* () {
      var reader = new FileReader();
      return new Promise((resolve, reject) => {
        reader.onerror = () => {
          temporaryFileReader.abort();
          reject(new DOMException("File cannot be parsed."));
        };
        reader.onloadend = event => {
          resolve(event.target.result);
        };
        reader.readAsDataURL(inputFile);
      });
    })();
  }
  loadImage(value) {
    var _this = this;
    return _asyncToGenerator(function* () {
      var source = yield _this.readImage(value);
      var image = new Image();
      return new Promise((resolve, reject) => {
        image.onerror = () => {
          reject(new DOMException("Image could not be loaded."));
        };
        image.onload = event => {
          resolve(event.target);
        };
        image.src = source;
      });
    })();
  }
  hasAttribute(attribute) {
    return Object.keys(this.attributes).map(a => a.toLowerCase()).indexOf(attribute) !== -1;
  }
  check(value) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      if (_this2.isFile && !value) {
        return true;
      }
      if (!_this2.isFile || !(value instanceof File)) {
        return false;
      }
      var image = yield _this2.loadImage(value);
      if (_this2.hasAttribute('min_width')) {
        if (image.width < _this2.attributes['min_width']) {
          return false;
        }
      }
      if (_this2.hasAttribute('max_width')) {
        if (image.width > _this2.attributes['max_width']) {
          return false;
        }
      }
      if (_this2.hasAttribute('min_height')) {
        if (image.height < _this2.attributes['min_height']) {
          return false;
        }
      }
      if (_this2.hasAttribute('max_height')) {
        if (image.height > _this2.attributes['max_height']) {
          return false;
        }
      }
      if (_this2.hasAttribute('width')) {
        if (image.width != _this2.attributes['width']) {
          return false;
        }
      }
      if (_this2.hasAttribute('height')) {
        if (image.height != _this2.attributes['height']) {
          return false;
        }
      }
      if (_this2.hasAttribute('ratio')) {
        var ratio = _this2.attributes['ratio'];
        var precision = 1 / (Math.min(image.width, image.height) + 1);
        var numerator = /\//.test(ratio) ? ratio.split('/')[0] : ratio;
        var denominator = /\//.test(ratio) ? ratio.split('/')[1] : 1;
        if (Math.abs(numerator / denominator - image.width / image.height) > precision) {
          return false;
        }
      }
      return true;
    })();
  }
}

function pregQuote (str, delimiter) {
  // eslint-disable-line camelcase
  //  discuss at: http://locutus.io/php/preg_quote/
  // original by: booeyOH
  // improved by: Ates Goral (http://magnetiq.com)
  // improved by: Kevin van Zonneveld (http://kvz.io)
  // improved by: Brett Zamir (http://brett-zamir.me)
  // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)
  //   example 1: preg_quote("$40")
  //   returns 1: '\\$40'
  //   example 2: preg_quote("*RRRING* Hello?")
  //   returns 2: '\\*RRRING\\* Hello\\?'
  //   example 3: preg_quote("\\.+*?[^]$(){}=!<>|:")
  //   returns 3: '\\\\\\.\\+\\*\\?\\[\\^\\]\\$\\(\\)\\{\\}\\=\\!\\<\\>\\|\\:'

  return (str + '').replace(new RegExp('[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\' + (delimiter || '') + '-]', 'g'), '\\$&');
}

/**
 * The base implementation of `_.reduce` and `_.reduceRight`, without support
 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} accumulator The initial value.
 * @param {boolean} initAccum Specify using the first or last element of
 *  `collection` as the initial value.
 * @param {Function} eachFunc The function to iterate over `collection`.
 * @returns {*} Returns the accumulated value.
 */

function baseReduce$1(collection, iteratee, accumulator, initAccum, eachFunc) {
  eachFunc(collection, function(value, index, collection) {
    accumulator = initAccum
      ? (initAccum = false, value)
      : iteratee(accumulator, value, index, collection);
  });
  return accumulator;
}

var _baseReduce = baseReduce$1;

var arrayReduce = _arrayReduce,
    baseEach = _baseEach,
    baseIteratee$4 = _baseIteratee,
    baseReduce = _baseReduce,
    isArray$2 = isArray_1;

/**
 * Reduces `collection` to a value which is the accumulated result of running
 * each element in `collection` thru `iteratee`, where each successive
 * invocation is supplied the return value of the previous. If `accumulator`
 * is not given, the first element of `collection` is used as the initial
 * value. The iteratee is invoked with four arguments:
 * (accumulator, value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.reduce`, `_.reduceRight`, and `_.transform`.
 *
 * The guarded methods are:
 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
 * and `sortBy`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @returns {*} Returns the accumulated value.
 * @see _.reduceRight
 * @example
 *
 * _.reduce([1, 2], function(sum, n) {
 *   return sum + n;
 * }, 0);
 * // => 3
 *
 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
 *   (result[value] || (result[value] = [])).push(key);
 *   return result;
 * }, {});
 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
 */
function reduce(collection, iteratee, accumulator) {
  var func = isArray$2(collection) ? arrayReduce : baseReduce,
      initAccum = arguments.length < 3;

  return func(collection, baseIteratee$4(iteratee), accumulator, initAccum, baseEach);
}

var reduce_1 = reduce;

var _flattenKeys = function flattenKeys(obj) {
  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return !isObject_1(obj) ? {
    [path.join('.')]: obj
  } : reduce_1(obj, (cum, next, key) => merge_1(cum, _flattenKeys(next, [...path, key])), {});
};

class distinct extends Validator {
  check(value) {
    var attribute = this.element$.path;
    var attributeName = attribute.replace(/\d+(?!\d+)/, '*');
    var rootVariable = attribute.match(/^[\w-]+/)[0];
    var attributeData = {
      [rootVariable]: this.form$.data[rootVariable]
    };
    var pattern = pregQuote(attributeName, '#').replace('\\*', '[^.]+');
    var data = {};
    each(_flattenKeys(attributeData), (v, k) => {
      if (k != attribute && k.match('^' + pattern + '$') !== null) {
        data[k] = v;
      }
    });
    return !(values_1(data).indexOf(value) !== -1);
  }
}

class email extends Validator {
  check(value) {
    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(String(value).toLowerCase());
  }
}

class exists extends Validator {
  get isAsync() {
    return true;
  }
  get requestParams() {
    var params = {};
    each(this.attributes, (param, key) => {
      var requestParam = key;
      if (!isNaN(key)) {
        requestParam = param;
      }
      if (requestParam == 'debounce') {
        return;
      }
      var el = this.form$.el$(requestParam);

      // set the element value or the param name itself
      params[keys_1(params).length] = el && key != 0 ? el.value : requestParam;
    });
    return params;
  }
  check(value) {
    var _this = this;
    return _asyncToGenerator(function* () {
      var name = _this.element$.name;
      var endpoint = _this.form$.$vueform.config.endpoints.exists;
      var method = typeof endpoint !== 'function' ? endpoint.method : null;
      var res;
      if (typeof endpoint === 'function') {
        res = yield endpoint(value, name, _this.requestParams, _this.element$, _this.form$);
      } else {
        res = yield _this.form$.$vueform.services.axios.request({
          url: endpoint.url,
          method,
          [method.toLowerCase() === 'get' ? 'params' : 'data']: {
            params: _this.requestParams,
            [name]: value,
            vueformFieldName: name,
            value,
            name
          }
        });
        res = res.data;
      }
      return res;
    })();
  }
}

class file$5 extends Validator {
  check(value) {
    return (!value || value instanceof File) && this.isFile;
  }
}

class filled extends Validator {
  check(value) {
    return this.filled(value);
  }
}

class gt extends Validator {
  get messageParams() {
    var value = this.other$.value != null ? this.size(this.other$.value, this.other$) : 0;
    if (isNaN(value) || value < 0) {
      value = 0;
    }
    return {
      attribute: this.attributeName,
      value
    };
  }
  get otherPath() {
    return this.attributes[0];
  }
  get other$() {
    return this.form$.el$(replaceWildcards(this.otherPath, this.element$.path));
  }
  init() {
    this.watchOther();
  }
  check(value) {
    var otherValue = this.other$.value;
    return this.compare(value, otherValue);
  }
  compare(value, otherValue) {
    var otherSize = this.size(otherValue, this.other$);
    return otherSize == 0 || this.size(value) > otherSize;
  }
}

class gte extends gt {
  compare(value, otherValue) {
    var otherSize = this.size(otherValue, this.other$);
    return otherSize == 0 || this.size(value) >= otherSize;
  }
}

class image extends Validator {
  check(value) {
    if (this.isFile && !value) {
      return true;
    }
    if (!this.isFile || !(value instanceof File) || !value.name) {
      return false;
    }
    var extension = value.name.split('.').pop();
    return ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'svg', 'webp'].indexOf(extension) !== -1;
  }
}

class in_ extends Validator {
  check(value) {
    return values_1(this.attributes).indexOf(normalize(String(value).trim())) !== -1;
  }
}

class in_array extends Validator {
  get messageParams() {
    return {
      attribute: this.attributeName,
      other: this.other$.genericName
    };
  }
  get other$() {
    return this.form$.el$(replaceWildcards(this.otherPath, this.element$.path));
  }
  get otherPath() {
    var matches = this.attributes[0].match(/.*(?=\.\*)/);
    if (matches === null) {
      throw new Error('in_array rule\'s other attribute should end with .*');
    }
    return matches[0];
  }
  init() {
    this.watchOther();
  }
  check(value) {
    var data = this.other$.value;
    if (!data) {
      return false;
    }
    return data.indexOf(value) !== -1;
  }
}

class integer extends Validator {
  check(value) {
    var normalized = normalize(String(value).trim());
    return normalized === parseInt(normalized, 10);
  }
}

var checker$1 = function checker(value) {
  var re = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\/([0-9]|[1-2][0-9]|3[0-2]))?$/;
  return re.test(value);
};
class ipv4 extends Validator {
  check(value) {
    return checker$1(value);
  }
}

var checker = function checker(value) {
  var re = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*(\/(\d|\d\d|1[0-1]\d|12[0-8]))?$/;
  return re.test(value);
};
class ipv6 extends Validator {
  check(value) {
    return checker(value);
  }
}

class ip extends Validator {
  check(value) {
    return checker$1(value) || checker(value);
  }
}

function isJson (str) {
  try {
    JSON.parse(str);
  } catch (e) {
    return false;
  }
  return true;
}

class json extends Validator {
  check(value) {
    return isJson(value);
  }
}

class lt extends gt {
  compare(value, otherValue) {
    var size = this.size(value);
    var otherSize = this.size(otherValue, this.other$);
    return otherSize == 0 && size == 0 || this.size(value) < otherSize;
  }
}

class lte extends gt {
  compare(value, otherValue) {
    var size = this.size(value);
    var otherSize = this.size(otherValue, this.other$);
    return otherSize == 0 && size == 0 || this.size(value) <= otherSize;
  }
}

class max$1 extends Validator {
  get messageParams() {
    return {
      attribute: this.attributeName,
      max: this.max
    };
  }
  get max() {
    return this.attributes[0];
  }
  check(value) {
    if (typeof value !== 'number' && !value) {
      return true;
    }
    return this.size(value) <= this.max;
  }
}

class mimes extends Validator {
  get messageParams() {
    return {
      attribute: this.attributeName,
      values: this.accepted.join(', ')
    };
  }
  get accepted() {
    return Object.values(this.attributes).map(a => a.toLowerCase());
  }
  check(value) {
    if (this.isFile && !value) {
      return true;
    }
    if (!this.isFile || !(value instanceof File) || !value.name) {
      return false;
    }
    var extension = value.name.split('.').pop();
    return this.accepted.indexOf(extension.toLowerCase()) !== -1;
  }
}

class mimetypes extends Validator {
  get messageParams() {
    return {
      attribute: this.attributeName,
      values: this.accepted.join(', ')
    };
  }
  get accepted() {
    return Object.values(this.attributes).map(a => a.toLowerCase());
  }
  check(value) {
    if (this.isFile && !value) {
      return true;
    }
    if (!this.isFile || !(value instanceof File) || !value.type) {
      return false;
    }
    return this.accepted.indexOf(value.type.toLowerCase()) !== -1;
  }
}

class min$2 extends Validator {
  get messageParams() {
    return {
      attribute: this.attributeName,
      min: this.min
    };
  }
  get min() {
    return this.attributes[0];
  }
  check(value) {
    if (typeof value !== 'number' && !value) {
      return true;
    }
    return this.size(value) >= this.min;
  }
}

class not_in extends Validator {
  check(value) {
    return values_1(this.attributes).indexOf(value) === -1;
  }
}

class not_regex extends Validator {
  check(value) {
    var regex = new RegExp(this.attributes[0].replace(/^\/|\/[^\/]*$/g, ''));
    return !regex.test(value);
  }
}

class nullable extends Validator {
  check(value) {
    return true;
  }
}

class numeric extends Validator {
  check(value) {
    return !isNaN(parseFloat(value)) && isFinite(value) && !/\s/.test(String(value)) && !Boolean(String(value).match(/^0x[0-9a-f]+$/i));
  }
}

class regex extends Validator {
  check(value) {
    var _this$attributes$;
    var regex = new RegExp(this.attributes[0].replace(/^\/|\/[^\/]*$/g, ''), (_this$attributes$ = this.attributes[1]) !== null && _this$attributes$ !== void 0 ? _this$attributes$ : '');
    return regex.test(value);
  }
}

class required extends Validator {
  check(value) {
    return this.filled(value);
  }
}

class same extends Validator {
  get messageParams() {
    return {
      attribute: this.attributeName,
      other: this.other$.genericName
    };
  }
  get otherPath() {
    return this.attributes[0];
  }
  get other$() {
    return this.form$.el$(replaceWildcards(this.otherPath, this.element$.path));
  }
  init() {
    this.watchOther();
  }
  check(value) {
    if (!this.filled(value) && !this.filled(this.other$.value)) {
      return true;
    }
    return value == this.other$.value;
  }
}

class size extends Validator {
  get messageParams() {
    return {
      attribute: this.attributeName,
      size: this.size_
    };
  }
  get size_() {
    return this.attributes[0];
  }
  check(value) {
    if (typeof value !== 'number' && !value) {
      return true;
    }
    return this.size(value) == this.size_;
  }
}

class string extends Validator {
  check(value) {
    return isString_1(value);
  }
}

class timezone extends Validator {
  check(value) {
    try {
      Intl.DateTimeFormat(undefined, {
        timeZone: value
      });
      return true;
    } catch (ex) {
      return false;
    }
  }
}

class unique extends Validator {
  get isAsync() {
    return true;
  }
  get requestParams() {
    var params = {};
    each(this.attributes, (param, key) => {
      var requestParam = key;
      if (!isNaN(key)) {
        requestParam = param;
      }
      if (requestParam == 'debounce') {
        return;
      }
      var el = this.form$.el$(requestParam);

      // set the element value or the param name itself
      params[keys_1(params).length] = el && key != 0 ? el.value : requestParam;
    });
    return params;
  }
  check(value) {
    var _this = this;
    return _asyncToGenerator(function* () {
      var name = _this.element$.name;
      var endpoint = _this.form$.$vueform.config.endpoints.unique;
      var method = typeof endpoint !== 'function' ? endpoint.method : null;
      var res;
      if (typeof endpoint === 'function') {
        res = yield endpoint(value, name, _this.requestParams, _this.element$, _this.form$);
      } else {
        res = yield _this.form$.$vueform.services.axios.request({
          url: endpoint.url,
          method,
          [method.toLowerCase() === 'get' ? 'params' : 'data']: {
            params: _this.requestParams,
            name,
            value
          }
        });
        res = res.data;
      }
      return res;
    })();
  }
}

class url extends Validator {
  check(value) {
    // https://gist.github.com/dperini/729294
    var regex = new RegExp("^" +
    // protocol identifier (optional)
    // short syntax // still required
    "(?:(?:(?:https?|ftp):)?\\/\\/)" +
    // user:pass BasicAuth (optional)
    "(?:\\S+(?::\\S*)?@)?" + "(?:" +
    // IP address exclusion
    // private & local networks
    "(?!(?:10|127)(?:\\.\\d{1,3}){3})" + "(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})" + "(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})" +
    // IP address dotted notation octets
    // excludes loopback network 0.0.0.0
    // excludes reserved space >= 224.0.0.0
    // excludes network & broacast addresses
    // (first & last IP address of each class)
    "(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])" + "(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}" + "(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))" + "|" +
    // host & domain names, may end with dot
    // can be replaced by a shortest alternative
    // (?![-_])(?:[-\\w\\u00a1-\\uffff]{0,63}[^-_]\\.)+
    "(?:" + "(?:" + "[a-z0-9\\u00a1-\\uffff]" + "[a-z0-9\\u00a1-\\uffff_-]{0,62}" + ")?" + "[a-z0-9\\u00a1-\\uffff]\\." + ")+" +
    // TLD identifier name, may end with dot
    "(?:[a-z\\u00a1-\\uffff]{2,}\\.?)" + ")" +
    // port number (optional)
    "(?::\\d{2,5})?" +
    // resource path (optional)
    "(?:[/?#]\\S*)?" + "$", "i");
    return regex.test(value);
  }
}

class uuid extends Validator {
  check(value) {
    var regex = /^[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}$/i;
    return regex.test(value);
  }
}

var index$2 = {
  accepted,
  active_url,
  after,
  after_or_equal,
  alpha,
  alpha_dash,
  alpha_num,
  array: array$2,
  before,
  before_or_equal,
  between,
  boolean: boolean$1,
  confirmed,
  date: date$4,
  date_equals,
  date_format,
  different,
  digits,
  digits_between,
  dimensions,
  distinct,
  email,
  exists,
  file: file$5,
  filled,
  gt,
  gte,
  image,
  in: in_,
  in_array,
  integer,
  ip,
  ipv4,
  ipv6,
  json,
  lt,
  lte,
  max: max$1,
  mimes,
  mimetypes,
  min: min$2,
  not_in,
  not_regex,
  nullable,
  numeric,
  regex,
  required,
  same,
  size,
  string,
  timezone,
  unique,
  url,
  uuid
};

var rules = /*#__PURE__*/Object.freeze({
  __proto__: null,
  accepted: accepted,
  active_url: active_url,
  after: after,
  after_or_equal: after_or_equal,
  alpha: alpha,
  alpha_dash: alpha_dash,
  alpha_num: alpha_num,
  array: array$2,
  before: before,
  before_or_equal: before_or_equal,
  between: between,
  boolean: boolean$1,
  captcha: captcha$2,
  completed: completed,
  confirmed: confirmed,
  date: date$4,
  date_equals: date_equals,
  date_format: date_format,
  different: different,
  digits: digits,
  digits_between: digits_between,
  dimensions: dimensions,
  distinct: distinct,
  email: email,
  exists: exists,
  file: file$5,
  filled: filled,
  gt: gt,
  gte: gte,
  image: image,
  in_: in_,
  in_array: in_array,
  integer: integer,
  ip: ip,
  ipv4: ipv4,
  ipv6: ipv6,
  json: json,
  lt: lt,
  lte: lte,
  max: max$1,
  mimes: mimes,
  mimetypes: mimetypes,
  min: min$2,
  not_in: not_in,
  not_regex: not_regex,
  nullable: nullable,
  numeric: numeric,
  regex: regex,
  required: required,
  same: same,
  size: size,
  string: string,
  timezone: timezone,
  unique: unique,
  url: url,
  uuid: uuid,
  'default': index$2
});

var validation = {
  factory: Factory,
  rules: {}
};

var arrayPush$1 = _arrayPush,
    baseFlatten$1 = _baseFlatten,
    copyArray = _copyArray,
    isArray$1 = isArray_1;

/**
 * Creates a new array concatenating `array` with any additional arrays
 * and/or values.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to concatenate.
 * @param {...*} [values] The values to concatenate.
 * @returns {Array} Returns the new concatenated array.
 * @example
 *
 * var array = [1];
 * var other = _.concat(array, 2, [3], [[4]]);
 *
 * console.log(other);
 * // => [1, 2, 3, [4]]
 *
 * console.log(array);
 * // => [1]
 */
function concat$1() {
  var length = arguments.length;
  if (!length) {
    return [];
  }
  var args = Array(length - 1),
      array = arguments[0],
      index = length;

  while (index--) {
    args[index - 1] = arguments[index];
  }
  return arrayPush$1(isArray$1(array) ? copyArray(array) : [array], baseFlatten$1(args, 1));
}

var concat_1 = concat$1;

/**
 * Gets the first element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias first
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the first element of `array`.
 * @example
 *
 * _.head([1, 2, 3]);
 * // => 1
 *
 * _.head([]);
 * // => undefined
 */

function head(array) {
  return (array && array.length) ? array[0] : undefined;
}

var head_1 = head;

class messageBag {
  constructor(baseErrors) {
    this.baseErrors = baseErrors;
    this.prepends = {
      errors: [],
      messages: []
    };
    this.appends = {
      errors: [],
      messages: []
    };
  }
  get errors() {
    return concat_1(this.prepends.errors, this.baseErrors, this.appends.errors);
  }
  get messages() {
    return concat_1(this.prepends.messages, this.appends.messages);
  }

  /**
   * The first error
   * 
   * @type {string}
   */
  get error() {
    return head_1(this.errors);
  }

  /**
   * The first message
   * 
   * @type {string}
   */
  get message() {
    return head_1(this.messages);
  }
  prepend(msg, type) {
    if (type === undefined) {
      type = 'error';
    }
    this.prepends[type == 'error' ? 'errors' : 'messages'].unshift(msg);
  }
  append(msg, type) {
    if (type === undefined) {
      type = 'error';
    }
    this.appends[type == 'error' ? 'errors' : 'messages'].push(msg);
  }
  remove(msg, type) {
    if (type === undefined) {
      type = 'any';
    }
    if (['any', 'error'].indexOf(type) !== -1) {
      each(this.prepends.errors, (error, index) => {
        if (error == msg) {
          this.rm('prepends', 'errors', index);
        }
      });
      each(this.appends.errors, (error, index) => {
        if (error == msg) {
          this.rm('appends', 'errors', index);
        }
      });
    }
    if (['any', 'message'].indexOf(type) !== -1) {
      each(this.prepends.messages, (error, index) => {
        if (error == msg) {
          this.rm('prepends', 'messages', index);
        }
      });
      each(this.appends.messages, (error, index) => {
        if (error == msg) {
          this.rm('appends', 'messages', index);
        }
      });
    }
  }
  rm(group, type, index) {
    this[group][type].splice(index, 1);
  }
  clear(type) {
    if (type === undefined) {
      type = 'all';
    }
    if (type == 'all') {
      this.prepends = {
        errors: [],
        messages: []
      };
      this.appends = {
        errors: [],
        messages: []
      };
    } else {
      this.prepends[type] = [];
      this.appends[type] = [];
    }
  }
  clearPrepended(type) {
    if (type === undefined) {
      type = 'all';
    }
    if (type == 'all') {
      this.prepends = {
        errors: [],
        messages: []
      };
    } else {
      this.prepends[type] = [];
    }
  }
  clearAppended(type) {
    if (type === undefined) {
      type = 'all';
    }
    if (type == 'all') {
      this.appends = {
        errors: [],
        messages: []
      };
    } else {
      this.appends[type] = [];
    }
  }
}

var e=new Map;function t(t){var o=e.get(t);o&&o.destroy();}function o(t){var o=e.get(t);o&&o.update();}var r=null;"undefined"==typeof window?((r=function(e){return e}).destroy=function(e){return e},r.update=function(e){return e}):((r=function(t,o){return t&&Array.prototype.forEach.call(t.length?t:[t],function(t){return function(t){if(t&&t.nodeName&&"TEXTAREA"===t.nodeName&&!e.has(t)){var o,r=null,n=window.getComputedStyle(t),i=(o=t.value,function(){a({testForHeightReduction:""===o||!t.value.startsWith(o),restoreTextAlign:null}),o=t.value;}),l=function(o){t.removeEventListener("autosize:destroy",l),t.removeEventListener("autosize:update",s),t.removeEventListener("input",i),window.removeEventListener("resize",s),Object.keys(o).forEach(function(e){return t.style[e]=o[e]}),e.delete(t);}.bind(t,{height:t.style.height,resize:t.style.resize,textAlign:t.style.textAlign,overflowY:t.style.overflowY,overflowX:t.style.overflowX,wordWrap:t.style.wordWrap});t.addEventListener("autosize:destroy",l),t.addEventListener("autosize:update",s),t.addEventListener("input",i),window.addEventListener("resize",s),t.style.overflowX="hidden",t.style.wordWrap="break-word",e.set(t,{destroy:l,update:s}),s();}function a(e){var o,i,l=e.restoreTextAlign,s=void 0===l?null:l,d=e.testForHeightReduction,u=void 0===d||d,c=n.overflowY;if(0!==t.scrollHeight&&("vertical"===n.resize?t.style.resize="none":"both"===n.resize&&(t.style.resize="horizontal"),u&&(o=function(e){for(var t=[];e&&e.parentNode&&e.parentNode instanceof Element;)e.parentNode.scrollTop&&t.push([e.parentNode,e.parentNode.scrollTop]),e=e.parentNode;return function(){return t.forEach(function(e){var t=e[0],o=e[1];t.style.scrollBehavior="auto",t.scrollTop=o,t.style.scrollBehavior=null;})}}(t),t.style.height=""),i="content-box"===n.boxSizing?t.scrollHeight-(parseFloat(n.paddingTop)+parseFloat(n.paddingBottom)):t.scrollHeight+parseFloat(n.borderTopWidth)+parseFloat(n.borderBottomWidth),"none"!==n.maxHeight&&i>parseFloat(n.maxHeight)?("hidden"===n.overflowY&&(t.style.overflow="scroll"),i=parseFloat(n.maxHeight)):"hidden"!==n.overflowY&&(t.style.overflow="hidden"),t.style.height=i+"px",s&&(t.style.textAlign=s),o&&o(),r!==i&&(t.dispatchEvent(new Event("autosize:resized",{bubbles:!0})),r=i),c!==n.overflow&&!s)){var v=n.textAlign;"hidden"===n.overflow&&(t.style.textAlign="start"===v?"end":"start"),a({restoreTextAlign:v,testForHeightReduction:!0});}}function s(){a({testForHeightReduction:!0,restoreTextAlign:null});}}(t)}),t}).destroy=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],t),e},r.update=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],o),e});var n=r;

class google {
  constructor() {
    this.autocomplete = null;
    this.autocompleteListener = null;
    this.options = {};
  }
  init(container, onChange, options) {
    if (window.google === undefined || window.google.maps === undefined || window.google.maps.places === undefined || window.google.maps.places.Autocomplete === undefined) ;
    this.options = options;
    this.autocomplete = new window.google.maps.places.Autocomplete(container, options);
    this.autocompleteListener = this.autocomplete.addListener('place_changed', () => {
      var place = this.autocomplete.getPlace();
      onChange(this.formatValue(place), place);
    });
  }
  destroy() {
    window.google.maps.event.removeListener(this.autocompleteListener);
    window.google.maps.event.clearInstanceListeners(this.autocomplete);
    var pac = document.querySelector('.pac-container');
    if (pac) {
      pac.remove();
    }
  }
  formatValue(value) {
    if (!isPlainObject_1(value)) {
      return value;
    }
    var addressComponents = value.address_components;
    var street = this.addressComponent(addressComponents, 'street');
    var streetNumber = this.addressComponent(addressComponents, 'street_number');
    var address = null;
    if (street !== null) {
      address = street;
    }
    if (streetNumber !== null) {
      address += (street !== null ? ' ' : '') + streetNumber;
    }
    return {
      country: this.addressComponent(addressComponents, 'country'),
      country_code: this.addressComponent(addressComponents, 'country_code'),
      state: this.addressComponent(addressComponents, 'state'),
      state_code: this.addressComponent(addressComponents, 'state_code'),
      city: this.addressComponent(addressComponents, 'city'),
      zip: this.addressComponent(addressComponents, 'zip'),
      address: address,
      formatted_address: value.formatted_address || null,
      lat: value.geometry.location.lat() || null,
      lng: value.geometry.location.lng() || null
    };
  }
  addressComponent(addressComponents, type) {
    var typeMap = {
      country: {
        field: 'country',
        type: 'long_name'
      },
      country_code: {
        field: 'country',
        type: 'short_name'
      },
      state: {
        field: 'administrative_area_level_1',
        type: 'long_name'
      },
      state_code: {
        field: 'administrative_area_level_1',
        type: 'short_name'
      },
      city: {
        field: 'locality',
        type: 'long_name'
      },
      zip: {
        field: 'postal_code',
        type: 'long_name'
      },
      street: {
        field: 'route',
        type: 'long_name'
      },
      street_number: {
        field: 'street_number',
        type: 'long_name'
      }
    };
    var addressComponent = null;
    each(addressComponents, component => {
      if (component.types.indexOf(typeMap[type].field) !== -1) {
        if (['state', 'state_code'].indexOf(type) !== -1 && this.addressComponent(addressComponents, 'country_code') != 'US') {
          return;
        }
        addressComponent = component[typeMap[type].type] || null;
      }
    });
    return addressComponent;
  }
}

class algolia {
  constructor() {
    this.places = null;
    this.options = {};
  }
  init(container, onChange, options) {
    if (window.places === undefined) {
      throw new Error('Algolia Places API missing. Please include script in your project from https://community.algolia.com/places/documentation.html#cdn-script or install via npm and set to `window.places`.');
    }
    this.options = options;
    this.places = window.places(Object.assign({}, {
      container
    }, options));
    this.places.on('change', e => {
      onChange(this.formatValue(e.suggestion), e.suggestion);
    });
  }
  destroy() {
    this.places.destroy();
  }
  formatValue(value) {
    if (!isPlainObject_1(value)) {
      return value;
    }
    return {
      country: value.country,
      country_code: value.countryCode ? value.countryCode.toUpperCase() : null,
      state: value.countryCode == 'us' ? value.administrative : null,
      state_code: value.countryCode == 'us' ? this.stateCode(value.administrative.toLowerCase()) : null,
      city: value.city,
      zip: value.postcode,
      address: value.name,
      formatted_address: value.value,
      lat: value.latlng.lat,
      lng: value.latlng.lng
    };
  }
  stateCode(name) {
    var states = {
      AL: 'alabama',
      AK: 'alaska',
      AZ: 'arizona',
      AR: 'arkansas',
      CA: 'california',
      CO: 'colorado',
      CT: 'connecticut',
      DE: 'delaware',
      DC: 'district of columbia',
      FL: 'florida',
      GA: 'georgia',
      HI: 'hawaii',
      ID: 'idaho',
      IL: 'illinois',
      IN: 'indiana',
      IA: 'iowa',
      KS: 'kansas',
      KY: 'kentucky',
      LA: 'louisiana',
      ME: 'maine',
      MD: 'maryland',
      MA: 'massachusetts',
      MI: 'michigan',
      MN: 'minnesota',
      MS: 'mississippi',
      MO: 'missouri',
      MT: 'montana',
      NE: 'nebraska',
      NV: 'nevada',
      NH: 'new hampshire',
      NJ: 'new Jersey',
      NM: 'new Mexico',
      NY: 'new york',
      NC: 'north carolina',
      ND: 'north dakota',
      OH: 'ohio',
      OK: 'oklahoma',
      OR: 'oregon',
      PA: 'pennsylvania',
      RI: 'rhode Island',
      SC: 'south carolina',
      SD: 'south dakota',
      TN: 'tennessee',
      TX: 'texas',
      UT: 'utah',
      VT: 'vermont',
      VA: 'virginia',
      WA: 'washington',
      WV: 'west virginia',
      WI: 'wisconsin',
      WY: 'wyoming'
    };
    if (values_1(states).indexOf(name) === -1) {
      return null;
    }
    return keys_1(states)[values_1(states).indexOf(name)];
  }
}

var location$4 = {
  google,
  algolia
};

// condition - condition information [otherPath, operator, expectedValue]
// elementPath - current
var check = (condition, elementPath, form$, el$) => {
  var checkFunction = () => {
    return condition(form$, el$);
  };
  var checkArray = condition => {
    var {
      conditionPath,
      operator,
      expected
    } = details(condition);

    // other
    var element$ = form$.el$(conditionPath);
    var hasCircularCondition = false;

    // other && currentPath
    if (element$ && elementPath) {
      each(element$.conditions, condition => {
        if (!Array.isArray(condition)) {
          return;
        }
        if (condition[0] == elementPath) {
          hasCircularCondition = true;
        }
      });
    }
    if (!element$ || !hasCircularCondition && !element$.available) {
      return false;
    }
    return compareValues(element$.value, expected, operator);
  };
  var checkExpression = condition => {
    if (!/^{/.test(condition) && !/}$/.test(condition)) {
      condition = "{".concat(condition, "}");
    }
    return form$.resolveExpression(condition, el$ === null || el$ === void 0 ? void 0 : el$.dataPath) === 'true';
  };
  var details = condition => {
    return {
      conditionPath: elementPath ? replaceWildcards(condition[0], elementPath) : condition[0],
      operator: condition.length == 3 || ['empty', 'not_empty', 'today'].indexOf(condition[1]) !== -1 ? condition[1] : '==',
      expected: condition.length == 3 ? condition[2] : ['empty', 'not_empty', 'today'].indexOf(condition[1]) === -1 ? condition[1] : true
    };
  };
  var compareValues = (actual, expected, operator) => {
    return compare(actual, operator, expected, el$, form$);
  };
  if (typeof condition === 'string') {
    return checkExpression(condition);
  } else if (typeof condition == 'function') {
    return checkFunction();
  } else if (isArray_1(condition) && isArray_1(condition[0])) {
    return condition.reduce((prev, curr) => {
      if (prev) {
        return prev;
      }
      if (isArray_1(curr[0])) {
        return curr.reduce((p, c) => !p ? p : checkArray(c), true);
      }
      return checkArray(curr);
    }, false);
  } else if (isArray_1(condition)) {
    return checkArray(condition);
  }
  throw new Error('Condition must be a function or an array');
};
var condition$1 = {
  check
};

class i18n {
  constructor(options) {
    this.locales = options.locales;
    this.locale = options.locale;
    this.fallbackLocale = options.fallbackLocale;
  }
  $t(expr) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var tag = get_1(this.locales[this.locale], expr) || expr;
    if (tag === expr) {
      tag = get_1(this.locales[this.fallbackLocale], expr) || expr;
    }
    each(data, (value, key) => {
      tag = tag.replace(':' + key, value);
    });
    each(data, (value, key) => {
      tag = tag.replace('{' + key + '}', value);
    });
    return tag;
  }
}

class Columns {
  constructor(options, hasLabel, getClass, presets) {
    _defineProperty$2(this, "defaultBreakpoint", 'default');
    this.presets = presets;
    this.configPresetColumns = this.serialize(this.columnsFromPresets(options.configPresetColumns) || {});
    this.configColumns = this.serialize(options.configColumns || {});
    this.formPresetColumns = this.serialize(this.columnsFromPresets(options.formPresetColumns) || {});
    this.formColumns = this.serialize(options.formColumns || {});
    this.presetColumns = this.serialize(this.columnsFromPresets(options.elementPresetColumns) || {});
    this.columns = this.serialize(options.elementColumns || {});
    this.hasLabel = hasLabel;
    this.getClass = getClass;
    this.cols = this.getCols();
  }
  get classes() {
    return {
      container: this.getClasses('container'),
      label: this.getClasses('label'),
      innerContainer: this.getClasses('innerContainer'),
      wrapper: this.getClasses('wrapper')
    };
  }
  serialize(columns) {
    // columns: 8
    if (['number', 'string'].indexOf(typeof columns) !== -1) {
      return {
        [this.defaultBreakpoint]: {
          container: columns
        }
      };
    }

    // columns: { container: 8, wrapper: { default: 8, lg: 8 } }
    if (typeof columns === 'object' && ['container', 'label', 'wrapper'].indexOf(Object.keys(columns)[0]) !== -1) {
      var serialized = {};
      each(columns, (size, type) => {
        // columns: { container: 8 }
        if (['number', 'string'].indexOf(typeof size) !== -1) {
          if (serialized[this.defaultBreakpoint] === undefined) {
            serialized[this.defaultBreakpoint] = {};
          }
          serialized[this.defaultBreakpoint][type] = size;
        }

        // columns: { container: { default: 8, lg: 8 } }
        else {
          each(size, (s, breakpoint) => {
            if (serialized[breakpoint] === undefined) {
              serialized[breakpoint] = {};
            }
            serialized[breakpoint][type] = s;
          });
        }
      });
      return serialized;
    }

    // columns: { lg: 8, md: { container: 8 } }
    else {
      var _serialized = {};
      each(columns, (size, breakpoint) => {
        // columns: { lg: 8 }
        if (['number', 'string'].indexOf(typeof size) !== -1) {
          if (_serialized[breakpoint] === undefined) {
            _serialized[breakpoint] = {};
          }
          _serialized[breakpoint].container = size;
        }

        // columns: { md: { container: 8 } }
        else {
          _serialized[breakpoint] = size;
        }
      });
      return _serialized;
    }
  }
  columnsFromPresets(presets) {
    var columns;
    each(presets, presetName => {
      var preset = this.presets[presetName];
      if (!preset || !preset.columns) {
        return;
      }
      columns = preset.columns;
    });
    return columns;
  }
  getNullClass() {
    return [this.getClass(this.defaultBreakpoint, 0)];
  }
  getClasses(type) {
    var classes = [];
    Object.keys(this.cols).forEach(breakpoint => {
      var size;
      if (type === 'innerContainer') {
        size = this.cols[breakpoint].label;
        size = size >= 12 || !this.hasLabel ? 12 : 12 - size;
      } else {
        size = this.cols[breakpoint][type];
        if (type === 'label' && !this.hasLabel) {
          size = 0;
        }

        // if (type === 'wrapper' && !this.hasLabel) {
        //   size += this.cols[breakpoint].label || 0

        //   if (size > 12) {
        //     size = 12
        //   }
        // }
      }
      if (size !== undefined && !isNaN(size)) {
        classes.push(this.getClass(breakpoint, size));
      }
    });
    return classes;
  }
  getCols() {
    return merge_1({}, {
      [this.defaultBreakpoint]: {
        container: 12,
        label: 12,
        wrapper: 12
      }
    }, this.configPresetColumns || {}, this.configColumns || {}, this.formPresetColumns || {}, this.formColumns || {}, this.presetColumns || {}, this.columns || {});
  }
}

/*! @license DOMPurify 3.2.6 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.6/LICENSE */

const {
  entries,
  setPrototypeOf,
  isFrozen,
  getPrototypeOf,
  getOwnPropertyDescriptor
} = Object;
let {
  freeze,
  seal,
  create
} = Object; // eslint-disable-line import/no-mutable-exports
let {
  apply,
  construct
} = typeof Reflect !== 'undefined' && Reflect;
if (!freeze) {
  freeze = function freeze(x) {
    return x;
  };
}
if (!seal) {
  seal = function seal(x) {
    return x;
  };
}
if (!apply) {
  apply = function apply(fun, thisValue, args) {
    return fun.apply(thisValue, args);
  };
}
if (!construct) {
  construct = function construct(Func, args) {
    return new Func(...args);
  };
}
const arrayForEach = unapply(Array.prototype.forEach);
const arrayLastIndexOf = unapply(Array.prototype.lastIndexOf);
const arrayPop = unapply(Array.prototype.pop);
const arrayPush = unapply(Array.prototype.push);
const arraySplice = unapply(Array.prototype.splice);
const stringToLowerCase = unapply(String.prototype.toLowerCase);
const stringToString = unapply(String.prototype.toString);
const stringMatch = unapply(String.prototype.match);
const stringReplace = unapply(String.prototype.replace);
const stringIndexOf = unapply(String.prototype.indexOf);
const stringTrim = unapply(String.prototype.trim);
const objectHasOwnProperty = unapply(Object.prototype.hasOwnProperty);
const regExpTest = unapply(RegExp.prototype.test);
const typeErrorCreate = unconstruct(TypeError);
/**
 * Creates a new function that calls the given function with a specified thisArg and arguments.
 *
 * @param func - The function to be wrapped and called.
 * @returns A new function that calls the given function with a specified thisArg and arguments.
 */
function unapply(func) {
  return function (thisArg) {
    if (thisArg instanceof RegExp) {
      thisArg.lastIndex = 0;
    }
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return apply(func, thisArg, args);
  };
}
/**
 * Creates a new function that constructs an instance of the given constructor function with the provided arguments.
 *
 * @param func - The constructor function to be wrapped and called.
 * @returns A new function that constructs an instance of the given constructor function with the provided arguments.
 */
function unconstruct(func) {
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return construct(func, args);
  };
}
/**
 * Add properties to a lookup table
 *
 * @param set - The set to which elements will be added.
 * @param array - The array containing elements to be added to the set.
 * @param transformCaseFunc - An optional function to transform the case of each element before adding to the set.
 * @returns The modified set with added elements.
 */
function addToSet(set, array) {
  let transformCaseFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : stringToLowerCase;
  if (setPrototypeOf) {
    // Make 'in' and truthy checks like Boolean(set.constructor)
    // independent of any properties defined on Object.prototype.
    // Prevent prototype setters from intercepting set as a this value.
    setPrototypeOf(set, null);
  }
  let l = array.length;
  while (l--) {
    let element = array[l];
    if (typeof element === 'string') {
      const lcElement = transformCaseFunc(element);
      if (lcElement !== element) {
        // Config presets (e.g. tags.js, attrs.js) are immutable.
        if (!isFrozen(array)) {
          array[l] = lcElement;
        }
        element = lcElement;
      }
    }
    set[element] = true;
  }
  return set;
}
/**
 * Clean up an array to harden against CSPP
 *
 * @param array - The array to be cleaned.
 * @returns The cleaned version of the array
 */
function cleanArray(array) {
  for (let index = 0; index < array.length; index++) {
    const isPropertyExist = objectHasOwnProperty(array, index);
    if (!isPropertyExist) {
      array[index] = null;
    }
  }
  return array;
}
/**
 * Shallow clone an object
 *
 * @param object - The object to be cloned.
 * @returns A new object that copies the original.
 */
function clone$2(object) {
  const newObject = create(null);
  for (const [property, value] of entries(object)) {
    const isPropertyExist = objectHasOwnProperty(object, property);
    if (isPropertyExist) {
      if (Array.isArray(value)) {
        newObject[property] = cleanArray(value);
      } else if (value && typeof value === 'object' && value.constructor === Object) {
        newObject[property] = clone$2(value);
      } else {
        newObject[property] = value;
      }
    }
  }
  return newObject;
}
/**
 * This method automatically checks if the prop is function or getter and behaves accordingly.
 *
 * @param object - The object to look up the getter function in its prototype chain.
 * @param prop - The property name for which to find the getter function.
 * @returns The getter function found in the prototype chain or a fallback function.
 */
function lookupGetter(object, prop) {
  while (object !== null) {
    const desc = getOwnPropertyDescriptor(object, prop);
    if (desc) {
      if (desc.get) {
        return unapply(desc.get);
      }
      if (typeof desc.value === 'function') {
        return unapply(desc.value);
      }
    }
    object = getPrototypeOf(object);
  }
  function fallbackValue() {
    return null;
  }
  return fallbackValue;
}

const html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']);
const svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);
const svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);
// List of SVG elements that are disallowed by default.
// We still need to know them so that we can do namespace
// checks properly in case one wants to add them to
// allow-list.
const svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);
const mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', 'mprescripts']);
// Similarly to SVG, we want to know all MathML elements,
// even those that we disallow by default.
const mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);
const text$4 = freeze(['#text']);

const html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'popover', 'popovertarget', 'popovertargetaction', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'wrap', 'xmlns', 'slot']);
const svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'amplitude', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'exponent', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'intercept', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'slope', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'tablevalues', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);
const mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);
const xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);

// eslint-disable-next-line unicorn/better-regex
const MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode
const ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
const TMPLIT_EXPR = seal(/\$\{[\w\W]*/gm); // eslint-disable-line unicorn/better-regex
const DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]+$/); // eslint-disable-line no-useless-escape
const ARIA_ATTR = seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape
const IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp|matrix):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
);
const IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
const ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g // eslint-disable-line no-control-regex
);
const DOCTYPE_NAME = seal(/^html$/i);
const CUSTOM_ELEMENT = seal(/^[a-z][.\w]*(-[.\w]+)+$/i);

var EXPRESSIONS = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ARIA_ATTR: ARIA_ATTR,
  ATTR_WHITESPACE: ATTR_WHITESPACE,
  CUSTOM_ELEMENT: CUSTOM_ELEMENT,
  DATA_ATTR: DATA_ATTR,
  DOCTYPE_NAME: DOCTYPE_NAME,
  ERB_EXPR: ERB_EXPR,
  IS_ALLOWED_URI: IS_ALLOWED_URI,
  IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA,
  MUSTACHE_EXPR: MUSTACHE_EXPR,
  TMPLIT_EXPR: TMPLIT_EXPR
});

/* eslint-disable @typescript-eslint/indent */
// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType
const NODE_TYPE = {
  element: 1,
  attribute: 2,
  text: 3,
  cdataSection: 4,
  entityReference: 5,
  // Deprecated
  entityNode: 6,
  // Deprecated
  progressingInstruction: 7,
  comment: 8,
  document: 9,
  documentType: 10,
  documentFragment: 11,
  notation: 12 // Deprecated
};
const getGlobal = function getGlobal() {
  return typeof window === 'undefined' ? null : window;
};
/**
 * Creates a no-op policy for internal use only.
 * Don't export this function outside this module!
 * @param trustedTypes The policy factory.
 * @param purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).
 * @return The policy created (or null, if Trusted Types
 * are not supported or creating the policy failed).
 */
const _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, purifyHostElement) {
  if (typeof trustedTypes !== 'object' || typeof trustedTypes.createPolicy !== 'function') {
    return null;
  }
  // Allow the callers to control the unique policy name
  // by adding a data-tt-policy-suffix to the script element with the DOMPurify.
  // Policy creation with duplicate names throws in Trusted Types.
  let suffix = null;
  const ATTR_NAME = 'data-tt-policy-suffix';
  if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {
    suffix = purifyHostElement.getAttribute(ATTR_NAME);
  }
  const policyName = 'dompurify' + (suffix ? '#' + suffix : '');
  try {
    return trustedTypes.createPolicy(policyName, {
      createHTML(html) {
        return html;
      },
      createScriptURL(scriptUrl) {
        return scriptUrl;
      }
    });
  } catch (_) {
    // Policy creation failed (most likely another DOMPurify script has
    // already run). Skip creating the policy, as this will only cause errors
    // if TT are enforced.
    console.warn('TrustedTypes policy ' + policyName + ' could not be created.');
    return null;
  }
};
const _createHooksMap = function _createHooksMap() {
  return {
    afterSanitizeAttributes: [],
    afterSanitizeElements: [],
    afterSanitizeShadowDOM: [],
    beforeSanitizeAttributes: [],
    beforeSanitizeElements: [],
    beforeSanitizeShadowDOM: [],
    uponSanitizeAttribute: [],
    uponSanitizeElement: [],
    uponSanitizeShadowNode: []
  };
};
function createDOMPurify() {
  let window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();
  const DOMPurify = root => createDOMPurify(root);
  DOMPurify.version = '3.2.6';
  DOMPurify.removed = [];
  if (!window || !window.document || window.document.nodeType !== NODE_TYPE.document || !window.Element) {
    // Not running in a browser, provide a factory function
    // so that you can pass your own Window
    DOMPurify.isSupported = false;
    return DOMPurify;
  }
  let {
    document
  } = window;
  const originalDocument = document;
  const currentScript = originalDocument.currentScript;
  const {
    DocumentFragment,
    HTMLTemplateElement,
    Node,
    Element,
    NodeFilter,
    NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap,
    HTMLFormElement,
    DOMParser,
    trustedTypes
  } = window;
  const ElementPrototype = Element.prototype;
  const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');
  const remove = lookupGetter(ElementPrototype, 'remove');
  const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');
  const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');
  const getParentNode = lookupGetter(ElementPrototype, 'parentNode');
  // As per issue #47, the web-components registry is inherited by a
  // new document created via createHTMLDocument. As per the spec
  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)
  // a new empty registry is used when creating a template contents owner
  // document, so we use that as our parent document to ensure nothing
  // is inherited.
  if (typeof HTMLTemplateElement === 'function') {
    const template = document.createElement('template');
    if (template.content && template.content.ownerDocument) {
      document = template.content.ownerDocument;
    }
  }
  let trustedTypesPolicy;
  let emptyHTML = '';
  const {
    implementation,
    createNodeIterator,
    createDocumentFragment,
    getElementsByTagName
  } = document;
  const {
    importNode
  } = originalDocument;
  let hooks = _createHooksMap();
  /**
   * Expose whether this browser supports running the full DOMPurify.
   */
  DOMPurify.isSupported = typeof entries === 'function' && typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined;
  const {
    MUSTACHE_EXPR,
    ERB_EXPR,
    TMPLIT_EXPR,
    DATA_ATTR,
    ARIA_ATTR,
    IS_SCRIPT_OR_DATA,
    ATTR_WHITESPACE,
    CUSTOM_ELEMENT
  } = EXPRESSIONS;
  let {
    IS_ALLOWED_URI: IS_ALLOWED_URI$1
  } = EXPRESSIONS;
  /**
   * We consider the elements and attributes below to be safe. Ideally
   * don't add any new ones but feel free to remove unwanted ones.
   */
  /* allowed element names */
  let ALLOWED_TAGS = null;
  const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...text$4]);
  /* Allowed attribute names */
  let ALLOWED_ATTR = null;
  const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html, ...svg, ...mathMl, ...xml]);
  /*
   * Configure how DOMPurify should handle custom elements and their attributes as well as customized built-in elements.
   * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)
   * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)
   * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.
   */
  let CUSTOM_ELEMENT_HANDLING = Object.seal(create(null, {
    tagNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    attributeNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    allowCustomizedBuiltInElements: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: false
    }
  }));
  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */
  let FORBID_TAGS = null;
  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */
  let FORBID_ATTR = null;
  /* Decide if ARIA attributes are okay */
  let ALLOW_ARIA_ATTR = true;
  /* Decide if custom data attributes are okay */
  let ALLOW_DATA_ATTR = true;
  /* Decide if unknown protocols are okay */
  let ALLOW_UNKNOWN_PROTOCOLS = false;
  /* Decide if self-closing tags in attributes are allowed.
   * Usually removed due to a mXSS issue in jQuery 3.0 */
  let ALLOW_SELF_CLOSE_IN_ATTR = true;
  /* Output should be safe for common template engines.
   * This means, DOMPurify removes data attributes, mustaches and ERB
   */
  let SAFE_FOR_TEMPLATES = false;
  /* Output should be safe even for XML used within HTML and alike.
   * This means, DOMPurify removes comments when containing risky content.
   */
  let SAFE_FOR_XML = true;
  /* Decide if document with <html>... should be returned */
  let WHOLE_DOCUMENT = false;
  /* Track whether config is already set on this instance of DOMPurify. */
  let SET_CONFIG = false;
  /* Decide if all elements (e.g. style, script) must be children of
   * document.body. By default, browsers might move them to document.head */
  let FORCE_BODY = false;
  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
   * string (or a TrustedHTML object if Trusted Types are supported).
   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
   */
  let RETURN_DOM = false;
  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html
   * string  (or a TrustedHTML object if Trusted Types are supported) */
  let RETURN_DOM_FRAGMENT = false;
  /* Try to return a Trusted Type object instead of a string, return a string in
   * case Trusted Types are not supported  */
  let RETURN_TRUSTED_TYPE = false;
  /* Output should be free from DOM clobbering attacks?
   * This sanitizes markups named with colliding, clobberable built-in DOM APIs.
   */
  let SANITIZE_DOM = true;
  /* Achieve full DOM Clobbering protection by isolating the namespace of named
   * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.
   *
   * HTML/DOM spec rules that enable DOM Clobbering:
   *   - Named Access on Window (§7.3.3)
   *   - DOM Tree Accessors (§3.1.5)
   *   - Form Element Parent-Child Relations (§4.10.3)
   *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)
   *   - HTMLCollection (§4.2.10.2)
   *
   * Namespace isolation is implemented by prefixing `id` and `name` attributes
   * with a constant string, i.e., `user-content-`
   */
  let SANITIZE_NAMED_PROPS = false;
  const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';
  /* Keep element content when removing element? */
  let KEEP_CONTENT = true;
  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead
   * of importing it into a new Document and returning a sanitized copy */
  let IN_PLACE = false;
  /* Allow usage of profiles like html, svg and mathMl */
  let USE_PROFILES = {};
  /* Tags to ignore content of when KEEP_CONTENT is true */
  let FORBID_CONTENTS = null;
  const DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);
  /* Tags that are safe for data: URIs */
  let DATA_URI_TAGS = null;
  const DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);
  /* Attributes safe for values like "javascript:" */
  let URI_SAFE_ATTRIBUTES = null;
  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);
  const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
  const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
  const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
  /* Document namespace */
  let NAMESPACE = HTML_NAMESPACE;
  let IS_EMPTY_INPUT = false;
  /* Allowed XHTML+XML namespaces */
  let ALLOWED_NAMESPACES = null;
  const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);
  let MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);
  let HTML_INTEGRATION_POINTS = addToSet({}, ['annotation-xml']);
  // Certain elements are allowed in both SVG and HTML
  // namespace. We need to specify them explicitly
  // so that they don't get erroneously deleted from
  // HTML namespace.
  const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);
  /* Parsing of strict XHTML documents */
  let PARSER_MEDIA_TYPE = null;
  const SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];
  const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';
  let transformCaseFunc = null;
  /* Keep a reference to config to pass to hooks */
  let CONFIG = null;
  /* Ideally, do not touch anything below this line */
  /* ______________________________________________ */
  const formElement = document.createElement('form');
  const isRegexOrFunction = function isRegexOrFunction(testValue) {
    return testValue instanceof RegExp || testValue instanceof Function;
  };
  /**
   * _parseConfig
   *
   * @param cfg optional config literal
   */
  // eslint-disable-next-line complexity
  const _parseConfig = function _parseConfig() {
    let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (CONFIG && CONFIG === cfg) {
      return;
    }
    /* Shield configuration object from tampering */
    if (!cfg || typeof cfg !== 'object') {
      cfg = {};
    }
    /* Shield configuration object from prototype pollution */
    cfg = clone$2(cfg);
    PARSER_MEDIA_TYPE =
    // eslint-disable-next-line unicorn/prefer-includes
    SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? DEFAULT_PARSER_MEDIA_TYPE : cfg.PARSER_MEDIA_TYPE;
    // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.
    transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;
    /* Set configuration parameters */
    ALLOWED_TAGS = objectHasOwnProperty(cfg, 'ALLOWED_TAGS') ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;
    ALLOWED_ATTR = objectHasOwnProperty(cfg, 'ALLOWED_ATTR') ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;
    ALLOWED_NAMESPACES = objectHasOwnProperty(cfg, 'ALLOWED_NAMESPACES') ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;
    URI_SAFE_ATTRIBUTES = objectHasOwnProperty(cfg, 'ADD_URI_SAFE_ATTR') ? addToSet(clone$2(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR, transformCaseFunc) : DEFAULT_URI_SAFE_ATTRIBUTES;
    DATA_URI_TAGS = objectHasOwnProperty(cfg, 'ADD_DATA_URI_TAGS') ? addToSet(clone$2(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS, transformCaseFunc) : DEFAULT_DATA_URI_TAGS;
    FORBID_CONTENTS = objectHasOwnProperty(cfg, 'FORBID_CONTENTS') ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;
    FORBID_TAGS = objectHasOwnProperty(cfg, 'FORBID_TAGS') ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : clone$2({});
    FORBID_ATTR = objectHasOwnProperty(cfg, 'FORBID_ATTR') ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : clone$2({});
    USE_PROFILES = objectHasOwnProperty(cfg, 'USE_PROFILES') ? cfg.USE_PROFILES : false;
    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true
    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true
    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false
    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true
    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false
    SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false; // Default true
    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false
    RETURN_DOM = cfg.RETURN_DOM || false; // Default false
    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false
    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false
    FORCE_BODY = cfg.FORCE_BODY || false; // Default false
    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true
    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false
    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true
    IN_PLACE = cfg.IN_PLACE || false; // Default false
    IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;
    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
    MATHML_TEXT_INTEGRATION_POINTS = cfg.MATHML_TEXT_INTEGRATION_POINTS || MATHML_TEXT_INTEGRATION_POINTS;
    HTML_INTEGRATION_POINTS = cfg.HTML_INTEGRATION_POINTS || HTML_INTEGRATION_POINTS;
    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};
    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
    }
    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
    }
    if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {
      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
    }
    if (SAFE_FOR_TEMPLATES) {
      ALLOW_DATA_ATTR = false;
    }
    if (RETURN_DOM_FRAGMENT) {
      RETURN_DOM = true;
    }
    /* Parse profile info */
    if (USE_PROFILES) {
      ALLOWED_TAGS = addToSet({}, text$4);
      ALLOWED_ATTR = [];
      if (USE_PROFILES.html === true) {
        addToSet(ALLOWED_TAGS, html$1);
        addToSet(ALLOWED_ATTR, html);
      }
      if (USE_PROFILES.svg === true) {
        addToSet(ALLOWED_TAGS, svg$1);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }
      if (USE_PROFILES.svgFilters === true) {
        addToSet(ALLOWED_TAGS, svgFilters);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }
      if (USE_PROFILES.mathMl === true) {
        addToSet(ALLOWED_TAGS, mathMl$1);
        addToSet(ALLOWED_ATTR, mathMl);
        addToSet(ALLOWED_ATTR, xml);
      }
    }
    /* Merge configuration parameters */
    if (cfg.ADD_TAGS) {
      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
        ALLOWED_TAGS = clone$2(ALLOWED_TAGS);
      }
      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);
    }
    if (cfg.ADD_ATTR) {
      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
        ALLOWED_ATTR = clone$2(ALLOWED_ATTR);
      }
      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);
    }
    if (cfg.ADD_URI_SAFE_ATTR) {
      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);
    }
    if (cfg.FORBID_CONTENTS) {
      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
        FORBID_CONTENTS = clone$2(FORBID_CONTENTS);
      }
      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);
    }
    /* Add #text in case KEEP_CONTENT is set to true */
    if (KEEP_CONTENT) {
      ALLOWED_TAGS['#text'] = true;
    }
    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */
    if (WHOLE_DOCUMENT) {
      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);
    }
    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */
    if (ALLOWED_TAGS.table) {
      addToSet(ALLOWED_TAGS, ['tbody']);
      delete FORBID_TAGS.tbody;
    }
    if (cfg.TRUSTED_TYPES_POLICY) {
      if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') {
        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');
      }
      if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') {
        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');
      }
      // Overwrite existing TrustedTypes policy.
      trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;
      // Sign local variables required by `sanitize`.
      emptyHTML = trustedTypesPolicy.createHTML('');
    } else {
      // Uninitialized policy, attempt to initialize the internal dompurify policy.
      if (trustedTypesPolicy === undefined) {
        trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);
      }
      // If creating the internal policy succeeded sign internal variables.
      if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') {
        emptyHTML = trustedTypesPolicy.createHTML('');
      }
    }
    // Prevent further manipulation of configuration.
    // Not available in IE8, Safari 5, etc.
    if (freeze) {
      freeze(cfg);
    }
    CONFIG = cfg;
  };
  /* Keep track of all possible SVG and MathML tags
   * so that we can perform the namespace checks
   * correctly. */
  const ALL_SVG_TAGS = addToSet({}, [...svg$1, ...svgFilters, ...svgDisallowed]);
  const ALL_MATHML_TAGS = addToSet({}, [...mathMl$1, ...mathMlDisallowed]);
  /**
   * @param element a DOM element whose namespace is being checked
   * @returns Return false if the element has a
   *  namespace that a spec-compliant parser would never
   *  return. Return true otherwise.
   */
  const _checkValidNamespace = function _checkValidNamespace(element) {
    let parent = getParentNode(element);
    // In JSDOM, if we're inside shadow DOM, then parentNode
    // can be null. We just simulate parent in this case.
    if (!parent || !parent.tagName) {
      parent = {
        namespaceURI: NAMESPACE,
        tagName: 'template'
      };
    }
    const tagName = stringToLowerCase(element.tagName);
    const parentTagName = stringToLowerCase(parent.tagName);
    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {
      return false;
    }
    if (element.namespaceURI === SVG_NAMESPACE) {
      // The only way to switch from HTML namespace to SVG
      // is via <svg>. If it happens via any other tag, then
      // it should be killed.
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === 'svg';
      }
      // The only way to switch from MathML to SVG is via`
      // svg if parent is either <annotation-xml> or MathML
      // text integration points.
      if (parent.namespaceURI === MATHML_NAMESPACE) {
        return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
      }
      // We only allow elements that are defined in SVG
      // spec. All others are disallowed in SVG namespace.
      return Boolean(ALL_SVG_TAGS[tagName]);
    }
    if (element.namespaceURI === MATHML_NAMESPACE) {
      // The only way to switch from HTML namespace to MathML
      // is via <math>. If it happens via any other tag, then
      // it should be killed.
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === 'math';
      }
      // The only way to switch from SVG to MathML is via
      // <math> and HTML integration points
      if (parent.namespaceURI === SVG_NAMESPACE) {
        return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];
      }
      // We only allow elements that are defined in MathML
      // spec. All others are disallowed in MathML namespace.
      return Boolean(ALL_MATHML_TAGS[tagName]);
    }
    if (element.namespaceURI === HTML_NAMESPACE) {
      // The only way to switch from SVG to HTML is via
      // HTML integration points, and from MathML to HTML
      // is via MathML text integration points
      if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }
      if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }
      // We disallow tags that are specific for MathML
      // or SVG and should never appear in HTML namespace
      return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);
    }
    // For XHTML and XML documents that support custom namespaces
    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) {
      return true;
    }
    // The code should never reach this place (this means
    // that the element somehow got namespace that is not
    // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).
    // Return false just in case.
    return false;
  };
  /**
   * _forceRemove
   *
   * @param node a DOM node
   */
  const _forceRemove = function _forceRemove(node) {
    arrayPush(DOMPurify.removed, {
      element: node
    });
    try {
      // eslint-disable-next-line unicorn/prefer-dom-node-remove
      getParentNode(node).removeChild(node);
    } catch (_) {
      remove(node);
    }
  };
  /**
   * _removeAttribute
   *
   * @param name an Attribute name
   * @param element a DOM node
   */
  const _removeAttribute = function _removeAttribute(name, element) {
    try {
      arrayPush(DOMPurify.removed, {
        attribute: element.getAttributeNode(name),
        from: element
      });
    } catch (_) {
      arrayPush(DOMPurify.removed, {
        attribute: null,
        from: element
      });
    }
    element.removeAttribute(name);
    // We void attribute values for unremovable "is" attributes
    if (name === 'is') {
      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
        try {
          _forceRemove(element);
        } catch (_) {}
      } else {
        try {
          element.setAttribute(name, '');
        } catch (_) {}
      }
    }
  };
  /**
   * _initDocument
   *
   * @param dirty - a string of dirty markup
   * @return a DOM, filled with the dirty markup
   */
  const _initDocument = function _initDocument(dirty) {
    /* Create a HTML document */
    let doc = null;
    let leadingWhitespace = null;
    if (FORCE_BODY) {
      dirty = '<remove></remove>' + dirty;
    } else {
      /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */
      const matches = stringMatch(dirty, /^[\r\n\t ]+/);
      leadingWhitespace = matches && matches[0];
    }
    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) {
      // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)
      dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + '</body></html>';
    }
    const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
    /*
     * Use the DOMParser API by default, fallback later if needs be
     * DOMParser not work for svg when has multiple root element.
     */
    if (NAMESPACE === HTML_NAMESPACE) {
      try {
        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
      } catch (_) {}
    }
    /* Use createHTMLDocument in case DOMParser is not available */
    if (!doc || !doc.documentElement) {
      doc = implementation.createDocument(NAMESPACE, 'template', null);
      try {
        doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;
      } catch (_) {
        // Syntax error if dirtyPayload is invalid xml
      }
    }
    const body = doc.body || doc.documentElement;
    if (dirty && leadingWhitespace) {
      body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);
    }
    /* Work on whole document or just its body */
    if (NAMESPACE === HTML_NAMESPACE) {
      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];
    }
    return WHOLE_DOCUMENT ? doc.documentElement : body;
  };
  /**
   * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.
   *
   * @param root The root element or node to start traversing on.
   * @return The created NodeIterator
   */
  const _createNodeIterator = function _createNodeIterator(root) {
    return createNodeIterator.call(root.ownerDocument || root, root,
    // eslint-disable-next-line no-bitwise
    NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_PROCESSING_INSTRUCTION | NodeFilter.SHOW_CDATA_SECTION, null);
  };
  /**
   * _isClobbered
   *
   * @param element element to check for clobbering attacks
   * @return true if clobbered, false if safe
   */
  const _isClobbered = function _isClobbered(element) {
    return element instanceof HTMLFormElement && (typeof element.nodeName !== 'string' || typeof element.textContent !== 'string' || typeof element.removeChild !== 'function' || !(element.attributes instanceof NamedNodeMap) || typeof element.removeAttribute !== 'function' || typeof element.setAttribute !== 'function' || typeof element.namespaceURI !== 'string' || typeof element.insertBefore !== 'function' || typeof element.hasChildNodes !== 'function');
  };
  /**
   * Checks whether the given object is a DOM node.
   *
   * @param value object to check whether it's a DOM node
   * @return true is object is a DOM node
   */
  const _isNode = function _isNode(value) {
    return typeof Node === 'function' && value instanceof Node;
  };
  function _executeHooks(hooks, currentNode, data) {
    arrayForEach(hooks, hook => {
      hook.call(DOMPurify, currentNode, data, CONFIG);
    });
  }
  /**
   * _sanitizeElements
   *
   * @protect nodeName
   * @protect textContent
   * @protect removeChild
   * @param currentNode to check for permission to exist
   * @return true if node was killed, false if left alive
   */
  const _sanitizeElements = function _sanitizeElements(currentNode) {
    let content = null;
    /* Execute a hook if present */
    _executeHooks(hooks.beforeSanitizeElements, currentNode, null);
    /* Check if element is clobbered or can clobber */
    if (_isClobbered(currentNode)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Now let's check the element's type and name */
    const tagName = transformCaseFunc(currentNode.nodeName);
    /* Execute a hook if present */
    _executeHooks(hooks.uponSanitizeElement, currentNode, {
      tagName,
      allowedTags: ALLOWED_TAGS
    });
    /* Detect mXSS attempts abusing namespace confusion */
    if (SAFE_FOR_XML && currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && regExpTest(/<[/\w!]/g, currentNode.innerHTML) && regExpTest(/<[/\w!]/g, currentNode.textContent)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Remove any occurrence of processing instructions */
    if (currentNode.nodeType === NODE_TYPE.progressingInstruction) {
      _forceRemove(currentNode);
      return true;
    }
    /* Remove any kind of possibly harmful comments */
    if (SAFE_FOR_XML && currentNode.nodeType === NODE_TYPE.comment && regExpTest(/<[/\w]/g, currentNode.data)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Remove element if anything forbids its presence */
    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
      /* Check if we have a custom element to handle */
      if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) {
          return false;
        }
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) {
          return false;
        }
      }
      /* Keep content except for bad-listed elements */
      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
        const parentNode = getParentNode(currentNode) || currentNode.parentNode;
        const childNodes = getChildNodes(currentNode) || currentNode.childNodes;
        if (childNodes && parentNode) {
          const childCount = childNodes.length;
          for (let i = childCount - 1; i >= 0; --i) {
            const childClone = cloneNode(childNodes[i], true);
            childClone.__removalCount = (currentNode.__removalCount || 0) + 1;
            parentNode.insertBefore(childClone, getNextSibling(currentNode));
          }
        }
      }
      _forceRemove(currentNode);
      return true;
    }
    /* Check whether element has a valid namespace */
    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Make sure that older browsers don't get fallback-tag mXSS */
    if ((tagName === 'noscript' || tagName === 'noembed' || tagName === 'noframes') && regExpTest(/<\/no(script|embed|frames)/i, currentNode.innerHTML)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Sanitize element content to be template-safe */
    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === NODE_TYPE.text) {
      /* Get the element's text content */
      content = currentNode.textContent;
      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {
        content = stringReplace(content, expr, ' ');
      });
      if (currentNode.textContent !== content) {
        arrayPush(DOMPurify.removed, {
          element: currentNode.cloneNode()
        });
        currentNode.textContent = content;
      }
    }
    /* Execute a hook if present */
    _executeHooks(hooks.afterSanitizeElements, currentNode, null);
    return false;
  };
  /**
   * _isValidAttribute
   *
   * @param lcTag Lowercase tag name of containing element.
   * @param lcName Lowercase attribute name.
   * @param value Attribute value.
   * @return Returns true if `value` is valid, otherwise false.
   */
  // eslint-disable-next-line complexity
  const _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {
    /* Make sure attribute cannot clobber */
    if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {
      return false;
    }
    /* Allow valid data-* attributes: At least one character after "-"
        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
        We don't need to check the value; it's always URI safe. */
    if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
      if (
      // First condition does a very basic check if a) it's basically a valid custom element tagname AND
      // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
      // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
      _isBasicCustomElement(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) ||
      // Alternative, second condition checks if it's an `is`-attribute, AND
      // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
      lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {
        return false;
      }
      /* Check value is safe. First, is attr inert? If so, is safe */
    } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if (value) {
      return false;
    } else ;
    return true;
  };
  /**
   * _isBasicCustomElement
   * checks if at least one dash is included in tagName, and it's not the first char
   * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name
   *
   * @param tagName name of the tag of the node to sanitize
   * @returns Returns true if the tag name meets the basic criteria for a custom element, otherwise false.
   */
  const _isBasicCustomElement = function _isBasicCustomElement(tagName) {
    return tagName !== 'annotation-xml' && stringMatch(tagName, CUSTOM_ELEMENT);
  };
  /**
   * _sanitizeAttributes
   *
   * @protect attributes
   * @protect nodeName
   * @protect removeAttribute
   * @protect setAttribute
   *
   * @param currentNode to sanitize
   */
  const _sanitizeAttributes = function _sanitizeAttributes(currentNode) {
    /* Execute a hook if present */
    _executeHooks(hooks.beforeSanitizeAttributes, currentNode, null);
    const {
      attributes
    } = currentNode;
    /* Check if we have attributes; if not we might have a text node */
    if (!attributes || _isClobbered(currentNode)) {
      return;
    }
    const hookEvent = {
      attrName: '',
      attrValue: '',
      keepAttr: true,
      allowedAttributes: ALLOWED_ATTR,
      forceKeepAttr: undefined
    };
    let l = attributes.length;
    /* Go backwards over all attributes; safely remove bad ones */
    while (l--) {
      const attr = attributes[l];
      const {
        name,
        namespaceURI,
        value: attrValue
      } = attr;
      const lcName = transformCaseFunc(name);
      const initValue = attrValue;
      let value = name === 'value' ? initValue : stringTrim(initValue);
      /* Execute a hook if present */
      hookEvent.attrName = lcName;
      hookEvent.attrValue = value;
      hookEvent.keepAttr = true;
      hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set
      _executeHooks(hooks.uponSanitizeAttribute, currentNode, hookEvent);
      value = hookEvent.attrValue;
      /* Full DOM Clobbering protection via namespace isolation,
       * Prefix id and name attributes with `user-content-`
       */
      if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {
        // Remove the attribute with this value
        _removeAttribute(name, currentNode);
        // Prefix the value and later re-create the attribute with the sanitized value
        value = SANITIZE_NAMED_PROPS_PREFIX + value;
      }
      /* Work around a security issue with comments inside attributes */
      if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\/(style|title)/i, value)) {
        _removeAttribute(name, currentNode);
        continue;
      }
      /* Did the hooks approve of the attribute? */
      if (hookEvent.forceKeepAttr) {
        continue;
      }
      /* Did the hooks approve of the attribute? */
      if (!hookEvent.keepAttr) {
        _removeAttribute(name, currentNode);
        continue;
      }
      /* Work around a security issue in jQuery 3.0 */
      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\/>/i, value)) {
        _removeAttribute(name, currentNode);
        continue;
      }
      /* Sanitize attribute content to be template-safe */
      if (SAFE_FOR_TEMPLATES) {
        arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {
          value = stringReplace(value, expr, ' ');
        });
      }
      /* Is `value` valid for this attribute? */
      const lcTag = transformCaseFunc(currentNode.nodeName);
      if (!_isValidAttribute(lcTag, lcName, value)) {
        _removeAttribute(name, currentNode);
        continue;
      }
      /* Handle attributes that require Trusted Types */
      if (trustedTypesPolicy && typeof trustedTypes === 'object' && typeof trustedTypes.getAttributeType === 'function') {
        if (namespaceURI) ; else {
          switch (trustedTypes.getAttributeType(lcTag, lcName)) {
            case 'TrustedHTML':
              {
                value = trustedTypesPolicy.createHTML(value);
                break;
              }
            case 'TrustedScriptURL':
              {
                value = trustedTypesPolicy.createScriptURL(value);
                break;
              }
          }
        }
      }
      /* Handle invalid data-* attribute set by try-catching it */
      if (value !== initValue) {
        try {
          if (namespaceURI) {
            currentNode.setAttributeNS(namespaceURI, name, value);
          } else {
            /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */
            currentNode.setAttribute(name, value);
          }
          if (_isClobbered(currentNode)) {
            _forceRemove(currentNode);
          } else {
            arrayPop(DOMPurify.removed);
          }
        } catch (_) {
          _removeAttribute(name, currentNode);
        }
      }
    }
    /* Execute a hook if present */
    _executeHooks(hooks.afterSanitizeAttributes, currentNode, null);
  };
  /**
   * _sanitizeShadowDOM
   *
   * @param fragment to iterate over recursively
   */
  const _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {
    let shadowNode = null;
    const shadowIterator = _createNodeIterator(fragment);
    /* Execute a hook if present */
    _executeHooks(hooks.beforeSanitizeShadowDOM, fragment, null);
    while (shadowNode = shadowIterator.nextNode()) {
      /* Execute a hook if present */
      _executeHooks(hooks.uponSanitizeShadowNode, shadowNode, null);
      /* Sanitize tags and elements */
      _sanitizeElements(shadowNode);
      /* Check attributes next */
      _sanitizeAttributes(shadowNode);
      /* Deep shadow DOM detected */
      if (shadowNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM(shadowNode.content);
      }
    }
    /* Execute a hook if present */
    _executeHooks(hooks.afterSanitizeShadowDOM, fragment, null);
  };
  // eslint-disable-next-line complexity
  DOMPurify.sanitize = function (dirty) {
    let cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let body = null;
    let importedNode = null;
    let currentNode = null;
    let returnNode = null;
    /* Make sure we have a string to sanitize.
      DO NOT return early, as this will return the wrong type if
      the user has requested a DOM object rather than a string */
    IS_EMPTY_INPUT = !dirty;
    if (IS_EMPTY_INPUT) {
      dirty = '<!-->';
    }
    /* Stringify, in case dirty is an object */
    if (typeof dirty !== 'string' && !_isNode(dirty)) {
      if (typeof dirty.toString === 'function') {
        dirty = dirty.toString();
        if (typeof dirty !== 'string') {
          throw typeErrorCreate('dirty is not a string, aborting');
        }
      } else {
        throw typeErrorCreate('toString is not a function');
      }
    }
    /* Return dirty HTML if DOMPurify cannot run */
    if (!DOMPurify.isSupported) {
      return dirty;
    }
    /* Assign config vars */
    if (!SET_CONFIG) {
      _parseConfig(cfg);
    }
    /* Clean up removed elements */
    DOMPurify.removed = [];
    /* Check if dirty is correctly typed for IN_PLACE */
    if (typeof dirty === 'string') {
      IN_PLACE = false;
    }
    if (IN_PLACE) {
      /* Do some early pre-sanitization to avoid unsafe root nodes */
      if (dirty.nodeName) {
        const tagName = transformCaseFunc(dirty.nodeName);
        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
          throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');
        }
      }
    } else if (dirty instanceof Node) {
      /* If dirty is a DOM element, append to an empty document to avoid
         elements being stripped by the parser */
      body = _initDocument('<!---->');
      importedNode = body.ownerDocument.importNode(dirty, true);
      if (importedNode.nodeType === NODE_TYPE.element && importedNode.nodeName === 'BODY') {
        /* Node is already a body, use as is */
        body = importedNode;
      } else if (importedNode.nodeName === 'HTML') {
        body = importedNode;
      } else {
        // eslint-disable-next-line unicorn/prefer-dom-node-append
        body.appendChild(importedNode);
      }
    } else {
      /* Exit directly if we have nothing to do */
      if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT &&
      // eslint-disable-next-line unicorn/prefer-includes
      dirty.indexOf('<') === -1) {
        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
      }
      /* Initialize the document to work on */
      body = _initDocument(dirty);
      /* Check we have a DOM node from the data */
      if (!body) {
        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';
      }
    }
    /* Remove first element node (ours) if FORCE_BODY is set */
    if (body && FORCE_BODY) {
      _forceRemove(body.firstChild);
    }
    /* Get node iterator */
    const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);
    /* Now start iterating over the created document */
    while (currentNode = nodeIterator.nextNode()) {
      /* Sanitize tags and elements */
      _sanitizeElements(currentNode);
      /* Check attributes next */
      _sanitizeAttributes(currentNode);
      /* Shadow DOM detected, sanitize it */
      if (currentNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM(currentNode.content);
      }
    }
    /* If we sanitized `dirty` in-place, return it. */
    if (IN_PLACE) {
      return dirty;
    }
    /* Return sanitized string or DOM */
    if (RETURN_DOM) {
      if (RETURN_DOM_FRAGMENT) {
        returnNode = createDocumentFragment.call(body.ownerDocument);
        while (body.firstChild) {
          // eslint-disable-next-line unicorn/prefer-dom-node-append
          returnNode.appendChild(body.firstChild);
        }
      } else {
        returnNode = body;
      }
      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {
        /*
          AdoptNode() is not used because internal state is not reset
          (e.g. the past names map of a HTMLFormElement), this is safe
          in theory but we would rather not risk another attack vector.
          The state that is cloned by importNode() is explicitly defined
          by the specs.
        */
        returnNode = importNode.call(originalDocument, returnNode, true);
      }
      return returnNode;
    }
    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
    /* Serialize doctype if allowed */
    if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {
      serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\n' + serializedHTML;
    }
    /* Sanitize final string template-safe */
    if (SAFE_FOR_TEMPLATES) {
      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {
        serializedHTML = stringReplace(serializedHTML, expr, ' ');
      });
    }
    return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
  };
  DOMPurify.setConfig = function () {
    let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _parseConfig(cfg);
    SET_CONFIG = true;
  };
  DOMPurify.clearConfig = function () {
    CONFIG = null;
    SET_CONFIG = false;
  };
  DOMPurify.isValidAttribute = function (tag, attr, value) {
    /* Initialize shared config vars if necessary. */
    if (!CONFIG) {
      _parseConfig({});
    }
    const lcTag = transformCaseFunc(tag);
    const lcName = transformCaseFunc(attr);
    return _isValidAttribute(lcTag, lcName, value);
  };
  DOMPurify.addHook = function (entryPoint, hookFunction) {
    if (typeof hookFunction !== 'function') {
      return;
    }
    arrayPush(hooks[entryPoint], hookFunction);
  };
  DOMPurify.removeHook = function (entryPoint, hookFunction) {
    if (hookFunction !== undefined) {
      const index = arrayLastIndexOf(hooks[entryPoint], hookFunction);
      return index === -1 ? undefined : arraySplice(hooks[entryPoint], index, 1)[0];
    }
    return arrayPop(hooks[entryPoint]);
  };
  DOMPurify.removeHooks = function (entryPoint) {
    hooks[entryPoint] = [];
  };
  DOMPurify.removeAllHooks = function () {
    hooks = _createHooksMap();
  };
  return DOMPurify;
}
var purify = createDOMPurify();

function sanitize (options, init, enabled) {
  return input => {
    if (!enabled || typeof input !== 'string') {
      return input;
    }
    var purify$1 = typeof init === 'function' ? init(purify) : purify;
    return purify$1.sanitize(input, options);
  };
}

var INUMBER = 'INUMBER';
var IOP1 = 'IOP1';
var IOP2 = 'IOP2';
var IOP3 = 'IOP3';
var IVAR = 'IVAR';
var IVARNAME = 'IVARNAME';
var IFUNCALL = 'IFUNCALL';
var IFUNDEF = 'IFUNDEF';
var IEXPR = 'IEXPR';
var IEXPREVAL = 'IEXPREVAL';
var IMEMBER = 'IMEMBER';
var IENDSTATEMENT = 'IENDSTATEMENT';
var IARRAY = 'IARRAY';

function Instruction(type, value) {
  this.type = type;
  this.value = (value !== undefined && value !== null) ? value : 0;
}

Instruction.prototype.toString = function () {
  switch (this.type) {
    case INUMBER:
    case IOP1:
    case IOP2:
    case IOP3:
    case IVAR:
    case IVARNAME:
    case IENDSTATEMENT:
      return this.value;
    case IFUNCALL:
      return 'CALL ' + this.value;
    case IFUNDEF:
      return 'DEF ' + this.value;
    case IARRAY:
      return 'ARRAY ' + this.value;
    case IMEMBER:
      return '.' + this.value;
    default:
      return 'Invalid Instruction';
  }
};

function unaryInstruction(value) {
  return new Instruction(IOP1, value);
}

function binaryInstruction(value) {
  return new Instruction(IOP2, value);
}

function ternaryInstruction(value) {
  return new Instruction(IOP3, value);
}

function simplify(tokens, unaryOps, binaryOps, ternaryOps, values) {
  var nstack = [];
  var newexpression = [];
  var n1, n2, n3;
  var f;
  for (var i = 0; i < tokens.length; i++) {
    var item = tokens[i];
    var type = item.type;
    if (type === INUMBER || type === IVARNAME) {
      if (Array.isArray(item.value)) {
        nstack.push.apply(nstack, simplify(item.value.map(function (x) {
          return new Instruction(INUMBER, x);
        }).concat(new Instruction(IARRAY, item.value.length)), unaryOps, binaryOps, ternaryOps, values));
      } else {
        nstack.push(item);
      }
    } else if (type === IVAR && values.hasOwnProperty(item.value)) {
      item = new Instruction(INUMBER, values[item.value]);
      nstack.push(item);
    } else if (type === IOP2 && nstack.length > 1) {
      n2 = nstack.pop();
      n1 = nstack.pop();
      f = binaryOps[item.value];
      item = new Instruction(INUMBER, f(n1.value, n2.value));
      nstack.push(item);
    } else if (type === IOP3 && nstack.length > 2) {
      n3 = nstack.pop();
      n2 = nstack.pop();
      n1 = nstack.pop();
      if (item.value === '?') {
        nstack.push(n1.value ? n2.value : n3.value);
      } else {
        f = ternaryOps[item.value];
        item = new Instruction(INUMBER, f(n1.value, n2.value, n3.value));
        nstack.push(item);
      }
    } else if (type === IOP1 && nstack.length > 0) {
      n1 = nstack.pop();
      f = unaryOps[item.value];
      item = new Instruction(INUMBER, f(n1.value));
      nstack.push(item);
    } else if (type === IEXPR) {
      while (nstack.length > 0) {
        newexpression.push(nstack.shift());
      }
      newexpression.push(new Instruction(IEXPR, simplify(item.value, unaryOps, binaryOps, ternaryOps, values)));
    } else if (type === IMEMBER && nstack.length > 0) {
      n1 = nstack.pop();
      nstack.push(new Instruction(INUMBER, n1.value[item.value]));
    } /* else if (type === IARRAY && nstack.length >= item.value) {
      var length = item.value;
      while (length-- > 0) {
        newexpression.push(nstack.pop());
      }
      newexpression.push(new Instruction(IARRAY, item.value));
    } */ else {
      while (nstack.length > 0) {
        newexpression.push(nstack.shift());
      }
      newexpression.push(item);
    }
  }
  while (nstack.length > 0) {
    newexpression.push(nstack.shift());
  }
  return newexpression;
}

function substitute(tokens, variable, expr) {
  var newexpression = [];
  for (var i = 0; i < tokens.length; i++) {
    var item = tokens[i];
    var type = item.type;
    if (type === IVAR && item.value === variable) {
      for (var j = 0; j < expr.tokens.length; j++) {
        var expritem = expr.tokens[j];
        var replitem;
        if (expritem.type === IOP1) {
          replitem = unaryInstruction(expritem.value);
        } else if (expritem.type === IOP2) {
          replitem = binaryInstruction(expritem.value);
        } else if (expritem.type === IOP3) {
          replitem = ternaryInstruction(expritem.value);
        } else {
          replitem = new Instruction(expritem.type, expritem.value);
        }
        newexpression.push(replitem);
      }
    } else if (type === IEXPR) {
      newexpression.push(new Instruction(IEXPR, substitute(item.value, variable, expr)));
    } else {
      newexpression.push(item);
    }
  }
  return newexpression;
}

function evaluate(tokens, expr, values) {
  var nstack = [];
  var n1, n2, n3;
  var f, args, argCount;

  if (isExpressionEvaluator(tokens)) {
    return resolveExpression(tokens, values);
  }

  var numTokens = tokens.length;

  for (var i = 0; i < numTokens; i++) {
    var item = tokens[i];
    var type = item.type;
    if (type === INUMBER || type === IVARNAME) {
      nstack.push(item.value);
    } else if (type === IOP2) {
      n2 = nstack.pop();
      n1 = nstack.pop();
      if (item.value === 'and') {
        nstack.push(n1 ? !!evaluate(n2, expr, values) : false);
      } else if (item.value === 'or') {
        nstack.push(n1 ? true : !!evaluate(n2, expr, values));
      } else if (item.value === '=') {
        f = expr.binaryOps[item.value];
        nstack.push(f(n1, evaluate(n2, expr, values), values));
      } else {
        f = expr.binaryOps[item.value];
        nstack.push(f(resolveExpression(n1, values), resolveExpression(n2, values)));
      }
    } else if (type === IOP3) {
      n3 = nstack.pop();
      n2 = nstack.pop();
      n1 = nstack.pop();
      if (item.value === '?') {
        nstack.push(evaluate(n1 ? n2 : n3, expr, values));
      } else {
        f = expr.ternaryOps[item.value];
        nstack.push(f(resolveExpression(n1, values), resolveExpression(n2, values), resolveExpression(n3, values)));
      }
    } else if (type === IVAR) {
      if (item.value in expr.functions) {
        nstack.push(expr.functions[item.value]);
      } else if (item.value in expr.unaryOps && expr.parser.isOperatorEnabled(item.value)) {
        nstack.push(expr.unaryOps[item.value]);
      } else {
        var v = values[item.value];
        if (v !== undefined) {
          nstack.push(v);
        } else {
          throw new Error('undefined variable: ' + item.value);
        }
      }
    } else if (type === IOP1) {
      n1 = nstack.pop();
      f = expr.unaryOps[item.value];
      nstack.push(f(resolveExpression(n1, values)));
    } else if (type === IFUNCALL) {
      argCount = item.value;
      args = [];
      while (argCount-- > 0) {
        args.unshift(resolveExpression(nstack.pop(), values));
      }
      f = nstack.pop();
      if (f.apply && f.call) {
        nstack.push(f.apply(undefined, args));
      } else {
        throw new Error(f + ' is not a function');
      }
    } else if (type === IFUNDEF) {
      // Create closure to keep references to arguments and expression
      nstack.push((function () {
        var n2 = nstack.pop();
        var args = [];
        var argCount = item.value;
        while (argCount-- > 0) {
          args.unshift(nstack.pop());
        }
        var n1 = nstack.pop();
        var f = function () {
          var scope = Object.assign({}, values);
          for (var i = 0, len = args.length; i < len; i++) {
            scope[args[i]] = arguments[i];
          }
          return evaluate(n2, expr, scope);
        };
        // f.name = n1
        Object.defineProperty(f, 'name', {
          value: n1,
          writable: false
        });
        values[n1] = f;
        return f;
      })());
    } else if (type === IEXPR) {
      nstack.push(createExpressionEvaluator(item, expr));
    } else if (type === IEXPREVAL) {
      nstack.push(item);
    } else if (type === IMEMBER) {
      n1 = nstack.pop();
      nstack.push(n1[item.value]);
    } else if (type === IENDSTATEMENT) {
      nstack.pop();
    } else if (type === IARRAY) {
      argCount = item.value;
      args = [];
      while (argCount-- > 0) {
        args.unshift(nstack.pop());
      }
      nstack.push(args);
    } else {
      throw new Error('invalid Expression');
    }
  }
  if (nstack.length > 1) {
    throw new Error('invalid Expression (parity)');
  }
  // Explicitly return zero to avoid test issues caused by -0
  return nstack[0] === 0 ? 0 : resolveExpression(nstack[0], values);
}

function createExpressionEvaluator(token, expr, values) {
  if (isExpressionEvaluator(token)) return token;
  return {
    type: IEXPREVAL,
    value: function (scope) {
      return evaluate(token.value, expr, scope);
    }
  };
}

function isExpressionEvaluator(n) {
  return n && n.type === IEXPREVAL;
}

function resolveExpression(n, values) {
  return isExpressionEvaluator(n) ? n.value(values) : n;
}

function expressionToString(tokens, toJS) {
  var nstack = [];
  var n1, n2, n3;
  var f, args, argCount;
  for (var i = 0; i < tokens.length; i++) {
    var item = tokens[i];
    var type = item.type;
    if (type === INUMBER) {
      if (typeof item.value === 'number' && item.value < 0) {
        nstack.push('(' + item.value + ')');
      } else if (Array.isArray(item.value)) {
        nstack.push('[' + item.value.map(escapeValue).join(', ') + ']');
      } else {
        nstack.push(escapeValue(item.value));
      }
    } else if (type === IOP2) {
      n2 = nstack.pop();
      n1 = nstack.pop();
      f = item.value;
      if (toJS) {
        if (f === '^') {
          nstack.push('Math.pow(' + n1 + ', ' + n2 + ')');
        } else if (f === 'and') {
          nstack.push('(!!' + n1 + ' && !!' + n2 + ')');
        } else if (f === 'or') {
          nstack.push('(!!' + n1 + ' || !!' + n2 + ')');
        } else if (f === '||') {
          nstack.push('(function(a,b){ return Array.isArray(a) && Array.isArray(b) ? a.concat(b) : String(a) + String(b); }((' + n1 + '),(' + n2 + ')))');
        } else if (f === '==') {
          nstack.push('(' + n1 + ' === ' + n2 + ')');
        } else if (f === '!=') {
          nstack.push('(' + n1 + ' !== ' + n2 + ')');
        } else if (f === '[') {
          nstack.push(n1 + '[(' + n2 + ') | 0]');
        } else {
          nstack.push('(' + n1 + ' ' + f + ' ' + n2 + ')');
        }
      } else {
        if (f === '[') {
          nstack.push(n1 + '[' + n2 + ']');
        } else {
          nstack.push('(' + n1 + ' ' + f + ' ' + n2 + ')');
        }
      }
    } else if (type === IOP3) {
      n3 = nstack.pop();
      n2 = nstack.pop();
      n1 = nstack.pop();
      f = item.value;
      if (f === '?') {
        nstack.push('(' + n1 + ' ? ' + n2 + ' : ' + n3 + ')');
      } else {
        throw new Error('invalid Expression');
      }
    } else if (type === IVAR || type === IVARNAME) {
      nstack.push(item.value);
    } else if (type === IOP1) {
      n1 = nstack.pop();
      f = item.value;
      if (f === '-' || f === '+') {
        nstack.push('(' + f + n1 + ')');
      } else if (toJS) {
        if (f === 'not') {
          nstack.push('(' + '!' + n1 + ')');
        } else if (f === '!') {
          nstack.push('fac(' + n1 + ')');
        } else {
          nstack.push(f + '(' + n1 + ')');
        }
      } else if (f === '!') {
        nstack.push('(' + n1 + '!)');
      } else {
        nstack.push('(' + f + ' ' + n1 + ')');
      }
    } else if (type === IFUNCALL) {
      argCount = item.value;
      args = [];
      while (argCount-- > 0) {
        args.unshift(nstack.pop());
      }
      f = nstack.pop();
      nstack.push(f + '(' + args.join(', ') + ')');
    } else if (type === IFUNDEF) {
      n2 = nstack.pop();
      argCount = item.value;
      args = [];
      while (argCount-- > 0) {
        args.unshift(nstack.pop());
      }
      n1 = nstack.pop();
      if (toJS) {
        nstack.push('(' + n1 + ' = function(' + args.join(', ') + ') { return ' + n2 + ' })');
      } else {
        nstack.push('(' + n1 + '(' + args.join(', ') + ') = ' + n2 + ')');
      }
    } else if (type === IMEMBER) {
      n1 = nstack.pop();
      nstack.push(n1 + '.' + item.value);
    } else if (type === IARRAY) {
      argCount = item.value;
      args = [];
      while (argCount-- > 0) {
        args.unshift(nstack.pop());
      }
      nstack.push('[' + args.join(', ') + ']');
    } else if (type === IEXPR) {
      nstack.push('(' + expressionToString(item.value, toJS) + ')');
    } else if (type === IENDSTATEMENT) ; else {
      throw new Error('invalid Expression');
    }
  }
  if (nstack.length > 1) {
    if (toJS) {
      nstack = [ nstack.join(',') ];
    } else {
      nstack = [ nstack.join(';') ];
    }
  }
  return String(nstack[0]);
}

function escapeValue(v) {
  if (typeof v === 'string') {
    return JSON.stringify(v).replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
  }
  return v;
}

function contains(array, obj) {
  for (var i = 0; i < array.length; i++) {
    if (array[i] === obj) {
      return true;
    }
  }
  return false;
}

function getSymbols(tokens, symbols, options) {
  options = options || {};
  var withMembers = !!options.withMembers;
  var prevVar = null;

  for (var i = 0; i < tokens.length; i++) {
    var item = tokens[i];
    if (item.type === IVAR || item.type === IVARNAME) {
      if (!withMembers && !contains(symbols, item.value)) {
        symbols.push(item.value);
      } else if (prevVar !== null) {
        if (!contains(symbols, prevVar)) {
          symbols.push(prevVar);
        }
        prevVar = item.value;
      } else {
        prevVar = item.value;
      }
    } else if (item.type === IMEMBER && withMembers && prevVar !== null) {
      prevVar += '.' + item.value;
    } else if (item.type === IEXPR) {
      getSymbols(item.value, symbols, options);
    } else if (prevVar !== null) {
      if (!contains(symbols, prevVar)) {
        symbols.push(prevVar);
      }
      prevVar = null;
    }
  }

  if (prevVar !== null && !contains(symbols, prevVar)) {
    symbols.push(prevVar);
  }
}

function Expression(tokens, parser) {
  this.tokens = tokens;
  this.parser = parser;
  this.unaryOps = parser.unaryOps;
  this.binaryOps = parser.binaryOps;
  this.ternaryOps = parser.ternaryOps;
  this.functions = parser.functions;
}

Expression.prototype.simplify = function (values) {
  values = values || {};
  return new Expression(simplify(this.tokens, this.unaryOps, this.binaryOps, this.ternaryOps, values), this.parser);
};

Expression.prototype.substitute = function (variable, expr) {
  if (!(expr instanceof Expression)) {
    expr = this.parser.parse(String(expr));
  }

  return new Expression(substitute(this.tokens, variable, expr), this.parser);
};

Expression.prototype.evaluate = function (values) {
  values = values || {};
  return evaluate(this.tokens, this, values);
};

Expression.prototype.toString = function () {
  return expressionToString(this.tokens, false);
};

Expression.prototype.symbols = function (options) {
  options = options || {};
  var vars = [];
  getSymbols(this.tokens, vars, options);
  return vars;
};

Expression.prototype.variables = function (options) {
  options = options || {};
  var vars = [];
  getSymbols(this.tokens, vars, options);
  var functions = this.functions;
  return vars.filter(function (name) {
    return !(name in functions);
  });
};

Expression.prototype.toJSFunction = function (param, variables) {
  var expr = this;
  var f = new Function(param, 'with(this.functions) with (this.ternaryOps) with (this.binaryOps) with (this.unaryOps) { return ' + expressionToString(this.simplify(variables).tokens, true) + '; }'); // eslint-disable-line no-new-func
  return function () {
    return f.apply(expr, arguments);
  };
};

var TEOF = 'TEOF';
var TOP = 'TOP';
var TNUMBER = 'TNUMBER';
var TSTRING = 'TSTRING';
var TPAREN = 'TPAREN';
var TBRACKET = 'TBRACKET';
var TCOMMA = 'TCOMMA';
var TNAME = 'TNAME';
var TSEMICOLON = 'TSEMICOLON';

function Token(type, value, index) {
  this.type = type;
  this.value = value;
  this.index = index;
}

Token.prototype.toString = function () {
  return this.type + ': ' + this.value;
};

function TokenStream(parser, expression) {
  this.pos = 0;
  this.current = null;
  this.unaryOps = parser.unaryOps;
  this.binaryOps = parser.binaryOps;
  this.ternaryOps = parser.ternaryOps;
  this.consts = parser.consts;
  this.expression = expression;
  this.savedPosition = 0;
  this.savedCurrent = null;
  this.options = parser.options;
  this.parser = parser;
}

TokenStream.prototype.newToken = function (type, value, pos) {
  return new Token(type, value, pos != null ? pos : this.pos);
};

TokenStream.prototype.save = function () {
  this.savedPosition = this.pos;
  this.savedCurrent = this.current;
};

TokenStream.prototype.restore = function () {
  this.pos = this.savedPosition;
  this.current = this.savedCurrent;
};

TokenStream.prototype.next = function () {
  if (this.pos >= this.expression.length) {
    return this.newToken(TEOF, 'EOF');
  }

  if (this.isWhitespace() || this.isComment()) {
    return this.next();
  } else if (this.isRadixInteger() ||
      this.isNumber() ||
      this.isOperator() ||
      this.isString() ||
      this.isParen() ||
      this.isBracket() ||
      this.isComma() ||
      this.isSemicolon() ||
      this.isNamedOp() ||
      this.isConst() ||
      this.isName()) {
    return this.current;
  } else {
    this.parseError('Unknown character "' + this.expression.charAt(this.pos) + '"');
  }
};

TokenStream.prototype.isString = function () {
  var r = false;
  var startPos = this.pos;
  var quote = this.expression.charAt(startPos);

  if (quote === '\'' || quote === '"') {
    var index = this.expression.indexOf(quote, startPos + 1);
    while (index >= 0 && this.pos < this.expression.length) {
      this.pos = index + 1;
      if (this.expression.charAt(index - 1) !== '\\') {
        var rawString = this.expression.substring(startPos + 1, index);
        this.current = this.newToken(TSTRING, this.unescape(rawString), startPos);
        r = true;
        break;
      }
      index = this.expression.indexOf(quote, index + 1);
    }
  }
  return r;
};

TokenStream.prototype.isParen = function () {
  var c = this.expression.charAt(this.pos);
  if (c === '(' || c === ')') {
    this.current = this.newToken(TPAREN, c);
    this.pos++;
    return true;
  }
  return false;
};

TokenStream.prototype.isBracket = function () {
  var c = this.expression.charAt(this.pos);
  if ((c === '[' || c === ']') && this.isOperatorEnabled('[')) {
    this.current = this.newToken(TBRACKET, c);
    this.pos++;
    return true;
  }
  return false;
};

TokenStream.prototype.isComma = function () {
  var c = this.expression.charAt(this.pos);
  if (c === ',') {
    this.current = this.newToken(TCOMMA, ',');
    this.pos++;
    return true;
  }
  return false;
};

TokenStream.prototype.isSemicolon = function () {
  var c = this.expression.charAt(this.pos);
  if (c === ';') {
    this.current = this.newToken(TSEMICOLON, ';');
    this.pos++;
    return true;
  }
  return false;
};

TokenStream.prototype.isConst = function () {
  var startPos = this.pos;
  var i = startPos;
  for (; i < this.expression.length; i++) {
    var c = this.expression.charAt(i);
    if (c.toUpperCase() === c.toLowerCase()) {
      if (i === this.pos || (c !== '_' && c !== '.' && (c < '0' || c > '9'))) {
        break;
      }
    }
  }
  if (i > startPos) {
    var str = this.expression.substring(startPos, i);
    if (str in this.consts) {
      this.current = this.newToken(TNUMBER, this.consts[str]);
      this.pos += str.length;
      return true;
    }
  }
  return false;
};

TokenStream.prototype.isNamedOp = function () {
  var startPos = this.pos;
  var i = startPos;
  for (; i < this.expression.length; i++) {
    var c = this.expression.charAt(i);
    if (c.toUpperCase() === c.toLowerCase()) {
      if (i === this.pos || (c !== '_' && (c < '0' || c > '9'))) {
        break;
      }
    }
  }
  if (i > startPos) {
    var str = this.expression.substring(startPos, i);
    if (this.isOperatorEnabled(str) && (str in this.binaryOps || str in this.unaryOps || str in this.ternaryOps)) {
      this.current = this.newToken(TOP, str);
      this.pos += str.length;
      return true;
    }
  }
  return false;
};

TokenStream.prototype.isName = function () {
  var startPos = this.pos;
  var i = startPos;
  var hasLetter = false;
  for (; i < this.expression.length; i++) {
    var c = this.expression.charAt(i);
    if (c.toUpperCase() === c.toLowerCase()) {
      if (i === this.pos && (c === '$' || c === '_')) {
        if (c === '_') {
          hasLetter = true;
        }
        continue;
      } else if (i === this.pos || !hasLetter || (c !== '_' && (c < '0' || c > '9'))) {
        break;
      }
    } else {
      hasLetter = true;
    }
  }
  if (hasLetter) {
    var str = this.expression.substring(startPos, i);
    this.current = this.newToken(TNAME, str);
    this.pos += str.length;
    return true;
  }
  return false;
};

TokenStream.prototype.isWhitespace = function () {
  var r = false;
  var c = this.expression.charAt(this.pos);
  while (c === ' ' || c === '\t' || c === '\n' || c === '\r') {
    r = true;
    this.pos++;
    if (this.pos >= this.expression.length) {
      break;
    }
    c = this.expression.charAt(this.pos);
  }
  return r;
};

var codePointPattern = /^[0-9a-f]{4}$/i;

TokenStream.prototype.unescape = function (v) {
  var index = v.indexOf('\\');
  if (index < 0) {
    return v;
  }

  var buffer = v.substring(0, index);
  while (index >= 0) {
    var c = v.charAt(++index);
    switch (c) {
      case '\'':
        buffer += '\'';
        break;
      case '"':
        buffer += '"';
        break;
      case '\\':
        buffer += '\\';
        break;
      case '/':
        buffer += '/';
        break;
      case 'b':
        buffer += '\b';
        break;
      case 'f':
        buffer += '\f';
        break;
      case 'n':
        buffer += '\n';
        break;
      case 'r':
        buffer += '\r';
        break;
      case 't':
        buffer += '\t';
        break;
      case 'u':
        // interpret the following 4 characters as the hex of the unicode code point
        var codePoint = v.substring(index + 1, index + 5);
        if (!codePointPattern.test(codePoint)) {
          this.parseError('Illegal escape sequence: \\u' + codePoint);
        }
        buffer += String.fromCharCode(parseInt(codePoint, 16));
        index += 4;
        break;
      default:
        throw this.parseError('Illegal escape sequence: "\\' + c + '"');
    }
    ++index;
    var backslash = v.indexOf('\\', index);
    buffer += v.substring(index, backslash < 0 ? v.length : backslash);
    index = backslash;
  }

  return buffer;
};

TokenStream.prototype.isComment = function () {
  var c = this.expression.charAt(this.pos);
  if (c === '/' && this.expression.charAt(this.pos + 1) === '*') {
    this.pos = this.expression.indexOf('*/', this.pos) + 2;
    if (this.pos === 1) {
      this.pos = this.expression.length;
    }
    return true;
  }
  return false;
};

TokenStream.prototype.isRadixInteger = function () {
  var pos = this.pos;

  if (pos >= this.expression.length - 2 || this.expression.charAt(pos) !== '0') {
    return false;
  }
  ++pos;

  var radix;
  var validDigit;
  if (this.expression.charAt(pos) === 'x') {
    radix = 16;
    validDigit = /^[0-9a-f]$/i;
    ++pos;
  } else if (this.expression.charAt(pos) === 'b') {
    radix = 2;
    validDigit = /^[01]$/i;
    ++pos;
  } else {
    return false;
  }

  var valid = false;
  var startPos = pos;

  while (pos < this.expression.length) {
    var c = this.expression.charAt(pos);
    if (validDigit.test(c)) {
      pos++;
      valid = true;
    } else {
      break;
    }
  }

  if (valid) {
    this.current = this.newToken(TNUMBER, parseInt(this.expression.substring(startPos, pos), radix));
    this.pos = pos;
  }
  return valid;
};

TokenStream.prototype.isNumber = function () {
  var valid = false;
  var pos = this.pos;
  var startPos = pos;
  var resetPos = pos;
  var foundDot = false;
  var foundDigits = false;
  var c;

  while (pos < this.expression.length) {
    c = this.expression.charAt(pos);
    if ((c >= '0' && c <= '9') || (!foundDot && c === '.')) {
      if (c === '.') {
        foundDot = true;
      } else {
        foundDigits = true;
      }
      pos++;
      valid = foundDigits;
    } else {
      break;
    }
  }

  if (valid) {
    resetPos = pos;
  }

  if (c === 'e' || c === 'E') {
    pos++;
    var acceptSign = true;
    var validExponent = false;
    while (pos < this.expression.length) {
      c = this.expression.charAt(pos);
      if (acceptSign && (c === '+' || c === '-')) {
        acceptSign = false;
      } else if (c >= '0' && c <= '9') {
        validExponent = true;
        acceptSign = false;
      } else {
        break;
      }
      pos++;
    }

    if (!validExponent) {
      pos = resetPos;
    }
  }

  if (valid) {
    this.current = this.newToken(TNUMBER, parseFloat(this.expression.substring(startPos, pos)));
    this.pos = pos;
  } else {
    this.pos = resetPos;
  }
  return valid;
};

TokenStream.prototype.isOperator = function () {
  var startPos = this.pos;
  var c = this.expression.charAt(this.pos);

  if (c === '+' || c === '-' || c === '*' || c === '/' || c === '%' || c === '^' || c === '?' || c === ':' || c === '.') {
    this.current = this.newToken(TOP, c);
  } else if (c === '∙' || c === '•') {
    this.current = this.newToken(TOP, '*');
  } else if (c === '>') {
    if (this.expression.charAt(this.pos + 1) === '=') {
      this.current = this.newToken(TOP, '>=');
      this.pos++;
    } else {
      this.current = this.newToken(TOP, '>');
    }
  } else if (c === '<') {
    if (this.expression.charAt(this.pos + 1) === '=') {
      this.current = this.newToken(TOP, '<=');
      this.pos++;
    } else {
      this.current = this.newToken(TOP, '<');
    }
  } else if (c === '|') {
    if (this.expression.charAt(this.pos + 1) === '|') {
      this.current = this.newToken(TOP, '||');
      this.pos++;
    } else {
      return false;
    }
  } else if (c === '=') {
    if (this.expression.charAt(this.pos + 1) === '=') {
      this.current = this.newToken(TOP, '==');
      this.pos++;
    } else {
      this.current = this.newToken(TOP, c);
    }
  } else if (c === '!') {
    if (this.expression.charAt(this.pos + 1) === '=') {
      this.current = this.newToken(TOP, '!=');
      this.pos++;
    } else {
      this.current = this.newToken(TOP, c);
    }
  } else {
    return false;
  }
  this.pos++;

  if (this.isOperatorEnabled(this.current.value)) {
    return true;
  } else {
    this.pos = startPos;
    return false;
  }
};

TokenStream.prototype.isOperatorEnabled = function (op) {
  return this.parser.isOperatorEnabled(op);
};

TokenStream.prototype.getCoordinates = function () {
  var line = 0;
  var column;
  var newline = -1;
  do {
    line++;
    column = this.pos - newline;
    newline = this.expression.indexOf('\n', newline + 1);
  } while (newline >= 0 && newline < this.pos);

  return {
    line: line,
    column: column
  };
};

TokenStream.prototype.parseError = function (msg) {
  var coords = this.getCoordinates();
  throw new Error('parse error [' + coords.line + ':' + coords.column + ']: ' + msg);
};

function ParserState(parser, tokenStream, options) {
  this.parser = parser;
  this.tokens = tokenStream;
  this.current = null;
  this.nextToken = null;
  this.next();
  this.savedCurrent = null;
  this.savedNextToken = null;
  this.allowMemberAccess = options.allowMemberAccess !== false;
}

ParserState.prototype.next = function () {
  this.current = this.nextToken;
  return (this.nextToken = this.tokens.next());
};

ParserState.prototype.tokenMatches = function (token, value) {
  if (typeof value === 'undefined') {
    return true;
  } else if (Array.isArray(value)) {
    return contains(value, token.value);
  } else if (typeof value === 'function') {
    return value(token);
  } else {
    return token.value === value;
  }
};

ParserState.prototype.save = function () {
  this.savedCurrent = this.current;
  this.savedNextToken = this.nextToken;
  this.tokens.save();
};

ParserState.prototype.restore = function () {
  this.tokens.restore();
  this.current = this.savedCurrent;
  this.nextToken = this.savedNextToken;
};

ParserState.prototype.accept = function (type, value) {
  if (this.nextToken.type === type && this.tokenMatches(this.nextToken, value)) {
    this.next();
    return true;
  }
  return false;
};

ParserState.prototype.expect = function (type, value) {
  if (!this.accept(type, value)) {
    var coords = this.tokens.getCoordinates();
    throw new Error('parse error [' + coords.line + ':' + coords.column + ']: Expected ' + (value || type));
  }
};

ParserState.prototype.parseAtom = function (instr) {
  var unaryOps = this.tokens.unaryOps;
  function isPrefixOperator(token) {
    return token.value in unaryOps;
  }

  if (this.accept(TNAME) || this.accept(TOP, isPrefixOperator)) {
    instr.push(new Instruction(IVAR, this.current.value));
  } else if (this.accept(TNUMBER)) {
    instr.push(new Instruction(INUMBER, this.current.value));
  } else if (this.accept(TSTRING)) {
    instr.push(new Instruction(INUMBER, this.current.value));
  } else if (this.accept(TPAREN, '(')) {
    this.parseExpression(instr);
    this.expect(TPAREN, ')');
  } else if (this.accept(TBRACKET, '[')) {
    if (this.accept(TBRACKET, ']')) {
      instr.push(new Instruction(IARRAY, 0));
    } else {
      var argCount = this.parseArrayList(instr);
      instr.push(new Instruction(IARRAY, argCount));
    }
  } else {
    throw new Error('unexpected ' + this.nextToken);
  }
};

ParserState.prototype.parseExpression = function (instr) {
  var exprInstr = [];
  if (this.parseUntilEndStatement(instr, exprInstr)) {
    return;
  }
  this.parseVariableAssignmentExpression(exprInstr);
  if (this.parseUntilEndStatement(instr, exprInstr)) {
    return;
  }
  this.pushExpression(instr, exprInstr);
};

ParserState.prototype.pushExpression = function (instr, exprInstr) {
  for (var i = 0, len = exprInstr.length; i < len; i++) {
    instr.push(exprInstr[i]);
  }
};

ParserState.prototype.parseUntilEndStatement = function (instr, exprInstr) {
  if (!this.accept(TSEMICOLON)) return false;
  if (this.nextToken && this.nextToken.type !== TEOF && !(this.nextToken.type === TPAREN && this.nextToken.value === ')')) {
    exprInstr.push(new Instruction(IENDSTATEMENT));
  }
  if (this.nextToken.type !== TEOF) {
    this.parseExpression(exprInstr);
  }
  instr.push(new Instruction(IEXPR, exprInstr));
  return true;
};

ParserState.prototype.parseArrayList = function (instr) {
  var argCount = 0;

  while (!this.accept(TBRACKET, ']')) {
    this.parseExpression(instr);
    ++argCount;
    while (this.accept(TCOMMA)) {
      this.parseExpression(instr);
      ++argCount;
    }
  }

  return argCount;
};

ParserState.prototype.parseVariableAssignmentExpression = function (instr) {
  this.parseConditionalExpression(instr);
  while (this.accept(TOP, '=')) {
    var varName = instr.pop();
    var varValue = [];
    var lastInstrIndex = instr.length - 1;
    if (varName.type === IFUNCALL) {
      if (!this.tokens.isOperatorEnabled('()=')) {
        throw new Error('function definition is not permitted');
      }
      for (var i = 0, len = varName.value + 1; i < len; i++) {
        var index = lastInstrIndex - i;
        if (instr[index].type === IVAR) {
          instr[index] = new Instruction(IVARNAME, instr[index].value);
        }
      }
      this.parseVariableAssignmentExpression(varValue);
      instr.push(new Instruction(IEXPR, varValue));
      instr.push(new Instruction(IFUNDEF, varName.value));
      continue;
    }
    if (varName.type !== IVAR && varName.type !== IMEMBER) {
      throw new Error('expected variable for assignment');
    }
    this.parseVariableAssignmentExpression(varValue);
    instr.push(new Instruction(IVARNAME, varName.value));
    instr.push(new Instruction(IEXPR, varValue));
    instr.push(binaryInstruction('='));
  }
};

ParserState.prototype.parseConditionalExpression = function (instr) {
  this.parseOrExpression(instr);
  while (this.accept(TOP, '?')) {
    var trueBranch = [];
    var falseBranch = [];
    this.parseConditionalExpression(trueBranch);
    this.expect(TOP, ':');
    this.parseConditionalExpression(falseBranch);
    instr.push(new Instruction(IEXPR, trueBranch));
    instr.push(new Instruction(IEXPR, falseBranch));
    instr.push(ternaryInstruction('?'));
  }
};

ParserState.prototype.parseOrExpression = function (instr) {
  this.parseAndExpression(instr);
  while (this.accept(TOP, 'or')) {
    var falseBranch = [];
    this.parseAndExpression(falseBranch);
    instr.push(new Instruction(IEXPR, falseBranch));
    instr.push(binaryInstruction('or'));
  }
};

ParserState.prototype.parseAndExpression = function (instr) {
  this.parseComparison(instr);
  while (this.accept(TOP, 'and')) {
    var trueBranch = [];
    this.parseComparison(trueBranch);
    instr.push(new Instruction(IEXPR, trueBranch));
    instr.push(binaryInstruction('and'));
  }
};

var COMPARISON_OPERATORS = ['==', '!=', '<', '<=', '>=', '>', 'in'];

ParserState.prototype.parseComparison = function (instr) {
  this.parseAddSub(instr);
  while (this.accept(TOP, COMPARISON_OPERATORS)) {
    var op = this.current;
    this.parseAddSub(instr);
    instr.push(binaryInstruction(op.value));
  }
};

var ADD_SUB_OPERATORS = ['+', '-', '||'];

ParserState.prototype.parseAddSub = function (instr) {
  this.parseTerm(instr);
  while (this.accept(TOP, ADD_SUB_OPERATORS)) {
    var op = this.current;
    this.parseTerm(instr);
    instr.push(binaryInstruction(op.value));
  }
};

var TERM_OPERATORS = ['*', '/', '%'];

ParserState.prototype.parseTerm = function (instr) {
  this.parseFactor(instr);
  while (this.accept(TOP, TERM_OPERATORS)) {
    var op = this.current;
    this.parseFactor(instr);
    instr.push(binaryInstruction(op.value));
  }
};

ParserState.prototype.parseFactor = function (instr) {
  var unaryOps = this.tokens.unaryOps;
  function isPrefixOperator(token) {
    return token.value in unaryOps;
  }

  this.save();
  if (this.accept(TOP, isPrefixOperator)) {
    if (this.current.value !== '-' && this.current.value !== '+') {
      if (this.nextToken.type === TPAREN && this.nextToken.value === '(') {
        this.restore();
        this.parseExponential(instr);
        return;
      } else if (this.nextToken.type === TSEMICOLON || this.nextToken.type === TCOMMA || this.nextToken.type === TEOF || (this.nextToken.type === TPAREN && this.nextToken.value === ')')) {
        this.restore();
        this.parseAtom(instr);
        return;
      }
    }

    var op = this.current;
    this.parseFactor(instr);
    instr.push(unaryInstruction(op.value));
  } else {
    this.parseExponential(instr);
  }
};

ParserState.prototype.parseExponential = function (instr) {
  this.parsePostfixExpression(instr);
  while (this.accept(TOP, '^')) {
    this.parseFactor(instr);
    instr.push(binaryInstruction('^'));
  }
};

ParserState.prototype.parsePostfixExpression = function (instr) {
  this.parseFunctionCall(instr);
  while (this.accept(TOP, '!')) {
    instr.push(unaryInstruction('!'));
  }
};

ParserState.prototype.parseFunctionCall = function (instr) {
  var unaryOps = this.tokens.unaryOps;
  function isPrefixOperator(token) {
    return token.value in unaryOps;
  }

  if (this.accept(TOP, isPrefixOperator)) {
    var op = this.current;
    this.parseAtom(instr);
    instr.push(unaryInstruction(op.value));
  } else {
    this.parseMemberExpression(instr);
    while (this.accept(TPAREN, '(')) {
      if (this.accept(TPAREN, ')')) {
        instr.push(new Instruction(IFUNCALL, 0));
      } else {
        var argCount = this.parseArgumentList(instr);
        instr.push(new Instruction(IFUNCALL, argCount));
      }
    }
  }
};

ParserState.prototype.parseArgumentList = function (instr) {
  var argCount = 0;

  while (!this.accept(TPAREN, ')')) {
    this.parseExpression(instr);
    ++argCount;
    while (this.accept(TCOMMA)) {
      this.parseExpression(instr);
      ++argCount;
    }
  }

  return argCount;
};

ParserState.prototype.parseMemberExpression = function (instr) {
  this.parseAtom(instr);
  while (this.accept(TOP, '.') || this.accept(TBRACKET, '[')) {
    var op = this.current;

    if (op.value === '.') {
      if (!this.allowMemberAccess) {
        throw new Error('unexpected ".", member access is not permitted');
      }

      this.expect(TNAME);
      instr.push(new Instruction(IMEMBER, this.current.value));
    } else if (op.value === '[') {
      if (!this.tokens.isOperatorEnabled('[')) {
        throw new Error('unexpected "[]", arrays are disabled');
      }

      this.parseExpression(instr);
      this.expect(TBRACKET, ']');
      instr.push(binaryInstruction('['));
    } else {
      throw new Error('unexpected symbol: ' + op.value);
    }
  }
};

function add(a, b) {
  return Number(a) + Number(b);
}

function sub(a, b) {
  return a - b;
}

function mul(a, b) {
  return a * b;
}

function div(a, b) {
  return a / b;
}

function mod(a, b) {
  return a % b;
}

function concat(a, b) {
  if (Array.isArray(a) && Array.isArray(b)) {
    return a.concat(b);
  }
  return '' + a + b;
}

function equal(a, b) {
  return a === b;
}

function notEqual(a, b) {
  return a !== b;
}

function greaterThan(a, b) {
  return a > b;
}

function lessThan(a, b) {
  return a < b;
}

function greaterThanEqual(a, b) {
  return a >= b;
}

function lessThanEqual(a, b) {
  return a <= b;
}

function andOperator(a, b) {
  return Boolean(a && b);
}

function orOperator(a, b) {
  return Boolean(a || b);
}

function inOperator(a, b) {
  return contains(b, a);
}

function sinh(a) {
  return ((Math.exp(a) - Math.exp(-a)) / 2);
}

function cosh(a) {
  return ((Math.exp(a) + Math.exp(-a)) / 2);
}

function tanh(a) {
  if (a === Infinity) return 1;
  if (a === -Infinity) return -1;
  return (Math.exp(a) - Math.exp(-a)) / (Math.exp(a) + Math.exp(-a));
}

function asinh(a) {
  if (a === -Infinity) return a;
  return Math.log(a + Math.sqrt((a * a) + 1));
}

function acosh(a) {
  return Math.log(a + Math.sqrt((a * a) - 1));
}

function atanh(a) {
  return (Math.log((1 + a) / (1 - a)) / 2);
}

function log10(a) {
  return Math.log(a) * Math.LOG10E;
}

function neg(a) {
  return -a;
}

function not(a) {
  return !a;
}

function trunc(a) {
  return a < 0 ? Math.ceil(a) : Math.floor(a);
}

function random(a) {
  return Math.random() * (a || 1);
}

function factorial(a) { // a!
  return gamma(a + 1);
}

function isInteger(value) {
  return isFinite(value) && (value === Math.round(value));
}

var GAMMA_G = 4.7421875;
var GAMMA_P = [
  0.99999999999999709182,
  57.156235665862923517, -59.597960355475491248,
  14.136097974741747174, -0.49191381609762019978,
  0.33994649984811888699e-4,
  0.46523628927048575665e-4, -0.98374475304879564677e-4,
  0.15808870322491248884e-3, -0.21026444172410488319e-3,
  0.21743961811521264320e-3, -0.16431810653676389022e-3,
  0.84418223983852743293e-4, -0.26190838401581408670e-4,
  0.36899182659531622704e-5
];

// Gamma function from math.js
function gamma(n) {
  var t, x;

  if (isInteger(n)) {
    if (n <= 0) {
      return isFinite(n) ? Infinity : NaN;
    }

    if (n > 171) {
      return Infinity; // Will overflow
    }

    var value = n - 2;
    var res = n - 1;
    while (value > 1) {
      res *= value;
      value--;
    }

    if (res === 0) {
      res = 1; // 0! is per definition 1
    }

    return res;
  }

  if (n < 0.5) {
    return Math.PI / (Math.sin(Math.PI * n) * gamma(1 - n));
  }

  if (n >= 171.35) {
    return Infinity; // will overflow
  }

  if (n > 85.0) { // Extended Stirling Approx
    var twoN = n * n;
    var threeN = twoN * n;
    var fourN = threeN * n;
    var fiveN = fourN * n;
    return Math.sqrt(2 * Math.PI / n) * Math.pow((n / Math.E), n) *
      (1 + (1 / (12 * n)) + (1 / (288 * twoN)) - (139 / (51840 * threeN)) -
      (571 / (2488320 * fourN)) + (163879 / (209018880 * fiveN)) +
      (5246819 / (75246796800 * fiveN * n)));
  }

  --n;
  x = GAMMA_P[0];
  for (var i = 1; i < GAMMA_P.length; ++i) {
    x += GAMMA_P[i] / (n + i);
  }

  t = n + GAMMA_G + 0.5;
  return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
}

function stringOrArrayLength(s) {
  if (Array.isArray(s)) {
    return s.length;
  }
  return String(s).length;
}

function hypot() {
  var sum = 0;
  var larg = 0;
  for (var i = 0; i < arguments.length; i++) {
    var arg = Math.abs(arguments[i]);
    var div;
    if (larg < arg) {
      div = larg / arg;
      sum = (sum * div * div) + 1;
      larg = arg;
    } else if (arg > 0) {
      div = arg / larg;
      sum += div * div;
    } else {
      sum += arg;
    }
  }
  return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
}

function condition(cond, yep, nope) {
  return cond ? yep : nope;
}

/**
* Decimal adjustment of a number.
* From @escopecz.
*
* @param {Number} value The number.
* @param {Integer} exp  The exponent (the 10 logarithm of the adjustment base).
* @return {Number} The adjusted value.
*/
function roundTo(value, exp) {
  // If the exp is undefined or zero...
  if (typeof exp === 'undefined' || +exp === 0) {
    return Math.round(value);
  }
  value = +value;
  exp = -(+exp);
  // If the value is not a number or the exp is not an integer...
  if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
    return NaN;
  }
  // Shift
  value = value.toString().split('e');
  value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));
  // Shift back
  value = value.toString().split('e');
  return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));
}

function setVar(name, value, variables) {
  if (variables) variables[name] = value;
  return value;
}

function arrayIndex(array, index) {
  return array[index | 0];
}

function max(array) {
  if (arguments.length === 1 && Array.isArray(array)) {
    return Math.max.apply(Math, array);
  } else {
    return Math.max.apply(Math, arguments);
  }
}

function min$1(array) {
  if (arguments.length === 1 && Array.isArray(array)) {
    return Math.min.apply(Math, array);
  } else {
    return Math.min.apply(Math, arguments);
  }
}

function arrayMap$1(f, a) {
  if (typeof f !== 'function') {
    throw new Error('First argument to map is not a function');
  }
  if (!Array.isArray(a)) {
    throw new Error('Second argument to map is not an array');
  }
  return a.map(function (x, i) {
    return f(x, i);
  });
}

function arrayFold(f, init, a) {
  if (typeof f !== 'function') {
    throw new Error('First argument to fold is not a function');
  }
  if (!Array.isArray(a)) {
    throw new Error('Second argument to fold is not an array');
  }
  return a.reduce(function (acc, x, i) {
    return f(acc, x, i);
  }, init);
}

function arrayFilter(f, a) {
  if (typeof f !== 'function') {
    throw new Error('First argument to filter is not a function');
  }
  if (!Array.isArray(a)) {
    throw new Error('Second argument to filter is not an array');
  }
  return a.filter(function (x, i) {
    return f(x, i);
  });
}

function stringOrArrayIndexOf(target, s) {
  if (!(Array.isArray(s) || typeof s === 'string')) {
    throw new Error('Second argument to indexOf is not a string or array');
  }

  return s.indexOf(target);
}

function arrayJoin(sep, a) {
  if (!Array.isArray(a)) {
    throw new Error('Second argument to join is not an array');
  }

  return a.join(sep);
}

function sign(x) {
  return ((x > 0) - (x < 0)) || +x;
}

var ONE_THIRD = 1/3;
function cbrt(x) {
  return x < 0 ? -Math.pow(-x, ONE_THIRD) : Math.pow(x, ONE_THIRD);
}

function expm1(x) {
  return Math.exp(x) - 1;
}

function log1p(x) {
  return Math.log(1 + x);
}

function log2(x) {
  return Math.log(x) / Math.LN2;
}

function Parser(options) {
  this.options = options || {};
  this.unaryOps = {
    sin: Math.sin,
    cos: Math.cos,
    tan: Math.tan,
    asin: Math.asin,
    acos: Math.acos,
    atan: Math.atan,
    sinh: Math.sinh || sinh,
    cosh: Math.cosh || cosh,
    tanh: Math.tanh || tanh,
    asinh: Math.asinh || asinh,
    acosh: Math.acosh || acosh,
    atanh: Math.atanh || atanh,
    sqrt: Math.sqrt,
    cbrt: Math.cbrt || cbrt,
    log: Math.log,
    log2: Math.log2 || log2,
    ln: Math.log,
    lg: Math.log10 || log10,
    log10: Math.log10 || log10,
    expm1: Math.expm1 || expm1,
    log1p: Math.log1p || log1p,
    abs: Math.abs,
    ceil: Math.ceil,
    floor: Math.floor,
    round: Math.round,
    trunc: Math.trunc || trunc,
    '-': neg,
    '+': Number,
    exp: Math.exp,
    not: not,
    length: stringOrArrayLength,
    '!': factorial,
    sign: Math.sign || sign
  };

  this.binaryOps = {
    '+': add,
    '-': sub,
    '*': mul,
    '/': div,
    '%': mod,
    '^': Math.pow,
    '||': concat,
    '==': equal,
    '!=': notEqual,
    '>': greaterThan,
    '<': lessThan,
    '>=': greaterThanEqual,
    '<=': lessThanEqual,
    and: andOperator,
    or: orOperator,
    'in': inOperator,
    '=': setVar,
    '[': arrayIndex
  };

  this.ternaryOps = {
    '?': condition
  };

  this.functions = {
    random: random,
    fac: factorial,
    min: min$1,
    max: max,
    hypot: Math.hypot || hypot,
    pyt: Math.hypot || hypot, // backward compat
    pow: Math.pow,
    atan2: Math.atan2,
    'if': condition,
    gamma: gamma,
    roundTo: roundTo,
    map: arrayMap$1,
    fold: arrayFold,
    filter: arrayFilter,
    indexOf: stringOrArrayIndexOf,
    join: arrayJoin
  };

  this.consts = {
    E: Math.E,
    PI: Math.PI,
    'true': true,
    'false': false
  };
}

Parser.prototype.parse = function (expr) {
  var instr = [];
  var parserState = new ParserState(
    this,
    new TokenStream(this, expr),
    { allowMemberAccess: this.options.allowMemberAccess }
  );

  parserState.parseExpression(instr);
  parserState.expect(TEOF, 'EOF');

  return new Expression(instr, this);
};

Parser.prototype.evaluate = function (expr, variables) {
  return this.parse(expr).evaluate(variables);
};

var sharedParser = new Parser();

Parser.parse = function (expr) {
  return sharedParser.parse(expr);
};

Parser.evaluate = function (expr, variables) {
  return sharedParser.parse(expr).evaluate(variables);
};

var optionNameMap = {
  '+': 'add',
  '-': 'subtract',
  '*': 'multiply',
  '/': 'divide',
  '%': 'remainder',
  '^': 'power',
  '!': 'factorial',
  '<': 'comparison',
  '>': 'comparison',
  '<=': 'comparison',
  '>=': 'comparison',
  '==': 'comparison',
  '!=': 'comparison',
  '||': 'concatenate',
  'and': 'logical',
  'or': 'logical',
  'not': 'logical',
  '?': 'conditional',
  ':': 'conditional',
  '=': 'assignment',
  '[': 'array',
  '()=': 'fndef'
};

function getOptionName(op) {
  return optionNameMap.hasOwnProperty(op) ? optionNameMap[op] : op;
}

Parser.prototype.isOperatorEnabled = function (op) {
  var optionName = getOptionName(op);
  var operators = this.options.operators || {};

  return !(optionName in operators) || !!operators[optionName];
};

class expression {
  constructor(_ref, config$, form$) {
    var _this = this;
    var {
      functions,
      consts
    } = _ref;
    _defineProperty$2(this, "parser", void 0);
    _defineProperty$2(this, "regex", /{(.+?)}|\\({.+?})/g);
    _defineProperty$2(this, "config$", void 0);
    _defineProperty$2(this, "form$", void 0);
    _defineProperty$2(this, "moment", void 0);
    _defineProperty$2(this, "lastParsed", void 0);
    this.config$ = config$;
    this.form$ = form$;
    this.moment = this.config$.value.services.moment;
    this.parser = new Parser({
      operators: {
        logical: true,
        comparison: true,
        in: true,
        assignment: false
      }
    });
    Object.keys(this.parser.functions).forEach(func => {
      delete this.parser.functions[func];
    });
    this.parser.functions.NOT = a => !a;
    this.parser.functions.EMPTY = v => Array.isArray(v) ? !v.length : v === '' || v === null || v === undefined;
    this.parser.functions.NOT_EMPTY = v => Array.isArray(v) ? !!v.length : v !== '' && v !== null && v !== undefined;
    this.parser.functions.SUM = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _this.sum(args);
    };
    this.parser.functions.AVG = function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      var values = _this.flatten(args, '').filter(v => v !== '');
      if (!values.length) {
        return 0;
      }
      return _this.sum(args) / values.length;
    };
    this.parser.functions.MIN = function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      var values = _this.flatten(args, '').filter(v => v !== '');
      if (!values.length) {
        return 0;
      }
      return values.sort((a, b) => a - b)[0];
    };
    this.parser.functions.MAX = function () {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      var values = _this.flatten(args, '').filter(v => v !== '');
      if (!values.length) {
        return 0;
      }
      return values.sort((a, b) => b - a)[0];
    };
    this.parser.functions.ROUND = (value, places) => {
      var num = Number(value);
      if (isNaN(num)) {
        return 0;
      }
      return Number(num.toFixed(places));
    };
    this.parser.functions.COUNT = function () {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      var values = _this.flatten(args, '').filter(v => v !== '');
      return values.length;
    };
    this.parser.functions.AGE = value => {
      var date = this.date(value);
      return date.isValid() ? this.moment().diff(date, 'years') : '';
    };
    this.parser.functions.TODAY = () => {
      return this.moment().format('YYYY-MM-DD');
    };
    this.parser.functions.NOW = () => {
      return this.moment().toISOString();
    };
    this.parser.functions.DATE_ADD = (value, toAdd, interval) => {
      var date = this.date(value);
      return date.clone().add(toAdd, interval).toISOString();
    };
    this.parser.functions.FORMAT_DATE = (value, format) => {
      return this.date(value).format(format);
    };
    this.parser.functions.DISPLAY_VALUE = (value, path) => {
      var el$ = this.form$.value.el$(path);
      if (!el$) {
        return '';
      }
      var translate = v => {
        var _el$$resolvedOptions;
        return localize(((_el$$resolvedOptions = el$.resolvedOptions) === null || _el$$resolvedOptions === void 0 || (_el$$resolvedOptions = _el$$resolvedOptions.find(o => o.value === v)) === null || _el$$resolvedOptions === void 0 ? void 0 : _el$$resolvedOptions.label) || '', this.config$.value, this.form$.value);
      };
      return Array.isArray(value) ? value.map(translate).join(', ') : translate(value);
    };
    this.parser.functions.AVAILABLE = path => {
      var el$ = this.form$.value.el$(path);
      if (!el$) {
        return false;
      }
      return el$.available;
    };
    Object.entries(functions || {}).forEach(_ref2 => {
      var [name, func] = _ref2;
      var result;
      try {
        result = func();
      } catch (_unused) {}
      this.parser.functions[name] = typeof result === 'function' ? func(this.form$.value) : func;
    });
    Object.entries(consts || {}).forEach(_ref3 => {
      var [name, con] = _ref3;
      this.parser.consts[name] = con;
    });
    Object.keys(this.parser.functions).forEach(func => {
      this.parser.functions[func].toString = () => func;
    });
  }
  flatten(args) {
    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return args.reduce((prev, curr) => {
      var value = Array.isArray(curr) ? curr.reduce((p, c) => {
        return p.concat(isNaN(Number(c)) || c === null || c === undefined || c === '' ? defaultValue : Number(c));
      }, []) : [isNaN(Number(curr)) || curr === null || curr === undefined || curr === '' ? defaultValue : Number(curr)];
      return prev.concat(value);
    }, []);
  }
  sum(args) {
    return this.flatten(args).reduce((p, c) => p + (isNaN(parseInt(c)) ? 0 : parseInt(c)), 0);
  }
  date(value) {
    return this.moment(value, [this.moment.ISO_8601, 'YYYY-MM-DD', 'MM/DD/YYYY', 'DD/MM/YYYY', 'DD.MM.YYYY', 'YYYY/MM/DD', 'DD MMM YYYY', 'MMM DD, YYYY', 'YYYY-MM-DD HH:mm:ss', 'MM/DD/YYYY hh:mm A', 'DD.MM.YYYY HH:mm', 'DD/MM/YYYY HH:mm:ss', 'YYYY/MM/DD HH:mm:ss', 'ddd, DD MMM YYYY HH:mm:ss Z'], true);
  }
  resolve(exp, data, dataPath) {
    return exp.replace(this.regex, (match, expression, escaped) => {
      if (expression !== undefined) {
        var resolved;
        var parsed;
        parsed = this.parse(expression, dataPath);
        if (!(parsed instanceof Expression)) {
          return '';
        }
        try {
          if (this.containsSelf(parsed, dataPath)) {
            throw new Error("Can't contain self data path (`".concat(dataPath, "`)"));
          }
          resolved = String(parsed.evaluate(data));
        } catch (e) {
          if (this.config$.value.config.expressionDebug) {
            console.warn("Expression error in: ".concat(expression, ":"), e);
          }
        }
        if (resolved === 'NaN') {
          resolved = '0';
        }
        if ([null, undefined, 'null', 'undefined', '[object Object]'].includes(resolved) || resolved === '') {
          resolved = '';
        }
        return resolved;
      }
      if (escaped !== undefined) {
        return escaped.replace(/\\}$/, '\}');
      }
      return match;
    });
  }
  parse(expression, dataPath) {
    var parsed;
    expression = expression.replace(/([a-zA-Z_-][a-zA-Z0-9_-]*)\.([0-9\*])+\b/g, '$1[$2]').replace(/([a-zA-Z_-][a-zA-Z0-9_-]*)\.([0-9\*])\.+\b/g, '$1[$2].');
    expression = replaceWildcardsExpr(expression, dataPath);
    try {
      parsed = this.parser.parse(expression);
    } catch (e) {
      if (this.config$.value.config.expressionDebug) {
        console.warn("Expression error in: ".concat(expression, ":"), e);
      }
    }
    return parsed;
  }
  parseAll(expressionChain, dataPath) {
    if (typeof expressionChain !== 'string') {
      return [];
    }
    return [...((expressionChain === null || expressionChain === void 0 ? void 0 : expressionChain.matchAll(this.regex)) || [])].map(m => m[1]).filter(m => !!m).map(e => ({
      expression: e,
      parsed: this.parse(e, dataPath)
    }));
  }
  vars(expressionChain, dataPath) {
    if (typeof expressionChain !== 'string') {
      return [];
    }
    return [...((expressionChain === null || expressionChain === void 0 ? void 0 : expressionChain.matchAll(this.regex)) || [])].map(m => m[1]).filter(m => !!m).reduce((prev, e) => {
      var _this$parse;
      e = replaceWildcardsExpr(e.replace(/([a-zA-Z_-][a-zA-Z0-9_-]*)\.([0-9\*])+\b/g, '$1[$2]').replace(/([a-zA-Z_-][a-zA-Z0-9_-]*)\.([0-9\*])\.+\b/g, '$1[$2].'), dataPath);
      e = e.replace(/\[([0-9\*])+\]/g, '._$1_').replace(/\[([0-9\*])+\]\./g, '._$1_.');
      return [...prev, ...(((_this$parse = this.parse(e, dataPath)) === null || _this$parse === void 0 || (_this$parse = _this$parse.variables({
        withMembers: true
      })) === null || _this$parse === void 0 ? void 0 : _this$parse.map(v => v.replace(/\._([0-9]+)_/g, '.$1').replace(/\._([0-9]+)_\./g, '.$1.'))) || [])];
    }, []);
  }
  wrap(expression) {
    if (!/^{/.test(expression) && !/}$/.test(expression)) {
      expression = "{".concat(expression, "}");
    }
    return expression;
  }
  unwrap(expression) {
    return expression.replace(/^\{|\}$/g, '');
  }
  containsSelf(parsed, dataPath) {
    var _this$vars;
    return (_this$vars = this.vars(this.wrap((parsed === null || parsed === void 0 ? void 0 : parsed.toString()) || ''), dataPath)) === null || _this$vars === void 0 ? void 0 : _this$vars.includes(dataPath);
  }
}

class CaptchaProviderInterface {
  constructor(element, options, el$) {}
  init() {}
  render() {}
  reset() {}
  getResponse() {}
  validate(response) {
    return _asyncToGenerator(function* () {})();
  }
}

class Recaptcha2Provider extends CaptchaProviderInterface {
  constructor(element, options, el$) {
    super(element, options, el$);
    _defineProperty$2(this, "src", 'https://www.google.com/recaptcha/api.js?onload=recaptcha2LoadCallback&render=explicit');
    _defineProperty$2(this, "element", void 0);
    _defineProperty$2(this, "options", {});
    _defineProperty$2(this, "el$", {});
    _defineProperty$2(this, "id", void 0);
    _defineProperty$2(this, "rendered", false);
    _defineProperty$2(this, "interval", void 0);
    this.element = element;
    this.options = options;
    this.el$ = el$;
    this.init();
  }
  init() {
    this.loadScript();
  }
  render() {
    this.id = window.grecaptcha.render(this.element, _objectSpread2$1({
      callback: token => {
        this.el$.update(token);
      },
      'expired-callback': () => {
        this.el$.clear();
      },
      'error-callback': () => {
        this.el$.clear();
      }
    }, this.options));
    this.rendered = true;
  }
  reset() {
    if (!this.rendered) {
      return;
    }
    return window.grecaptcha.reset(this.id);
  }
  getResponse() {
    return window.grecaptcha.getResponse(this.id);
  }
  validate(response) {
    return _asyncToGenerator(function* () {
      return !!response;
    })();
  }
  loadScript() {
    if (this.isCaptchaLoaded()) {
      this.render();
      return;
    }
    if (this.isScriptAdded()) {
      this.interval = setInterval(() => {
        if (this.isCaptchaLoaded()) {
          this.render();
          clearInterval(this.interval);
        }
      }, 500);
      return;
    }
    window.recaptcha2LoadCallback = () => {
      this.render();
    };
    var script = document.createElement('script');
    script.src = this.src;
    script.async = true;
    script.defer = true;
    document.head.appendChild(script);
    script.onload = () => {};
    script.onerror = () => {
      console.error('Error loading reCAPTCHA!');
    };
  }
  isCaptchaLoaded() {
    return typeof window !== 'undefined' && window.grecaptcha;
  }
  isScriptAdded() {
    var scripts = document.getElementsByTagName('script');
    for (var i = 0; i < scripts.length; i++) {
      if (scripts[i].src.includes('https://www.google.com/recaptcha/api.js')) {
        return true;
      }
    }
    return false;
  }
}

var config = {
  /**
   * General
   */
  env: 'development',
  plugins: [],
  elements: [],
  /**
   * Theme & layout
   */
  theme: {},
  templates: {},
  views: {},
  size: 'md',
  addClasses: {},
  removeClasses: {},
  replaceClasses: {},
  overrideClasses: {},
  presets: {},
  usePresets: [],
  classHelpers: false,
  columns: {},
  forceLabels: false,
  floatPlaceholders: true,
  displayErrors: true,
  displayMessages: true,
  breakpoints: ['sm', 'md', 'lg', 'xl', '2xl'],
  /**
   * Localization
   */
  languages: {
    en: 'English'
  },
  language: 'en',
  locales: {},
  locale: null,
  fallbackLocale: 'en',
  /**
   * Sorting
   */
  orderFrom: 1,
  /**
   * Validation
   */
  rules: {},
  validateOn: 'change|step',
  scrollToInvalid: true,
  showRequired: [],
  /**
   * Steps
   */
  scrollOnNext: true,
  /**
   * Data
   */
  forceNumbers: false,
  /**
   * Condition
   */
  operators: {},
  strictConditions: false,
  /**
   * Expression parser
   */
  expression: {
    functions: {},
    consts: {}
  },
  expressionDebug: false,
  /**
   * Submitting
   */
  endpoints: {
    submit: {
      url: '/vueform/process',
      method: 'post'
    },
    uploadTempFile: {
      url: '/vueform/file/upload-temp',
      method: 'post'
    },
    removeTempFile: {
      url: '/vueform/file/remove-temp',
      method: 'post'
    },
    removeFile: {
      url: '/vueform/file/remove',
      method: 'post'
    },
    attachment: {
      url: '/vueform/editor/attachment',
      method: 'post'
    },
    activeUrl: {
      url: '/vueform/validators/active_url',
      method: 'post'
    },
    unique: {
      url: '/vueform/validators/unique',
      method: 'post'
    },
    exists: {
      url: '/vueform/validators/exists',
      method: 'post'
    }
  },
  formData(form$) {
    return form$.convertFormData(_objectSpread2$1(_objectSpread2$1({}, form$.requestData), form$.formKey ? {
      formKey: form$.formKey
    } : {}));
  },
  beforeSend: null,
  axios: {},
  sanitize: true,
  sanitizeOptions: {},
  sanitizeInit: DOMPurify => DOMPurify,
  /**
   * Providers
   */
  locationProvider: 'google',
  providers: {
    captcha: {
      recaptcha2: Recaptcha2Provider
    }
  },
  useProviders: {
    captcha: 'recaptcha2'
  },
  providerOptions: {
    recaptcha2: {
      sitekey: '6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI'
    }
  },
  /**
   * Services
   */
  services: {
    algolia: {
      app_id: '',
      api_key: ''
    }
  }
};

function installer () {
  var config$1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : config;
  var components = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var services = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var Vueform = class {
    constructor() {
      this.options = {
        config: omit_1(config$1, ['theme', 'templates', 'locales', 'rules', 'plugins']),
        templates: config$1.templates || {},
        components: config$1.components || {},
        theme: config$1.theme || {},
        rules: _objectSpread2$1(_objectSpread2$1({}, rules), config$1.rules || {}),
        locales: config$1.locales || {},
        plugins: config$1.plugins || [],
        i18n: null,
        vueVersion: null,
        services: _objectSpread2$1({
          validation,
          axios,
          messageBag,
          autosize: n,
          location: location$4,
          condition: condition$1,
          columns: Columns,
          sanitize,
          expression
        }, services),
        version: packageJson.version
      };
    }
    config(config) {
      var _config$theme;
      // merge
      each(['theme', 'templates', 'locales', 'rules'], attr => {
        if (config[attr] !== undefined) {
          this.options[attr] = Object.assign({}, this.options[attr], config[attr]);
        }
      });

      // replace
      each(['plugins', 'components', 'sanitizeOptions'], attr => {
        if (config[attr] !== undefined) {
          this.options[attr] = config[attr];
        }
      });

      // merge (config)
      each(['languages', 'services', 'presets', 'views', 'operators', 'expression'], attr => {
        if (config[attr] !== undefined) {
          this.options.config[attr] = Object.assign({}, this.options.config[attr], config[attr]);
        }
      });
      each(['addClasses', 'removeClasses', 'replaceClasses', 'overrideClasses'], attr => {
        if (config[attr] !== undefined) {
          this.options.config[attr] = typeof config[attr] === 'function' ? config[attr] : Object.assign({}, this.options.config[attr], config[attr]);
        }
      });

      // deep merge
      each(['endpoints', 'providers', 'useProviders', 'providerOptions'], attr => {
        if (config[attr] !== undefined) {
          this.options.config[attr] = merge_1({}, this.options.config[attr], config[attr]);
        }
      });

      // replace
      each(['columns', 'forceLabels', 'displayErrors', 'floatPlaceholders', 'displayErrors', 'displayMessages', 'language', 'locale', 'fallbackLocale', 'orderFrom', 'validateOn', 'formData', 'beforeSend', 'locationProvider', 'classHelpers', 'env', 'usePresets', 'plugins', 'size', 'apiKey', 'forceNumbers', 'scrollToInvalid', 'showRequired', 'scrollOnNext', 'strictConditions', 'sanitize', 'sanitizeInit', 'expressionDebug'], attr => {
        if (config[attr] !== undefined) {
          this.options.config[attr] = config[attr];
        }
      });
      this.options.config.presets = _objectSpread2$1(_objectSpread2$1({}, this.options.config.presets || {}), ((_config$theme = config.theme) === null || _config$theme === void 0 ? void 0 : _config$theme.presets) || {});
      if (config.elements) {
        config.elements.forEach(element => {
          components[element.name] = omit_1(element, ['render', 'staticRenderFns', 'components']);
        });
        config.elements.forEach(element => {
          if (this.options.templates[element.name] === undefined) {
            this.options.templates[element.name] = pick_1(element, ['render', 'staticRenderFns', 'components']);
          }
        });
      }
      if (config.axios !== undefined) {
        if (typeof config.axios === 'function') {
          this.options.services.axios = config.axios;
        } else {
          this.options.config.axios = config.axios;
        }
      }
    }
    registerComponents(appOrVue) {
      each(components, (comp, name) => {
        if (comp.register === false) {
          return;
        }
        var component = _objectSpread2$1({}, comp);
        component.setup = (props, context) => {
          context = Object.assign({}, context, {
            name: ref(name),
            emits: component.emits
          });
          var setup = comp.setup(props, context);
          this.options.plugins.forEach(p => {
            if (typeof p === 'function') {
              p = p();
            }
            p = Array.isArray(p) ? p : [p];
            p.forEach(plugin => {
              var pluginOptions = typeof plugin === 'function' ? plugin() : plugin;
              if (pluginOptions.setup && shouldApplyPlugin(name, pluginOptions)) {
                setup = pluginOptions.setup(props, context, setup);
              }
            });
          });
          return setup;
        };
        if (component.components === undefined) {
          var _this$options$templat, _this$options$theme$t;
          component.components = ((_this$options$templat = this.options.templates[name]) === null || _this$options$templat === void 0 ? void 0 : _this$options$templat.components) || ((_this$options$theme$t = this.options.theme.templates[name]) === null || _this$options$theme$t === void 0 ? void 0 : _this$options$theme$t.components) || {};
        }
        component.render = function () {
          return this.template.render.apply(this, arguments);
        };
        component.staticRenderFns = function () {
          return this.template.staticRenderFns;
        };
        this.options.plugins.forEach(p => {
          if (typeof p === 'function') {
            p = p();
          }
          p = Array.isArray(p) ? p : [p];
          p.forEach(plugin => {
            var pluginOptions = typeof plugin === 'function' ? plugin() : plugin;
            each(without_1(Object.keys(pluginOptions), 'setup', 'apply', 'config', 'install'), key => {
              if (pluginOptions[key] && shouldApplyPlugin(name, pluginOptions)) {
                if (Array.isArray(pluginOptions[key])) {
                  var base = component[key] || [];
                  component[key] = base.concat(pluginOptions[key]);
                } else if (isPlainObject_1(pluginOptions[key])) {
                  component[key] = Object.assign({}, component[key] || {}, pluginOptions[key]);
                } else {
                  component[key] = pluginOptions[key];
                }
              }
            });
          });
        });
        appOrVue.component(name, component);
      });
    }
    initAxios() {
      var $axios = this.options.services.axios;
      var axiosConfig = this.options.config.axios;
      var axiosConfigFlat = flatten(this.options.config.axios);
      Object.keys(axiosConfigFlat).forEach(key => {
        var value = axiosConfigFlat[key];
        if (['onUnauthenticated'].indexOf(key) === -1 && key.indexOf('csrfRequest.') === -1) {
          set_1($axios.defaults, key, value);
        }
      });
      $axios.interceptors.response.use(r => r, error => {
        if (!error.response) {
          return Promise.reject(error);
        }
        return new Promise((resolve, reject) => {
          var response = error.response;
          var originalRequest = response.config;
          if ([401, 419].indexOf(error.response.status) !== -1) {
            if (axiosConfig.csrfRequest && !originalRequest.CSRF) {
              $axios.request(_objectSpread2$1(_objectSpread2$1({}, axiosConfig.csrfRequest), {}, {
                CSRF: true
              })).then(() => {
                resolve($axios.request(_objectSpread2$1(_objectSpread2$1({}, originalRequest), {}, {
                  CSRF: true
                })));
              }).catch(error => {
                reject(error);
              });
            } else if (axiosConfig.onUnauthenticated) {
              axiosConfig.onUnauthenticated(originalRequest);
            } else {
              reject(error);
            }
          } else {
            reject(error);
          }
        });
      });
    }
    initI18n() {
      this.options.i18n = new i18n({
        locales: this.options.locales,
        locale: this.options.config.locale,
        fallbackLocale: this.options.config.fallbackLocale
      });
    }
    install(appOrVue) {
      var _this$options$theme;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var version = parseInt(appOrVue.version.split('.')[0]);
      var minor = parseInt(appOrVue.version.split('.')[1]);
      this.options.vueVersion = version;
      var plugins = options.plugins || [];
      plugins.forEach(p => {
        if (typeof p === 'function') {
          p = p();
        }
        p = Array.isArray(p) ? p : [p];
        p.forEach(plugin => {
          var pluginOptions = typeof plugin === 'function' ? plugin() : plugin;
          if (pluginOptions.config) {
            pluginOptions.config(options);
          }
        });
      });
      if (options) {
        this.config(options);
      }
      this.options.plugins.forEach(p => {
        if (typeof p === 'function') {
          p = p();
        }
        p = Array.isArray(p) ? p : [p];
        p.forEach(plugin => {
          var pluginOptions = typeof plugin === 'function' ? plugin() : plugin;
          if (pluginOptions.install) {
            pluginOptions.install(appOrVue, this.options);
          }
        });
      });
      if (typeof config$1.axios !== 'function') {
        this.initAxios();
      }
      this.initI18n();
      Object.keys(this.options.components).forEach(componentName => {
        components[componentName] = this.options.components[componentName];
      });
      this.registerComponents(appOrVue);
      var themeTemplates = ((_this$options$theme = this.options.theme) === null || _this$options$theme === void 0 ? void 0 : _this$options$theme.templates) || {};
      Object.keys(themeTemplates).forEach(componentName => {
        themeTemplates[componentName] = markRaw(themeTemplates[componentName]);
      });
      var $vueform = ref(_objectSpread2$1(_objectSpread2$1({}, this.options), {}, {
        theme: _objectSpread2$1(_objectSpread2$1({}, this.options.theme), {}, {
          templates: themeTemplates
        }),
        sanitize: sanitize(this.options.sanitizeOptions || {}, this.options.config.sanitizeInit, this.options.config.sanitize)
      }));
      switch (version) {
        case 2:
          appOrVue.config.ignoredElements = ['trix-editor'];
          appOrVue.config.unwrapInjectedRef = true;
          if (!appOrVue.prototype.$vueform) {
            appOrVue.prototype.$vueform = new Proxy($vueform, {
              get: (target, prop, receiver) => {
                return target.value[prop];
              }
            });
          }
          if (!appOrVue.__VUEFORM__) {
            appOrVue.__VUEFORM__ = true;
            appOrVue.mixin({
              methods: {
                __: (expr, data) => {
                  if (!data) {
                    console.warn('DEPRECATED: __ method should be no longer used for translating labels, only if they contain variables. For general translation use form$.translation.TAG instead.');
                  }
                  return this.options.i18n.$t(expr, data);
                }
              }
            });
          }
          break;
        case 3:
          if (minor < 3) {
            appOrVue.config.unwrapInjectedRef = true;
          }
          if (!appOrVue.component('trix-editor')) {
            appOrVue.component('trix-editor', {
              render() {
                return h('trix-editor');
              }
            });
          }
          appOrVue.config.globalProperties.$vueform = new Proxy($vueform, {
            get: (target, prop, receiver) => {
              return target.value[prop];
            }
          });
          appOrVue.provide('$vueform', $vueform);
          appOrVue.mixin({
            methods: {
              $set(obj, key, value) {
                obj[key] = value;
              },
              $delete(obj, key) {
                delete obj[key];
              },
              __: (expr, data) => {
                if (!data) {
                  console.warn('DEPRECATED: __ method should be no longer used for translating labels, only if they contain variables. For general translation use form$.translation.TAG instead.');
                }
                return this.options.i18n.$t(expr, data);
              }
            }
          });
          break;
      }
    }
  };
  return new Vueform();
}

var base$1f = function base(props, context, dependencies) {
  // =============== INJECT ===============

  /**
  * The root form's component.
  * 
  * @type {Vueform}
  */
  var form$ = inject('form$');
  return {
    form$
  };
};

var base$1e = function base(props, context, dependencies) {
  // =============== INJECT ===============

  /**
  * The global theme object, which contains all the default templates and classes.
  * 
  * @type {object}
  */
  var theme = inject('theme');
  return {
    theme
  };
};

var base$1d = function base(props, context, dependencies) {
  // =============== INJECT ===============

  /**
  * The size of the component.
  * 
  * @type {string}
  */
  var Size = inject('Size');
  return {
    Size
  };
};

var base$1c = function base(props, context, dependencies) {
  var {
    view
  } = toRefs(props);
  var componentName = context.name;

  // =============== INJECT ===============

  /**
  * The name of the views for the components.
  * 
  * @type {object}
  * @private
  */
  var Views = inject('Views') || ref({});

  /**
  * The injected view.
  * 
  * @type {string}
  * @private
  */
  var ViewInject = inject('View', ref(undefined));

  // ============== COMPUTED ==============

  /**
   * The name of the resolved view for the component. This one should be used to determine the component's view in class functions.
   * 
   * @type {string}
   */
  var View = computed(() => {
    if (view && view.value) {
      return view.value;
    }
    if (Views.value[componentName.value]) {
      return Views.value[componentName.value];
    }
    return ViewInject.value;
  });
  return {
    View
  };
};

var base$1b = function base(props, context, dependencies) {
  var componentName = context.name;

  // =============== INJECT ===============

  var {
    form$
  } = base$1f();
  var {
    theme
  } = base$1e();
  var {
    Size
  } = base$1d();
  var {
    View
  } = base$1c(props, context);

  // ============== COMPUTED ===============

  /**
   * The component instance (self).
   * 
   * @type {VueformComponent}
   */
  var component$ = computed(() => {
    return getCurrentInstance().proxy;
  });

  /**
   * An object containaing all the component's classes in key/value pairs. Class values are merged based on the default classes provided by the theme respecing any additional classes / overrides.
   * 
   * @type {MergeClasses}
   * @private
   */
  var classesInstance = computed(() => {
    return new MergeClasses({
      component: componentName.value,
      component$: component$,
      theme: theme.value,
      config: form$.value.$vueform.config,
      templates: Templates.value,
      view: View.value,
      merge: [form$.value.options]
    });
  });

  /**
   * The component's classes.
   * 
   * @type {object}
   */
  var classes = computed(() => {
    return classesInstance.value.classes;
  });

  /**
   * The list of templates available to the component.
   * 
   * @type {object}
   * @private
   */
  var Templates = computed(() => {
    return theme.value.templates;
  });

  /**
   * The component's template.
   * 
   * @type {object}
   */
  var template = computed(() => {
    return View.value && Templates.value["".concat(componentName.value, "_").concat(View.value)] ? Templates.value["".concat(componentName.value, "_").concat(View.value)] : Templates.value[componentName.value];
  });
  return {
    form$,
    theme,
    Size,
    View,
    classesInstance,
    classes,
    Templates,
    template
  };
};

var FormErrors = {
  name: 'FormErrors',
  props: {
    view: {
      required: false,
      type: [String],
      default: undefined
    }
  },
  setup(props, context) {
    // ============ DEPENDENCIES ============

    var {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template
    } = base$1b(props, context);

    // ============== COMPUTED ==============

    /**
     * Form errors including element errors and the ones added to `messageBag` manually.
     * 
     * @type {array}
     */
    var errors = computed(() => {
      return form$.value.formErrors.map(e => form$.value.$vueform.sanitize(e));
    });
    return {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template,
      errors
    };
  }
};

var FormMessages = {
  name: 'FormMessages',
  props: {
    view: {
      required: false,
      type: [String],
      default: undefined
    }
  },
  setup(props, context) {
    // ============ DEPENDENCIES ============

    var {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template
    } = base$1b(props, context);

    // ============== COMPUTED ==============

    /**
     * Form messages including element messages and the ones added to `messageBag` manually.
     * 
     * @type {array}
     */
    var messages = computed(() => {
      return form$.value.formMessages;
    });
    return {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template,
      messages
    };
  }
};

var FormLanguages = {
  name: 'FormLanguages',
  props: {
    view: {
      required: false,
      type: [String],
      default: undefined
    }
  },
  setup(props, context) {
    // ============ DEPENDENCIES ============

    var {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template
    } = base$1b(props, context);

    // ============== COMPUTED ==============

    /**
     * The language code of the currently selected language (2 letters).
     * 
     * @type {string}
     */
    var language = computed(() => {
      return form$.value.selectedLanguage;
    });

    /**
     * The available languages.
     * 
     * @type {object}
     */
    var languages = computed(() => {
      return form$.value.options.languages;
    });

    // =============== METHODS ==============

    /**
     * Selects a language.
     * 
     * @param {string} code* the language code to be selected
     * @returns {void}
     */
    var select = code => {
      form$.value.setLanguage(code);
    };

    /**
     * Handles `select` event.
     *
     * @param {string} code* the language code to be selected
     * @returns {void}
     * @private
     */
    var handleSelect = code => {
      select(code);
    };

    // ============== PROVIDE ===============

    provide('View', View);
    return {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template,
      language,
      languages,
      select,
      handleSelect
    };
  }
};

var FormLanguage = {
  name: 'FormLanguage',
  emits: ['select'],
  props: {
    language: {
      type: String,
      required: true
    },
    code: {
      type: String,
      required: true
    },
    view: {
      required: false,
      type: [String],
      default: undefined
    }
  },
  setup(props, context) {
    var {
      code
    } = toRefs(props);

    // ============ DEPENDENCIES ============

    var {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template
    } = base$1b(props, context);

    // ============== COMPUTED ==============

    /**
     * The language code of the currently selected language (2 letters).
     * 
     * @type {string}
     */
    var selectedLanguage = computed(() => {
      return form$.value.selectedLanguage;
    });

    /**
     * Whether the current language is the selected one.
     * 
     * @type {boolean}
     */
    var selected = computed(() => {
      return selectedLanguage.value == code.value;
    });

    // =============== METHODS ==============

    /**
     * Select the language.
     * 
     * @returns {void}
     */
    var select = () => {
      context.emit('select', code.value);
    };
    return {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      selectedLanguage,
      selected,
      classes,
      Templates,
      template,
      select
    };
  }
};

var baseIteratee$3 = _baseIteratee,
    isArrayLike = isArrayLike_1,
    keys = keys_1;

/**
 * Creates a `_.find` or `_.findLast` function.
 *
 * @private
 * @param {Function} findIndexFunc The function to find the collection index.
 * @returns {Function} Returns the new find function.
 */
function createFind$2(findIndexFunc) {
  return function(collection, predicate, fromIndex) {
    var iterable = Object(collection);
    if (!isArrayLike(collection)) {
      var iteratee = baseIteratee$3(predicate);
      collection = keys(collection);
      predicate = function(key) { return iteratee(iterable[key], key, iterable); };
    }
    var index = findIndexFunc(collection, predicate, fromIndex);
    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
  };
}

var _createFind = createFind$2;

var baseFindIndex$1 = _baseFindIndex,
    baseIteratee$2 = _baseIteratee,
    toInteger$1 = toInteger_1;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax$1 = Math.max;

/**
 * This method is like `_.find` except that it returns the index of the first
 * element `predicate` returns truthy for instead of the element itself.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.findIndex(users, function(o) { return o.user == 'barney'; });
 * // => 0
 *
 * // The `_.matches` iteratee shorthand.
 * _.findIndex(users, { 'user': 'fred', 'active': false });
 * // => 1
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findIndex(users, ['active', false]);
 * // => 0
 *
 * // The `_.property` iteratee shorthand.
 * _.findIndex(users, 'active');
 * // => 2
 */
function findIndex$1(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : toInteger$1(fromIndex);
  if (index < 0) {
    index = nativeMax$1(length + index, 0);
  }
  return baseFindIndex$1(array, baseIteratee$2(predicate), index);
}

var findIndex_1 = findIndex$1;

var createFind$1 = _createFind,
    findIndex = findIndex_1;

/**
 * Iterates over elements of `collection`, returning the first element
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {*} Returns the matched element, else `undefined`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36, 'active': true },
 *   { 'user': 'fred',    'age': 40, 'active': false },
 *   { 'user': 'pebbles', 'age': 1,  'active': true }
 * ];
 *
 * _.find(users, function(o) { return o.age < 40; });
 * // => object for 'barney'
 *
 * // The `_.matches` iteratee shorthand.
 * _.find(users, { 'age': 1, 'active': true });
 * // => object for 'pebbles'
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.find(users, ['active', false]);
 * // => object for 'fred'
 *
 * // The `_.property` iteratee shorthand.
 * _.find(users, 'active');
 * // => object for 'barney'
 */
var find$1 = createFind$1(findIndex);

var find_1 = find$1;

var baseFindIndex = _baseFindIndex,
    baseIteratee$1 = _baseIteratee,
    toInteger = toInteger_1;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * This method is like `_.findIndex` except that it iterates over elements
 * of `collection` from right to left.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=array.length-1] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': true },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': false }
 * ];
 *
 * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
 * // => 2
 *
 * // The `_.matches` iteratee shorthand.
 * _.findLastIndex(users, { 'user': 'barney', 'active': true });
 * // => 0
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findLastIndex(users, ['active', false]);
 * // => 2
 *
 * // The `_.property` iteratee shorthand.
 * _.findLastIndex(users, 'active');
 * // => 0
 */
function findLastIndex$1(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = length - 1;
  if (fromIndex !== undefined) {
    index = toInteger(fromIndex);
    index = fromIndex < 0
      ? nativeMax(length + index, 0)
      : nativeMin(index, length - 1);
  }
  return baseFindIndex(array, baseIteratee$1(predicate), index, true);
}

var findLastIndex_1 = findLastIndex$1;

var createFind = _createFind,
    findLastIndex = findLastIndex_1;

/**
 * This method is like `_.find` except that it iterates over elements of
 * `collection` from right to left.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=collection.length-1] The index to search from.
 * @returns {*} Returns the matched element, else `undefined`.
 * @example
 *
 * _.findLast([1, 2, 3, 4], function(n) {
 *   return n % 2 == 1;
 * });
 * // => 3
 */
var findLast = createFind(findLastIndex);

var findLast_1 = findLast;

var FormTabs = {
  name: 'FormTabs',
  emits: ['select'],
  props: {
    view: {
      required: false,
      type: [String],
      default: undefined
    }
  },
  setup(props, context) {
    var $this = getCurrentInstance().proxy;

    // ============ DEPENDENCIES ============

    var {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template
    } = base$1b(props, context);
    var {
      events,
      listeners,
      on,
      off,
      fire
    } = base$1i(props, context, {
      form$
    }, {
      events: context.emits
    });

    // ================ DATA ================

    /**
     * The child [`FormTab`](form-tab) components.
     *
     * @type {array}
     * @default []
     */
    var tabs$Array = ref([]);

    /**
     * Helper prop used for checking if the component exists.
     *
     * @type {boolean}
     * @private
     */
    var exists = ref(true);

    // ============== COMPUTED ==============

    /**
     * The form elements' components.
     *
     * @type {object}
     */
    var elements$ = computed(() => {
      return form$.value.elements$;
    });

    /**
     * The object containing tabs defined in [`Vueform`](vueform#option-tabs).
     *
     * @type {object}
     */
    var tabs = computed(() => {
      return form$.value.options.tabs;
    });

    /**
     * The child [`FormTab`](form-tab) components with indexed keys.
     *
     * @type {object}
     */
    var tabs$ = computed(() => {
      var tabList$ = {};
      each(tabs$Array.value, formTab$ => {
        tabList$[formTab$.name] = formTab$;
      });
      return tabList$;
    });

    /**
     * All the visible [`FormTab`](form-tab) components.
     *
     * @type {object}
     */
    var visible$ = computed(() => {
      var tabList$ = {};
      each(tabs$.value, tab$ => {
        if (tab$.visible) {
          tabList$[tab$.name] = tab$;
        }
      });
      return tabList$;
    });

    /**
     * The current [`FormTab`](form-tab) component.
     *
     * @type {FormTab}
     */
    var current$ = computed(() => {
      var current = find_1(tabs$.value, {
        active: true
      });
      return current !== undefined ? current : {};
    });

    /**
     * The first visible [`FormTab`](form-tab) component.
     *
     * @type {FormTab}
     */
    var first$ = computed(() => {
      return find_1(visible$.value, tab => {
        return tab.visible;
      });
    });

    /**
     * The last visible [`FormTab`](form-tab) component.
     *
     * @type {FormTab}
     */
    var last$ = computed(() => {
      return Object.values(visible$.value).pop();
    });

    /**
     * The next visible [`FormTab`](form-tab) component.
     *
     * @type {FormTab}
     */
    var next$ = computed(() => {
      return find_1(visible$.value, tab => {
        return tab.index > current$.value.index && tab.visible;
      });
    });

    /**
     * The previous visible [`FormTab`](form-tab) component.
     *
     * @type {FormTab}
     */
    var previous$ = computed(() => {
      return findLast_1(visible$.value, tab => {
        return tab.index < current$.value.index && tab.visible;
      });
    });

    // =============== METHODS ==============

    /**
     * Go to a tab.
     *
     * @param {string} name* name of tab to go to
     * @returns {void}
     */
    var goTo = name => {
      var tab$ = visible$.value[name];
      tab$.select();
    };

    /**
     * Select a tab.
     *
     * @param {FormTab} tab$* the [`FormTab`](form-tab) component to select
     * @returns {void}
     * @private
     */
    var select = tab$ => {
      var curr$ = current$.value;
      each(elements$.value, element$ => {
        element$.deactivate();
      });
      each(tabs$.value, tab$ => {
        tab$.deactivate();
      });
      fire('select', tab$, curr$);
    };

    /**
     * Returns a specific [`FormTab`](form-tab) by index.
     *
     * @param {string} tab* name of the tab
     * @returns {FormTab}
     */
    var tab$ = name => {
      return find_1(tabs$.value, {
        name: name
      });
    };

    /**
     * Jump back to the first visible tab.
     *
     * @returns {void}
     */
    var reset = () => {
      first$.value.select();
    };

    /**
     * Set the component to the parent as if `refs` were used.
     *
     * @param {VNode} $parent parent component
     * @param {function} assignToParent the assignToParent function for recursion
     * @returns {void}
     * @private
     */
    var assignToParent = ($parent, assignToParent) => {
      if ($parent.tabs$ !== undefined) {
        form$.value.$set($parent, 'tabs$', $this);
      } else {
        assignToParent($parent.$parent, assignToParent);
      }
    };

    /**
    * Removes the component from the parent.
    *
    * @param {VNode} $parent parent component
    * @param {function} removeFromParent the removeFromParent function for recursion
    * @private
    */
    var removeFromParent = ($parent, removeFromParent) => {
      if ($parent.tabs$ !== undefined) {
        form$.value.$set($parent, 'tabs$', null);
      } else {
        /* @todo:adam test later */
        removeFromParent($parent.$parent, removeFromParent);
      }
    };

    // ============== PROVIDE ===============

    provide('View', View);

    // ============== WATCHERS ==============

    /* istanbul ignore next: can not reproduce */
    watch(elements$, (newValue, oldValue) => {
      var newElements$ = difference_1(keys_1(newValue), keys_1(oldValue));
      each(newElements$, newElement$ => {
        elements$.value[newElement$].deactivate();
      });
    }, {
      deep: false,
      lazy: true
    });
    watch(tabs, /*#__PURE__*/_asyncToGenerator(function* () {
      yield nextTick();
      yield nextTick();

      //@todo:adam we came up with change together
      if ((current$.value === undefined || current$.value.index === undefined) && first$.value) {
        first$.value.select();
      }
    }), {
      deep: true,
      lazy: true
    });

    // Resort tabs$Array when tabs
    // order changes or a tab is removed
    watch(tabs, newValue => {
      var newTabs$Array = [];
      each(newValue, (t, name) => {
        newTabs$Array.push(tabs$Array.value[tabs$Array.value.map(t$ => normalize(t$.name)).indexOf(normalize(name))]);
      });
      tabs$Array.value = newTabs$Array;
    }, {
      flush: 'post'
    });

    // =============== HOOKS ================

    onBeforeMount(() => {
      assignToParent($this.$parent, assignToParent);
    });
    onBeforeUnmount(() => {
      removeFromParent($this.$parent, removeFromParent);
    });
    onMounted(() => {
      nextTick(() => {
        if (!find_1(tabs$.value, {
          active: true
        })) {
          first$.value.select();
        }
      });
    });
    return {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      tabs,
      elements$,
      tabs$Array,
      events,
      listeners,
      exists,
      classes,
      Templates,
      template,
      tabs$,
      visible$,
      current$,
      first$,
      last$,
      next$,
      previous$,
      goTo,
      select,
      tab$,
      reset,
      on,
      off,
      fire
    };
  }
};

var base$1a = function base(props, context, dependencies) {
  var {
    conditions
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var path = dependencies.path || ref(null);
  var el$ = dependencies.el$ || ref(undefined);
  var parent = dependencies.parent;

  // ================ DATA ================

  /**
   * The current conditions of the element.
   * 
   * @type {array}
   * @private
   */
  var conditionList = ref(conditions.value);
  var additionalConditions = ref({});

  // ============== COMPUTED ==============

  /**
   * Whether no [`conditions`](#option-conditions) are defined or they are all fulfilled.
   * 
   * @type {boolean}
   */
  var available = computed(() => {
    if (!form$.value.conditions) {
      return true;
    }
    if (parent && parent.value && parent.value.available !== undefined && !parent.value.available) {
      return false;
    }
    if (!conditionList.value || !conditionList.value.length) {
      return true;
    }
    return !some_1(conditionList.value, condition => {
      return !form$.value.$vueform.services.condition.check(condition, path.value, form$.value, el$.value);
    });
  });

  // ============== METHODS ===============

  /**
   * Updates element conditions after they have been changed.
   * 
   * @returns {void}
   * @private
   */
  var updateConditions = () => {
    conditionList.value = Object.values(additionalConditions.value).reduce((prev, curr) => {
      return prev.concat(curr);
    }, conditions.value);
  };
  var addConditions = (key, conditions) => {
    additionalConditions.value[key] = conditions;
    updateConditions();
  };
  var removeConditions = key => {
    delete additionalConditions.value[key];
    updateConditions();
  };

  // Conditions should not be watched, because if they
  // are defined inline they will trigger infinite updates
  // watch(conditions, () => {
  //   updateConditions()
  // }, { immediate: false, deep: true })

  return {
    conditionList,
    available,
    additionalConditions,
    updateConditions,
    addConditions,
    removeConditions
  };
};
var list$5 = function list(props, context, dependencies) {
  var {
    conditionList,
    available,
    additionalConditions,
    addConditions,
    removeConditions
  } = base$1a(props, context, dependencies);
  var {
    conditions
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var children$Array = dependencies.children$Array;

  // ============== METHODS ===============

  var updateConditions = () => {
    conditionList.value = Object.values(additionalConditions.value).reduce((prev, curr) => {
      return prev.concat(curr);
    }, conditions.value);
    children$Array.value.forEach(child$ => {
      child$.updateConditions();
    });
  };
  return {
    conditionList,
    available,
    updateConditions,
    addConditions,
    removeConditions
  };
};
var object$8 = list$5;
var group$8 = list$5;

/**
 * From: https://github.com/fengyuanchen/is-vue-component/blob/master/src/index.js
 */

var {
  hasOwnProperty,
  toString
} = Object.prototype;

/**
 * Check if the given value is a non-empty string.
 * @param {*} value - The value to check.
 * @returns {boolean} Returns `true` if the given value is a non-empty string, else `false`.
 */
function isNonEmptyString(value) {
  return typeof value === 'string' && value.trim().length > 0;
}

/**
 * Check if the given value is a function.
 * @param {*} value - The value to check.
 * @returns {boolean} Returns `true` if the given value is a function, else `false`.
 */
function isFunction(value) {
  return typeof value === 'function';
}

/**
 * Check if the given value is a non-empty array.
 * @param {*} value - The value to check.
 * @returns {boolean} Returns `true` if the given value is a non-empty array, else `false`.
 */
/* istanbul ignore next */
function isNonEmptyArray(value) {
  return Array.isArray(value) && value.length > 0;
}
function isNonNullObject(value) {
  return !!value;
}

/**
 * Check if the given value is an element.
 * @param {*} value - The value to check.
 * @returns {boolean} Returns `true` if the given value is an element, else `false`.
 */
/* istanbul ignore next */
function isElement(value) {
  return isNonNullObject(value) && value.nodeType === 1 && toString.call(value).indexOf('Element') > -1;
}

/**
 * Check if the given value is a valid Vue component.
 * @param {*} value - The value to check.
 * @returns {boolean} Returns `true` if the given value is a valid Vue component, else `false`.
 */
function isVueComponent(value) {
  /* istanbul ignore next */
  return isPlainObject_1(value) && (isNonEmptyString(value.template) || isFunction(value.render) || isNonEmptyString(value.el) || isElement(value.el) || isVueComponent(value.extends) || isNonEmptyArray(value.mixins) && value.mixins.some(val => isVueComponent(val))) || typeof value === 'function' && value.prototype && value.prototype.constructor.name === 'VueComponent';
}

var base$19 = function base(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var labelDefinition = dependencies.labelDefinition;
  var component$ = dependencies.component$ || ref(null);

  // =============== INJECT ===============

  var form$ = inject('form$');
  var config$ = inject('config$');

  // ============== COMPUTED ==============

  /**
  * The label definition of the component.
  * 
  * @type {string|function|Component}
  * @private
  */
  var baseLabel = computed(() => {
    return labelDefinition.value;
  });

  /**
  * Whether the label is provided as a function.
  * 
  * @type {boolean}
  * @private
  */
  var isLabelFunction = computed(() => {
    return typeof baseLabel.value === 'function' && (!baseLabel.value.prototype || !baseLabel.value.prototype.constructor || baseLabel.value.prototype.constructor && baseLabel.value.prototype.constructor.name !== 'VueComponent');
  });

  /**
  * Whether label is provided as a Vue component.
  * 
  * @type {boolean}
  * @private
  */
  var isLabelComponent = computed(() => {
    return isVueComponent(baseLabel.value);
  });

  /**
  * The label of the component.
  * 
  * @type {string|Component}
  */
  var label = computed(() => {
    var label = isLabelFunction.value ? baseLabel.value(component$.value) : baseLabel.value || null;
    if (!isLabelComponent.value) {
      label = localize(label, config$.value, form$.value);
    }
    return form$.value.$vueform.sanitize(label);
  });
  return {
    label,
    isLabelComponent
  };
};

var FormTab = {
  name: 'FormTab',
  emits: ['activate', 'inactivate'],
  slots: ['default'],
  props: {
    /**
     * Name of tab within [tabs](reference/frontend-form#prop-tabs) object.
     */
    name: {
      type: [String, Number],
      required: true
    },
    label: {
      type: [String, Object, Function],
      required: false,
      default: null
    },
    elements: {
      type: [Array],
      required: false,
      default: () => []
    },
    conditions: {
      type: [Array],
      required: false,
      default: () => []
    },
    addClass: {
      required: false,
      type: [Array, Object, String],
      default: null
    },
    removeClass: {
      required: false,
      type: [Array, Object],
      default: null
    },
    replaceClass: {
      required: false,
      type: [Object],
      default: null
    },
    overrideClass: {
      required: false,
      type: [Array, Object, String],
      default: null
    },
    view: {
      required: false,
      type: [String],
      default: undefined
    },
    onActivate: {
      type: [Function],
      required: false,
      default: null,
      private: true
    },
    onInactivate: {
      type: [Function],
      required: false,
      default: null,
      private: true
    }
  },
  setup(props, context) {
    var {
      name,
      label,
      elements
    } = toRefs(props);
    var $this = getCurrentInstance().proxy;

    // ============ DEPENDENCIES ============

    var {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template
    } = base$1b(props, context);
    var {
      available,
      conditionList,
      updateConditions
    } = base$1a(props, context, {
      form$
    });
    var {
      isLabelComponent,
      label: tabLabel_
    } = base$19(props, context, {
      component$: form$,
      labelDefinition: label
    });
    var {
      events,
      listeners,
      on,
      off,
      fire
    } = base$1i(props, context, {
      form$
    }, {
      events: context.emits
    });

    // ================ DATA ================

    /**
     * Whether the tab is active.
     *
     * @type {boolean}
     * @default false
     */
    var active = ref(false);

    /**
     * The label of the tab.
     *
     * @type {string|Component}
     * @default null
     */
    var tabLabel = ref(tabLabel_.value && typeof tabLabel_.value === 'object' ? markRaw(tabLabel_.value) : tabLabel_.value);

    // ============== COMPUTED ==============

    /**
     * The components of highest level form elements.
     *
     * @type {object}
     */
    var elements$ = computed(() => {
      return form$.value.elements$;
    });

    /**
     * The parent [`FormTabs`](form-tabs) component.
     *
     * @type {FormTabs}
     */
    var tabs$ = computed(() => {
      return form$.value.tabs$;
    });

    /**
     * Index of this tab among the other tabs which are not hidden by unmet conditions.
     *
     * @type {number}
     */
    var index = computed(() => {
      var _tabs$$value;
      return Object.keys((tabs$ === null || tabs$ === void 0 || (_tabs$$value = tabs$.value) === null || _tabs$$value === void 0 ? void 0 : _tabs$$value.tabs$) || /* istanbul ignore next: tab can not stand by itself */{}).indexOf(name.value);
    });

    /**
     * Whether the tab is the first.
     *
     * @type {boolean}
     */
    var isFirst = computed(() => {
      return index.value === 0;
    });

    /**
     * Whether the tab is the first.
     *
     * @type {boolean}
     */
    var isLast = computed(() => {
      return tabs$.value.last$.name === name.value;
    });

    /**
     * The components of form elements within the tab.
     *
     * @type {object}
     */
    var children$ = computed(() => {
      return filter_1(elements$.value, (element$, key) => {
        return elements.value.indexOf(key) !== -1;
      });
    });

    /**
     * Whether the tab should be visible.
     *
     * @type {boolean}
     */
    var visible = computed(() => {
      return available.value;
    });

    /**
     * Whether the tab has any invalid elements.
     *
     * @type {boolean}
     */
    var invalid = computed(() => {
      return some_1(children$.value, {
        available: true,
        invalid: true
      });
    });

    /**
     * The tab's component.
     *
     * @type {FormTab}
     */
    var tab$ = computed(() => {
      return form$.value.tabs$.tabs$[name.value];
    });

    // =============== METHODS ==============

    /**
     * Deactivate all other tabs and set the current one as active.
     *
     * @returns {void}
     */
    var select = () => {
      var _tabs$$value2, _tabs$$value3;
      if (active.value || !((_tabs$$value2 = tabs$.value) !== null && _tabs$$value2 !== void 0 && _tabs$$value2.select)) {
        return;
      }
      (_tabs$$value3 = tabs$.value) === null || _tabs$$value3 === void 0 || _tabs$$value3.select(tab$.value);
      activate();
    };

    /**
     * Activate the tab.
     *
     * @returns {void}
     */
    var activate = () => {
      if (active.value) {
        return;
      }
      active.value = true;
      each(children$.value, element$ => {
        element$.activate();
      });
      fire('activate');
    };

    /**
     * Deactivate the tab.
     *
     * @returns {void}
     */
    var deactivate = () => {
      if (!active.value) {
        return;
      }
      active.value = false;
      each(children$.value, element$ => {
        element$.deactivate();
      });
      fire('inactivate');
    };

    /**
      * Apply conditions of the tab to its elements.
      *
      * @returns {void}
      * @private
      */
    var addChildConditions = () => {
      if (conditionList.value.length == 0) {
        return;
      }
      Object.values(children$.value).forEach(element$ => {
        element$.addConditions('tab', conditionList.value);
      });
    };

    /**
      * Remove conditions of the elements of the tab.
      *
      * @returns {void}
      * @private
      */
    var removeChildConditions = () => {
      Object.values(children$.value).forEach(element$ => {
        element$.removeConditions('tab');
      });
    };

    /**
      * Resets conditions of the elements of the tab.
      *
      * @returns {void}
      * @private
      */
    var resetChildConditions = () => {
      removeChildConditions();
      addChildConditions();
    };

    /**
     * Set the component to the parent as if `refs` were used.
     *
     * @param {VNode} $parent parent component
     * @param {function} assignToParent the assignToParent function for recursion
     * @returns {void}
     * @private
     */
    var assignToParent = ($parent, assignToParent) => {
      if ($parent.tabs$Array) {
        $parent.tabs$Array.push($this);
      } else {
        assignToParent($parent.$parent, assignToParent);
      }
    };

    /**
    * Removes the component from the parent.
    *
    * @param {VNode} $parent parent component
    * @param {function} removeFromParent the removeFromParent function for recursion
    * @private
    */
    var removeFromParent = ($parent, removeFromParent) => {
      if ($parent.tabs$Array) {
        $parent.tabs$Array.splice($parent.tabs$Array.map(t$ => normalize(t$.name)).indexOf(normalize(name.value)), 1);
      } else {
        /* @todo:adam test later */
        removeFromParent($parent.$parent, removeFromParent);
      }
    };

    // ============== WATCHERS ==============

    watch(children$, () => {
      /* istanbul ignore else */
      if (!active.value) {
        return;
      }
      each(children$.value, element$ => {
        element$.activate();
      });
    }, {
      deep: false,
      lazy: true
    });
    watch(tabLabel_, () => {
      tabLabel.value = tabLabel_.value && typeof tabLabel_.value === 'object' ? markRaw(tabLabel_.value) : tabLabel_.value;
    });
    watch(conditionList, (n, o) => {
      if (!(n !== null && n !== void 0 && n.length)) {
        removeChildConditions();
      } else {
        addChildConditions();
      }
    });

    // ================ HOOKS ===============

    onMounted(() => {
      // nextTick is required because elements$
      // only available after form is mounted,
      // which is later than the tab mount
      nextTick(() => {
        addChildConditions();
      });
    });
    onBeforeMount(() => {
      assignToParent($this.$parent, assignToParent);
    });
    onBeforeUnmount(() => {
      removeChildConditions();
      removeFromParent($this.$parent, removeFromParent);
    });
    return {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      elements$,
      index,
      isFirst,
      isLast,
      active,
      events,
      listeners,
      children$,
      visible,
      invalid,
      classes,
      Templates,
      template,
      available,
      isLabelComponent,
      tabLabel,
      tab$,
      tabs$,
      conditionList,
      select,
      activate,
      deactivate,
      on,
      off,
      fire,
      addChildConditions,
      removeChildConditions,
      resetChildConditions,
      updateConditions
    };
  }
};

var FormSteps = {
  name: 'FormSteps',
  emits: ['select', 'next', 'previous', 'finish'],
  props: {
    view: {
      required: false,
      type: [String],
      default: undefined
    }
  },
  setup(props, context) {
    var $this = getCurrentInstance().proxy;

    // ============ DEPENDENCIES ============

    var {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template
    } = base$1b(props, context);
    var {
      events,
      listeners,
      on,
      off,
      fire
    } = base$1i(props, context, {
      form$
    }, {
      events: context.emits
    });

    // ================ DATA ================

    /**
     * The child [`FormStep`](form-step) components.
     *
     * @type {array}
     * @default []
     */
    var steps$Array = ref([]);

    /**
     * Helper to store a watcher.
     *
     * @type {object}
     * @default null
     */
    var unwatchInvalid = ref(null);

    /**
     * Helper prop used for checking if the component exists.
     *
     * @type {boolean}
     * @private
     */
    var exists = ref(true);

    // ============== COMPUTED ==============

    /**
     * The object containing steps defined in [`Vueform`](vueform#option-steps).
     *
     * @type {object}
     */
    var steps = computed(() => {
      return form$.value.options.steps;
    });

    /**
     * The form elements' components.
     *
     * @type {object}
     */
    var elements$ = computed(() => {
      return form$.value.elements$;
    });

    /**
     * Whether there are any steps in [`pending`](form-step#property-pending) state.
     *
     * @type {boolean}
     */
    var pending = computed(() => {
      return some_1(visible$.value, {
        pending: true
      });
    });

    /**
     * Whether there are any steps in [`debouncing`](form-step#property-debouncing) state.
     *
     * @type {boolean}
     */
    var debouncing = computed(() => {
      return some_1(visible$.value, {
        debouncing: true
      });
    });

    /**
     * Whether there are any steps in [`invalid`](form-step#property-invalid) state.
     *
     * @type {boolean}
     */
    var invalid = computed(() => {
      return some_1(visible$.value, {
        invalid: true
      });
    });

    /**
     * Whether all the steps are [`done`](form-step#property-done).
     *
     * @type {boolean}
     */
    var done = computed(() => {
      return !some_1(visible$.value, {
        done: false
      });
    });

    /**
     * Whether there are any steps in [`busys`](form-step#property-busys) state.
     *
     * @type {boolean}
     */
    var busy = computed(() => {
      return pending.value || debouncing.value;
    });

    /**
     * The child [`FormStep`](form-step) components with indexed keys.
     *
     * @type {object}
     */
    var steps$ = computed(() => {
      var steps$ = {};
      each(steps$Array.value, step$ => {
        steps$[step$.name] = step$;
      });
      return steps$;
    });

    /**
     * All the visible [`FormStep`](form-step) components.
     *
     * @type {object}
     */
    var visible$ = computed(() => {
      var stepList$ = {};
      each(steps$.value, step$ => {
        if (step$.visible) {
          stepList$[step$.name] = step$;
        }
      });
      return stepList$;
    });

    /**
     * The first visible [`FormStep`](form-step) component.
     *
     * @type {FormStep|undefined}
     */
    var first$ = computed(() => {
      return find_1(visible$.value, step => {
        return step.visible;
      });
    });

    /**
     * The last visible [`FormStep`](form-step) component.
     *
     * @type {FormStep|undefined}
     */
    var last$ = computed(() => {
      return Object.values(visible$.value).pop();
    });

    /**
     * The current [`FormStep`](form-step) component.
     *
     * @type {FormStep|undefined}
     */
    var current$ = computed(() => {
      var current = find_1(steps$.value, {
        active: true
      });
      return current !== undefined ? current : {};
    });

    /**
     * The next visible [`FormStep`](form-step) component.
     *
     * @type {FormStep|undefined}
     */
    var next$ = computed(() => {
      return find_1(visible$.value, step => {
        return step.index > current$.value.index && step.visible;
      });
    });

    /**
     * The previous visible [`FormStep`](form-step) component.
     *
     * @type {FormStep|undefined}
     */
    var previous$ = computed(() => {
      return findLast_1(visible$.value, step => {
        return step.index < current$.value.index && step.visible;
      });
    });

    /**
     * The first invalid & visible [`FormStep`](form-step) component.
     *
     * @type {FormStep|undefined}
     */
    var firstInvalid$ = computed(() => {
      return find_1(visible$.value, {
        invalid: true
      });
    });

    /**
     * The first visible [`FormStep`](form-step) component which is not done yet.
     *
     * @type {FormStep|undefined}
     */
    var firstNonDone$ = computed(() => {
      return find_1(visible$.value, {
        done: false
      });
    });

    /**
     * The last enabled & visible [`FormStep`](form-step) component.
     *
     * @type {FormStep|undefined}
     */
    var lastEnabled$ = computed(() => {
      return findLast_1(visible$.value, {
        isDisabled: false
      });
    });

    /**
     * Whether is at the last step.
     *
     * @type {boolean}
     */
    var isAtLastStep = computed(() => {
      var last = findLast_1(visible$.value, {
        visible: true
      });

      // @todo:adam !current$.value will never be null or undefined, hardcoded {}
      /* istanbul ignore next: !last not worth the effort */
      if (!current$.value || !last) {
        return false;
      }
      return last.index === current$.value.index;
    });

    /**
     * Whether is at the first step.
     *
     * @type {boolean}
     */
    var isAtFirstStep = computed(() => {
      return current$.value.index === 0;
    });

    // =============== METHODS ==============

    /**
     * Go to a step and enable it. Optionally enable all steps up to it.
     *
     * @param {string} name* name of step to go to
     * @param {boolean} enableUntil whether steps should be enabled up to the selected step (default: `false`)
     * @returns {void}
     */
    var goTo = function goTo(name) {
      var enableUntil = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var step = visible$.value[name];
      step.enable();
      step.select();
      if (enableUntil) {
        nextTick(() => {
          enableUntilLastEnabled();
        });
      }
    };

    /**
     * Move to next step and enable it.
     *
     * @returns {void}
     */
    var next = () => {
      fire('next', next$.value);
      next$.value.enable();
      next$.value.select();
      if (form$.value.options.scrollOnNext && form$.value.$el.scrollIntoView) {
        nextTick(() => {
          form$.value.$el.scrollIntoView({
            behavior: 'smooth'
          });
        });
      }
    };

    /**
     * Move to previous step.
     *
     * @returns {void}
     */
    var previous = () => {
      fire('previous', previous$.value);
      previous$.value.select();
    };

    /**
     * Mark each [`FormStep`](form-step) as complete.
     *
     * @returns {void}
     */
    var complete = () => {
      each(steps$.value, step$ => {
        step$.complete();
      });
    };

    /**
     * Returns a specific [`FormStep`](form-step) component by index.
     *
     * @param {string} name* name of the step
     * @returns {FormStep|undefined}
     */
    var step$ = name => {
      return find_1(visible$.value, {
        name: name
      });
    };

    /**
     * Jump back to first visible step and disable all others.
     *
     * @returns {void}
     */
    var reset = () => {
      each(steps$.value, step$ => {
        step$.uncomplete();
        step$.disable();
      });
      first$.value.enable();
      first$.value.select();
    };

    /**
     * Enables all steps.
     *
     * @returns {void}
     */
    var enableAllSteps = () => {
      each(steps$.value, step$ => {
        step$.enable();
      });
    };

    /**
     * Invokes the form's `submit` event. If the form has any validation errors it will jump to the first step with error.
     *
     * @returns {Promise}
     */
    var submit = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(function* () {
        // Replaced with next because Vue didn't handle component's submit event in FFX
        // let form = form$.value.$el.nodeName === 'FORM' ? form$.value.$el : form$.value.$el.querySelector('form')
        // form.dispatchEvent(new Event('submit'))

        yield form$.value.submit();
        if (invalid.value) {
          firstInvalid$.value.select();
          nextTick(() => {
            form$.value.scrollToFirstInvalid();
          });
          return;
        }

        //@todo:adam it should not be necessary anymore since submit is async
        /* istanbul ignore next */
        unwatchInvalid.value = watch(invalid, isInvalid => {
          if (isInvalid) {
            firstInvalid$.value.select();
          }
          unwatchInvalid.value();
        });
      });
      return function submit() {
        return _ref.apply(this, arguments);
      };
    }();

    /**
     * Select a step.
     *
     * @param {FormStep} step$* the [`FormStep`](form-step) component to select
     * @returns {void}
     * @private
     */
    var select = step$ => {
      var curr$ = current$.value;
      each(elements$.value, element$ => {
        element$.deactivate();
      });
      each(steps$.value, step$ => {
        step$.deactivate();
      });
      fire('select', step$, curr$);
    };

    /**
     * Enable steps until a certain index.
     *
     * @param {number} index* index of the step
     * @returns {void}
     */
    var enableUntil = index => {
      each(steps$.value, step$ => {
        /* istanbul ignore else */
        if (step$.index <= index && step$.visible) {
          step$.enable();
        }
      });
    };

    /**
     * Enable all steps up to the current step.
     *
     * @returns {void}
     */
    var enableUntilCurrent = () => {
      enableUntil(current$.value.index);
    };

    /**
     * Enable all steps up to the last enabled.
     *
     * @returns {void}
     */
    var enableUntilLastEnabled = () => {
      /* istanbul ignore next: not reproducible only for Vue 2 Cli compatibility */
      if (!lastEnabled$.value && !first$.value) {
        return;
      }
      enableUntil(lastEnabled$.value !== undefined ? lastEnabled$.value.index : first$.value.index);
    };

    /**
     * Set the component to the parent as if `refs` were used.
     *
     * @param {VNode} $parent parent component
     * @param {function} assignToParent the assignToParent function for recursion
     * @returns {void}
     * @private
     */
    var assignToParent = ($parent, assignToParent) => {
      if ($parent.steps$ !== undefined) {
        form$.value.$set($parent, 'steps$', $this);
      } else {
        assignToParent($parent.$parent, assignToParent);
      }
    };

    /**
    * Removes the component from the parent.
    *
    * @param {VNode} $parent parent component
    * @param {function} removeFromParent the removeFromParent function for recursion
    * @private
    */
    var removeFromParent = ($parent, removeFromParent) => {
      if ($parent.steps$ !== undefined) {
        form$.value.$set($parent, 'steps$', null);
      } else {
        /* @todo:adam test later */
        removeFromParent($parent.$parent, removeFromParent);
      }
    };

    // ============== PROVIDE ===============

    provide('View', View);

    // ============== WATCHERS ==============

    /* istanbul ignore next: can not reproduce */
    watch(elements$, (newValue, oldValue) => {
      var newElements$ = difference_1(keys_1(newValue), keys_1(oldValue));
      each(newElements$, newElement$ => {
        elements$.value[newElement$].deactivate();
      });
    }, {
      deep: false,
      lazy: true
    });
    watch(steps, () => {
      nextTick(() => {
        /* istanbul ignore next: nothing happens */
        if (lastEnabled$.value === undefined) ;
        if (current$.value.index === undefined && first$.value) {
          first$.value.select();
        }
      });
    }, {
      deep: true,
      lazy: true
    });

    // Resort steps$Array when steps
    // order changes or a tab is removed
    watch(steps, newValue => {
      var newSteps$Array = [];
      each(newValue, (t, name) => {
        newSteps$Array.push(steps$Array.value[steps$Array.value.map(t$ => normalize(t$.name)).indexOf(normalize(name))]);
      });
      steps$Array.value = newSteps$Array;
    }, {
      flush: 'post'
    });

    // =============== HOOKS ================

    onBeforeMount(() => {
      assignToParent($this.$parent, assignToParent);
    });
    onBeforeUnmount(() => {
      removeFromParent($this.$parent, removeFromParent);
    });
    onMounted(() => {
      // nextTick is required because elements$
      // only available after form is mounted,
      // which is later than the steps mount
      nextTick(() => {
        if (current$.value === undefined || current$.value.index === undefined) {
          first$.value.enable();
          first$.value.select();
        }
        enableUntilCurrent();
        // if new steps are shown because of
        // changing conditions the ones before
        // the last active should be enabled
        watch(visible$, () => {
          enableUntilLastEnabled();
        }, {
          flush: 'post'
        });
      });
    });
    return {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      steps,
      elements$,
      steps$Array,
      events,
      listeners,
      exists,
      classes,
      Templates,
      template,
      steps$,
      pending,
      debouncing,
      invalid,
      done,
      busy,
      visible$,
      first$,
      last$,
      current$,
      next$,
      previous$,
      firstInvalid$,
      firstNonDone$,
      lastEnabled$,
      isAtLastStep,
      isAtFirstStep,
      goTo,
      next,
      previous,
      complete,
      step$,
      reset,
      enableAllSteps,
      submit,
      select,
      enableUntil,
      enableUntilCurrent,
      enableUntilLastEnabled,
      on,
      off,
      fire
    };
  }
};

var FormStepsControls = {
  name: 'FormStepsControls',
  slots: ['previous', 'next', 'finish'],
  props: {
    labels: {
      type: Boolean,
      required: false,
      default: true
    },
    view: {
      required: false,
      type: [String],
      default: undefined
    }
  },
  setup(props, context) {
    // ============ DEPENDENCIES ============

    var {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template
    } = base$1b(props, context);

    // ============== PROVIDE ===============

    provide('View', View);
    return {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template
    };
  }
};

var FormStepsControl = {
  name: 'FormStepsControl',
  slots: ['default'],
  props: {
    type: {
      type: [String],
      required: true
    },
    labels: {
      type: [Boolean],
      required: false,
      default: true,
      private: true
    },
    view: {
      required: false,
      type: [String],
      default: undefined
    }
  },
  setup(props, context) {
    var {
      type,
      labels
    } = toRefs(props);

    // ============ DEPENDENCIES ============

    var {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template
    } = base$1b(props, context);

    // ============== COMPUTED ==============

    /**
     * The label definition of the component.
     *
     * @type {string|function|Component}
     * @private
     */
    var baseLabel = computed(() => {
      /* istanbul ignore next: can not tell if returned  */
      if (!labels.value) {
        return null;
      }
      var stepLabels = current$ && current$.value ? current$.value.labels : /* istanbul ignore next: failsafe only */null;
      switch (type.value) {
        case 'previous':
          return stepLabels && stepLabels.previous ? stepLabels.previous : form$.value.translations.vueform.steps.previous;
        case 'next':
          return stepLabels && stepLabels.next ? stepLabels.next : form$.value.translations.vueform.steps.next;
        case 'finish':
          return stepLabels && stepLabels.finish ? stepLabels.finish : stepLabels && stepLabels.next ? stepLabels.next : form$.value.translations.vueform.steps.finish;
      }
    });
    var {
      isLabelComponent,
      label
    } = base$19(props, context, {
      component$: form$,
      labelDefinition: baseLabel
    });

    // ============== COMPUTED ==============

    /**
     * The [`FormSteps`](form-steps) component.
     *
     * @type {FormSteps}
     * @private
     */
    var steps$ = computed(() => {
      return form$.value.steps$;
    });

    /**
     * The currently active [`FormStep`](form-step) component.
     *
     * @type {FormStep}
     * @private
     */
    var current$ = computed(() => {
      return steps$.value ? steps$.value.current$ : /* istanbul ignore next: failsafe only */undefined;
    });

    /**
     * Whether the control should be visible.
     *
     * @type {boolean}
     */
    var visible = computed(() => {
      var buttons = current$ && current$.value ? current$.value.buttons : /* istanbul ignore next: failsafe only */null;
      switch (type.value) {
        case 'previous':
          return !buttons ? true : buttons.previous !== false;
        case 'next':
          return steps$.value && !steps$.value.isAtLastStep && (!buttons || buttons.next !== false);
        case 'finish':
          return steps$.value && steps$.value.isAtLastStep && (!buttons || buttons.finish !== false);
      }
    });

    /**
     * Whether the control should be disabled.
     *
     * @type {boolean}
     */
    var isDisabled = computed(() => {
      switch (type.value) {
        case 'previous':
          return steps$.value && steps$.value.isAtFirstStep;
        case 'next':
          return current$.value !== undefined && current$.value.index !== undefined && (
          // only disable next because of invalidity
          // if element validations are triggered on
          // change, otherwise it might occur that the
          // step has invalid fields, which values have
          // changed to valid, but still marked as invalid

          current$.value.invalid && form$.value.shouldValidateOnChange || current$.value.busy || form$.value.isLoading);
        case 'finish':
          // only disable finish because of invalidity
          // if element validations are triggered on
          // change, otherwise it might occur that the
          // form has invalid fields, which values have
          // changed to valid, but still marked as invalid
          return steps$.value.invalid && form$.value.shouldValidateOnChange || steps$.value.busy || form$.value.submitting || form$.value.isDisabled || form$.value.isLoading;
      }
    });

    /**
     * Whether the control is in loading state (except for previous).
     *
     * @type {boolean}
     */
    var isLoading = computed(() => {
      return type.value === 'previous' ? false : form$.value.isLoading || form$.value.submitting;
    });

    // =============== METHODS ==============

    /**
     * Go to the previous form step.
     *
     * @returns {void}
     */
    var previous = () => {
      steps$.value.previous();
    };

    /**
     * Complete the current step and go to the next one (async). If the form's [`validateOn`](vueform#option-validate-on) prop or `config.validateOn` contains `'step'` also validates the elements within the step before moving forward (and stay if there's any error).
     *
     * @returns {Promise}
     */
    var next = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(function* () {
        /* istanbul ignore else */
        if (form$.value.shouldValidateOnStep) {
          yield current$.value.validate();
        }
        if (current$.value.invalid) {
          form$.value.scrollToFirstInvalid();
          return;
        }
        current$.value.complete();
        steps$.value.next();
      });
      return function next() {
        return _ref.apply(this, arguments);
      };
    }();

    /**
     * Complete the final step and submit the form (async).
     *
     * @returns {Promise}
     */
    var finish = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator(function* () {
        steps$.value.fire('finish');
        steps$.value.complete();
        steps$.value.submit();
      });
      return function finish() {
        return _ref2.apply(this, arguments);
      };
    }();

    /**
     * Handles `click` event.
     *
     * @returns {void}
     * @param {Event} e* event object
     * @private
     */
    var handleClick = e => {
      switch (type.value) {
        case 'previous':
          previous();
          break;
        case 'next':
          next();
          if (e.key === 'Enter' || e.key === ' ') {
            nextTick(() => {
              nextTick(() => {
                var _current$$value$child;
                var firstEl$ = current$ === null || current$ === void 0 || (_current$$value$child = current$.value.children$) === null || _current$$value$child === void 0 ? void 0 : _current$$value$child.find(el$ => {
                  var _current$$value$eleme;
                  return el$.name === (current$ === null || current$ === void 0 || (_current$$value$eleme = current$.value.elements) === null || _current$$value$eleme === void 0 ? void 0 : _current$$value$eleme[0]);
                });
                if (!firstEl$) {
                  return;
                }
                firstEl$.focus();
              });
            });
          }
          break;
        case 'finish':
          finish();
          break;
      }
    };
    return {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      steps$,
      classes,
      Templates,
      template,
      visible,
      isDisabled,
      isLoading,
      current$,
      label,
      isLabelComponent,
      previous,
      next,
      finish,
      handleClick
    };
  }
};

var FormStep = {
  name: 'FormStep',
  emits: ['activate', 'inactivate', 'enable', 'disable', 'complete'],
  slots: ['default'],
  props: {
    name: {
      type: [String, Number],
      required: true
    },
    label: {
      type: [String, Object, Function],
      required: false,
      default: null
    },
    labels: {
      type: [Object],
      required: false,
      default: () => ({})
    },
    buttons: {
      type: [Object],
      required: false,
      default: () => ({})
    },
    elements: {
      type: [Array],
      required: false,
      default: () => []
    },
    conditions: {
      type: [Array],
      required: false,
      default: () => []
    },
    addClass: {
      required: false,
      type: [Array, Object, String],
      default: null
    },
    removeClass: {
      required: false,
      type: [Array, Object],
      default: null
    },
    replaceClass: {
      required: false,
      type: [Object],
      default: null
    },
    overrideClass: {
      required: false,
      type: [Array, Object, String],
      default: null
    },
    view: {
      required: false,
      type: [String],
      default: undefined
    },
    onActivate: {
      type: [Function],
      required: false,
      default: null,
      private: true
    },
    onInactivate: {
      type: [Function],
      required: false,
      default: null,
      private: true
    },
    onDisable: {
      type: [Function],
      required: false,
      default: null,
      private: true
    },
    onEnable: {
      type: [Function],
      required: false,
      default: null,
      private: true
    }
  },
  setup(props, context) {
    var {
      name,
      label,
      elements
    } = toRefs(props);
    var $this = getCurrentInstance().proxy;

    // ============ DEPENDENCIES ============

    var {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template
    } = base$1b(props, context);
    var {
      available,
      conditionList,
      updateConditions
    } = base$1a(props, context, {
      form$
    });
    var {
      isLabelComponent,
      label: stepLabel_
    } = base$19(props, context, {
      component$: form$,
      labelDefinition: label
    });
    var {
      events,
      listeners,
      on,
      off,
      fire
    } = base$1i(props, context, {
      form$
    }, {
      events: context.emits
    });

    // ================ DATA ================

    /**
     * The label of the step.
     *
     * @type {string|Component}
     * @default null
     */
    var stepLabel = ref(stepLabel_.value && typeof stepLabel_.value === 'object' ? markRaw(stepLabel_.value) : stepLabel_.value);

    /**
     * Whether the step is active.
     *
     * @type {boolean}
     * @default false
     */
    var active = ref(false);

    /**
     * Whether the step is disabled.
     *
     * @type {boolean}
     * @default true
     */
    var isDisabled = ref(true);

    /**
     * Whether the step is completed.
     *
     * @type {boolean}
     * @default false
     */
    var completed = ref(false);

    // ============== COMPUTED ==============

    /**
     * The form elements' components.
     *
     * @type {object}
     */
    var elements$ = computed(() => {
      return form$.value.elements$;
    });

    /**
     * The parent [`FormSteps`](form-steps) component.
     *
     * @type {FormSteps}
     */
    var steps$ = computed(() => {
      return form$.value.steps$ || /* istanbul ignore next: failsafe only, step can not exist by itself */{};
    });

    /**
     * The label definition of the component.
     *
     * @type {string}
     * @private
     */
    var baseLabel = computed(() => {
      return label.value;
    });

    /**
     * Index of this step among the other steps which are not hidden by unmet conditions.
     *
     * @type {number}
     */
    var index = computed(() => {
      var _steps$$value;
      return Object.keys((steps$ === null || steps$ === void 0 || (_steps$$value = steps$.value) === null || _steps$$value === void 0 ? void 0 : _steps$$value.steps$) || /* istanbul ignore next: failsafe only, step can not exist by itself */{}).indexOf(name.value);
    });

    /**
     * Whether the step is the first.
     *
     * @type {boolean}
     */
    var isFirst = computed(() => {
      return index.value === 0;
    });

    /**
     * Whether the step is the first.
     *
     * @type {boolean}
     */
    var isLast = computed(() => {
      return steps$.value.last$.name === name.value;
    });

    /**
     * The elements' components in the step.
     *
     * @type {object}
     */
    var children$ = computed(() => {
      return filter_1(elements$.value, (element$, key) => {
        return elements.value.indexOf(key) !== -1;
      });
    });

    /**
     * Whether the step should be visible.
     *
     * @type {boolean}
     */
    var visible = computed(() => {
      return available.value;
    });

    /**
      * Whether the step has any invalid elements.
      *
      * @type {boolean}
      */
    var invalid = computed(() => {
      return some_1(children$.value, {
        available: true,
        invalid: true
      });
    });

    /**
      * Whether the step has any pending elements.
      *
      * @type {boolean}
      */
    var pending = computed(() => {
      return some_1(children$.value, {
        available: true,
        pending: true
      });
    });

    /**
      * Whether the step has any debouncing elements.
      *
      * @type {boolean}
      */
    var debouncing = computed(() => {
      return some_1(children$.value, {
        available: true,
        debouncing: true
      });
    });

    /**
      * Whether all the elements in the step were already validated at least once.
      *
      * @type {boolean}
      */
    var validated = computed(() => {
      return !some_1(children$.value, {
        available: true,
        validated: false
      });
    });

    /**
      * Whether the step has any busy elements.
      *
      * @type {boolean}
      */
    var busy = computed(() => {
      return pending.value || debouncing.value;
    });

    /**
      * Whether the step is done (completed, validated has no invalid or pending elements).
      *
      * @type {boolean}
      */
    var done = computed(() => {
      return completed.value && validated.value && !invalid.value && !pending.value;
    });

    /**
     * The step's component.
     *
     * @type {FormStep}
     */
    var step$ = computed(() => {
      var _form$$value$steps$;
      return (_form$$value$steps$ = form$.value.steps$) === null || _form$$value$steps$ === void 0 ? void 0 : _form$$value$steps$.steps$[name.value];
    });

    // =============== METHODS ==============

    /**
     * Validate all elements within the step (async).
     *
     * @returns {Promise}
     */
    var validate = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(function* () {
        // only skip validation if the elements
        // are validated and none is invalid and
        // elements get revalidated on change
        if (validated.value && !invalid.value && form$.value.shouldValidateOnChange) {
          return;
        }
        yield asyncForEach(children$.value, /*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator(function* (element$) {
            /* istanbul ignore else */
            if ((!element$.validated || element$.invalid || !form$.value.shouldValidateOnChange) && element$.available && !element$.isStatic) {
              yield element$.validate();
            }
          });
          return function (_x) {
            return _ref2.apply(this, arguments);
          };
        }());
      });
      return function validate() {
        return _ref.apply(this, arguments);
      };
    }();

    /**
     * Activate the step.
     *
     * @returns {void}
     */
    var activate = () => {
      if (active.value) {
        return;
      }
      active.value = true;
      fire('activate');
    };

    /**
     * Deactivate the step.
     *
     * @returns {void}
     */
    var deactivate = () => {
      if (!active.value) {
        return;
      }
      active.value = false;
      fire('inactivate');
    };

    /**
     * Enable the step.
     *
     * @returns {void}
     */
    var enable = () => {
      if (!isDisabled.value) {
        return;
      }
      isDisabled.value = false;
      fire('enable');
    };

    /**
     * Disable the step.
     *
     * @returns {void}
     */
    var disable = () => {
      if (isDisabled.value) {
        return;
      }
      isDisabled.value = true;
      fire('disable');
    };

    /**
     * Complete the step.
     *
     * @returns {void}
     */
    var complete = () => {
      if (completed.value) {
        return;
      }
      completed.value = true;
      fire('complete');
    };

    /**
     * Uncomplete the step.
     *
     * @returns {void}
     */
    var uncomplete = () => {
      completed.value = false;
    };

    /**
     * Deactivate all other steps and set the current one as active.
     *
     * @returns {void}
     */
    var select = () => {
      var _steps$$value2, _steps$$value3;
      if (isDisabled.value || !((_steps$$value2 = steps$.value) !== null && _steps$$value2 !== void 0 && _steps$$value2.select)) {
        return;
      }
      (_steps$$value3 = steps$.value) === null || _steps$$value3 === void 0 || _steps$$value3.select(step$.value);
      each(children$.value, element$ => {
        element$.activate();
      });
      activate();
    };

    /**
      * Apply conditions of the step to its elements.
      *
      * @returns {void}
      * @private
      */
    var addChildConditions = () => {
      /* istanbul ignore else */
      if (conditionList.value.length == 0) {
        return;
      }
      Object.values(children$.value).forEach(element$ => {
        element$.addConditions('step', conditionList.value);
      });
    };

    /**
      * Remove conditions of the elements of the step.
      *
      * @returns {void}
      * @private
      */
    var removeChildConditions = () => {
      Object.values(children$.value).forEach(element$ => {
        element$.removeConditions('step');
      });
    };

    /**
      * Resets conditions of the elements of the step.
      *
      * @returns {void}
      * @private
      */
    var resetChildConditions = () => {
      removeChildConditions();
      addChildConditions();
    };

    /**
     * Set the component to the parent as if `refs` were used.
     *
     * @param {VNode} $parent parent component
     * @param {function} assignToParent the assignToParent function for recursion
     * @returns {void}
     * @private
     */
    var assignToParent = ($parent, assignToParent) => {
      if ($parent.steps$Array) {
        $parent.steps$Array.push($this);
      } else {
        assignToParent($parent.$parent, assignToParent);
      }
    };

    /**
    * Removes the component from the parent.
    *
    * @param {VNode} $parent parent component
    * @param {function} removeFromParent the removeFromParent function for recursion
    * @private
    */
    var removeFromParent = ($parent, removeFromParent) => {
      if ($parent.steps$Array) {
        $parent.steps$Array.splice($parent.steps$Array.map(t$ => normalize(t$.name)).indexOf(normalize(name.value)), 1);
      } else {
        /* @todo:adam test later */
        removeFromParent($parent.$parent, removeFromParent);
      }
    };

    // ============== WATCHERS ==============

    watch(visible, val => {
      // if a revealed step is earlier than the
      // current step, it should be enabled
      if (val && index.value < form$.value.steps$.current$.index) {
        enable();
      }
    });
    watch(children$, () => {
      /* istanbul ignore else */
      if (!active.value) {
        return;
      }
      each(children$.value, element$ => {
        element$.activate();
      });
    }, {
      deep: false,
      lazy: true
    });
    watch(stepLabel_, () => {
      stepLabel.value = stepLabel_.value && typeof stepLabel_.value === 'object' ? markRaw(stepLabel_.value) : stepLabel_.value;
    });
    watch(conditionList, (n, o) => {
      if (!(n !== null && n !== void 0 && n.length)) {
        removeChildConditions();
      } else {
        addChildConditions();
      }
    });

    // ================ HOOKS ===============

    onMounted(() => {
      // nextTick is required because elements$
      // only available after form is mounted,
      // which is later than the steps mount
      nextTick(() => {
        addChildConditions();
      });
    });
    onBeforeMount(() => {
      assignToParent($this.$parent, assignToParent);
    });
    onBeforeUnmount(() => {
      removeChildConditions();
      removeFromParent($this.$parent, removeFromParent);
    });
    return {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      steps$,
      elements$,
      active,
      isDisabled,
      isFirst,
      isLast,
      completed,
      events,
      listeners,
      children$,
      visible,
      invalid,
      pending,
      classes,
      Templates,
      template,
      available,
      baseLabel,
      debouncing,
      validated,
      busy,
      done,
      step$,
      isLabelComponent,
      stepLabel,
      index,
      conditionList,
      validate,
      activate,
      deactivate,
      enable,
      disable,
      complete,
      uncomplete,
      select,
      on,
      off,
      fire,
      addChildConditions,
      removeChildConditions,
      resetChildConditions,
      updateConditions
    };
  }
};

var base$18 = function base(props, context, dependencies) {
  // ============== METHODS ===============

  /**
  * Transforms an element `type` into the element's component name.
  * 
  * @param {string} element* element `type`
  * @returns {string}
  * @private
  */
  var component = element => {
    return "".concat(upperFirst_1(camelCase_1(element.type)), "Element");
  };
  return {
    component
  };
};

var FormElements = {
  name: 'FormElements',
  slots: ['default'],
  props: {
    view: {
      required: false,
      type: [String],
      default: undefined
    }
  },
  setup(props, context) {
    // ============ DEPENDENCIES ============

    var {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template
    } = base$1b(props, context);
    var {
      component
    } = base$18();

    // ============ COMPUTED ============

    /**
     * The form schema.
     * 
     * @type {object}
     * @private
     */
    var schema = computed(() => {
      return form$.value.options.schema;
    });
    return {
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template,
      schema,
      component
    };
  }
};

var base$17 = function base(props, context, dependencies) {
  // =============== INJECT ===============

  /**
  * The parent element's component.
  * 
  * @type {VueformElement}
  */
  var el$ = inject('el$');
  return {
    el$
  };
};

var base$16 = function base(props, context, dependencies) {
  var componentName = context.name;

  // =============== INJECT ===============

  var {
    form$
  } = base$1f();
  var {
    el$
  } = base$17();
  var {
    theme
  } = base$1e();
  var {
    Size
  } = base$1d();
  var {
    View
  } = base$1c(props, context);

  // ============== COMPUTED ===============

  /**
   * The component instance (self).
   * 
   * @type {VueformComponent}
   */
  var component$ = computed(() => {
    return getCurrentInstance().proxy;
  });

  /**
   * The classes instance (for testing purpose).
   * 
   * @type {MergeClasses}
   * @private
   */
  var classesInstance = computed(() => {
    return new MergeClasses({
      component: componentName.value,
      component$: component$,
      theme: theme.value,
      config: form$.value.$vueform.config,
      templates: Templates.value,
      view: View.value,
      merge: [form$.value.options, el$.value]
    });
  });

  /**
   * The component's classes.
   * 
   * @type {object}
   */
  var classes = computed(() => {
    return classesInstance.value.classes;
  });

  /**
   * The list of templates available to the component.
   * 
   * @type {object}
   * @private
   */
  var Templates = computed(() => {
    return el$.value.Templates;
  });

  /**
   * The component's template.
   * 
   * @type {object}
   */
  var template = computed(() => {
    return View.value && Templates.value["".concat(componentName.value, "_").concat(View.value)] ? Templates.value["".concat(componentName.value, "_").concat(View.value)] : Templates.value[componentName.value];
  });
  return {
    el$,
    form$,
    theme,
    Size,
    View,
    classesInstance,
    classes,
    Templates,
    template
  };
};

var ElementLayout = {
  name: 'ElementLayout',
  slots: ['field', 'label', 'info', 'description', 'before', 'between', 'after'],
  props: {
    multiple: {
      type: [Boolean],
      required: false,
      default: false
    },
    view: {
      type: [String],
      required: false,
      default: undefined
    }
  },
  setup(props, context) {
    // ============ DEPENDENCIES ============

    var {
      form$,
      el$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme
    } = base$16(props, context);

    // ============== COMPUTED ==============

    /**
     * Whether the element should be visible.
     * 
     * @type {boolean}
     */
    var visible = computed(() => {
      return el$.value.visible;
    });
    return {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      theme,
      Templates,
      template,
      classes,
      visible
    };
  }
};

var ElementLayoutInline = {
  name: 'ElementLayoutInline',
  slots: ['field', 'label', 'info', 'description', 'before', 'between', 'after'],
  setup(props, context) {
    // ============ DEPENDENCIES ============

    var {
      form$,
      el$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme
    } = base$16(props, context);

    // ============== COMPUTED ==============

    /**
     * Whether the element should be visible.
     * 
     * @type {boolean}
     */
    var visible = computed(() => {
      return el$.value.visible;
    });
    return {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      theme,
      Templates,
      template,
      classes,
      visible
      // hasLabel,
    };
  }
};

var ElementLoader = {
  name: 'ElementLoader',
  setup(props, context) {
    // ============ DEPENDENCIES ============

    var {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme
    } = base$16(props, context);
    return {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template
    };
  }
};

var ElementLabelFloating = {
  name: 'ElementLabelFloating',
  props: {
    visible: {
      type: Boolean,
      default: false
    }
  },
  setup(props, context) {
    // ============ DEPENDENCIES ============

    var {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme
    } = base$16(props, context);

    // =============== INJECT ===============

    var config$ = inject('config$');

    // ============== COMPUTED ==============

    /**
     * The floating label of the element, defined via `floating` prop.
     *
     * @type {string}
     */
    var floating = computed(() => {
      var _form$$value$options$;
      var floating = localize(el$.value.floating || (/* istanbul ignore next: tested, but not covered */form$.value.options.floatPlaceholders ? el$.value.placeholder : null), config$.value, form$.value);
      if (el$.value.isRequired && ((_form$$value$options$ = form$.value.options.showRequired) === null || _form$$value$options$ === void 0 ? void 0 : _form$$value$options$.indexOf('floating')) !== -1) {
        floating += '*';
      }
      return form$.value.$vueform.sanitize(floating);
    });
    return {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template,
      floating
    };
  }
};

var ElementLabel = {
  name: 'ElementLabel',
  slots: ['default', 'info'],
  setup(props, context) {
    // ============ DEPENDENCIES ============

    var {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme
    } = base$16(props, context);
    var {
      label,
      isLabelComponent
    } = base$19(props, context, {
      labelDefinition: computed(() => {
        return el$.value.label;
      }),
      component$: el$
    });

    // ============== COMPUTED ==============

    /**
     * The name of the element.
     *
     * @type {string}
     * @private
     */
    var name = computed(() => {
      return el$.value.fieldId;
    });

    /**
     * The `id` attribute of the container.
     *
     * @type {string}
     */
    var id = computed(() => {
      return el$.value.labelId;
    });

    /**
     * Whether the element has a `label` option, a `#label` slot or `Vueform` component's [`forceLabels`](vueform#force-labels) option is `true`.
     *
     * @type {boolean}
     *
     */
    var hasLabel = computed(() => {
      return el$.value.hasLabel;
    });

    /**
     * Whether the label is provided as a slot.
     *
     * @type {boolean}
     * @private
     */
    var isSlot = computed(() => {
      var _el$$value$slots, _el$$value$$slots, _el$$value$$scopedSlo;
      return !!((_el$$value$slots = el$.value.slots) !== null && _el$$value$slots !== void 0 && _el$$value$slots.label || (_el$$value$$slots = el$.value.$slots) !== null && _el$$value$$slots !== void 0 && _el$$value$$slots.label || (/* istanbul ignore next: Vue2 is not checked */form$.value.$vueform.vueVersion === 2 && (_el$$value$$scopedSlo = el$.value.$scopedSlots) !== null && _el$$value$$scopedSlo !== void 0 && _el$$value$$scopedSlo.label));
    });
    return {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template,
      label,
      isLabelComponent,
      name,
      id,
      hasLabel,
      isSlot
    };
  }
};

function isInViewport(element) {
  var rect = element.getBoundingClientRect();
  return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
}

var ElementInfo = {
  name: 'ElementInfo',
  slots: ['default'],
  setup(props, context) {
    // ============ DEPENDENCIES ============

    var {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme
    } = base$16(props, context);

    // =============== INJECT ===============

    var config$ = inject('config$');

    // ================ DATA ================

    /**
     * The position of the info.
     *
     * @type {boolean}
     * @default false
     * @private
     */
    var position = ref(el$.value.infoPosition);

    // ============== COMPUTED ==============

    /**
     * The info for the element, defined via the element's `info` prop.
     *
     * @type {string}
     */
    var info = computed(() => {
      return form$.value.$vueform.sanitize(localize(el$.value.info, config$.value, form$.value));
    });

    /**
     * The `id` attribute of the container.
     *
     * @type {string}
     */
    var id = computed(() => {
      return el$.value.infoId;
    });

    /**
     * Whether the info is provided as a slot.
     *
     * @type {boolean}
     * @private
     */
    var isSlot = computed(() => {
      var _el$$value$slots, _el$$value$$slots, _el$$value$$scopedSlo;
      return !!((_el$$value$slots = el$.value.slots) !== null && _el$$value$slots !== void 0 && _el$$value$slots.info || (_el$$value$$slots = el$.value.$slots) !== null && _el$$value$$slots !== void 0 && _el$$value$$slots.info || (/* istanbul ignore next: Vue2 is not checked */form$.value.$vueform.vueVersion === 2 && (_el$$value$$scopedSlo = el$.value.$scopedSlots) !== null && _el$$value$$scopedSlo !== void 0 && _el$$value$$scopedSlo.info));
    });

    // =============== METHODS ==============

    /**
     * Handles the info hover.
     *
     * @param {Event|object} e
     * @returns {Promise}
     * @private
     */
    /* istanbul ignore next: not worth it */
    var handleMouseOver = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(function* (e) {
        if (position.value !== el$.value.infoPosition) {
          return;
        }
        yield nextTick();
        var wrapper = e.target.querySelector('div');
        if (!wrapper) {
          return;
        }
        if (!isInViewport(wrapper)) {
          position.value = 'right';
        }
        yield nextTick();
        if (!isInViewport(wrapper)) {
          position.value = 'top';
        }
        yield nextTick();
        if (!isInViewport(wrapper)) {
          position.value = 'left';
        }
        yield nextTick();
        if (!isInViewport(wrapper)) {
          position.value = 'bottom';
        }
      });
      return function handleMouseOver(_x) {
        return _ref.apply(this, arguments);
      };
    }();
    return {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template,
      info,
      isSlot,
      position,
      id,
      handleMouseOver
    };
  }
};

var ElementDescription = {
  name: 'ElementDescription',
  slots: ['default'],
  setup(props, context) {
    // ============ DEPENDENCIES ============

    var {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme
    } = base$16(props, context);

    // =============== INJECT ===============

    var config$ = inject('config$');

    // ============== COMPUTED ==============

    /**
     * The element's description, defined via the element's `description` option.
     *
     * @type {string}
     */
    var description = computed(() => {
      return form$.value.$vueform.sanitize(localize(el$.value.description, config$.value, form$.value));
    });

    /**
     * The `id` attribute of the container.
     *
     * @type {string}
     */
    var id = computed(() => {
      return el$.value.descriptionId;
    });

    /**
     * Whether the description is provided as a slot.
     *
     * @type {boolean}
     * @private
     */
    var isSlot = computed(() => {
      var _el$$value$slots, _el$$value$$slots, _el$$value$$scopedSlo;
      return !!((_el$$value$slots = el$.value.slots) !== null && _el$$value$slots !== void 0 && _el$$value$slots.description || (_el$$value$$slots = el$.value.$slots) !== null && _el$$value$$slots !== void 0 && _el$$value$$slots.description || (/* istanbul ignore next: Vue2 is not checked */form$.value.$vueform.vueVersion === 2 && (_el$$value$$scopedSlo = el$.value.$scopedSlots) !== null && _el$$value$$scopedSlo !== void 0 && _el$$value$$scopedSlo.description));
    });
    return {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template,
      description,
      isSlot,
      id
    };
  }
};

var ElementError = {
  name: 'ElementError',
  setup(props, context) {
    // ============ DEPENDENCIES ============

    var {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme
    } = base$16(props, context);

    // ============== COMPUTED ==============

    /**
     * The first error of the element.
     * 
     * @type {string}
     */
    var error = computed(() => {
      return form$.value.$vueform.sanitize(el$.value.error);
    });

    /**
     * Whether to show the error.
     * 
     * @type {boolean}
     */
    var showError = computed(() => {
      return error.value && el$.value.displayErrors;
    });

    /**
     * The `id` attribute of the container.
     * 
     * @type {string}
     */
    var id = computed(() => {
      return el$.value.errorId;
    });
    return {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template,
      error,
      showError,
      id
    };
  }
};

var ElementMessage = {
  name: 'ElementMessage',
  setup(props, context) {
    // ============ DEPENDENCIES ============

    var {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme
    } = base$16(props, context);

    // ============== COMPUTED ==============

    /**
     * The first message of the element.
     *
     * @type {string}
     */
    var message = computed(() => {
      return form$.value.$vueform.sanitize(el$.value.messageBag ? el$.value.messageBag.message : /* istanbul ignore next: messageBag itself will always be defined */null);
    });
    return {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template,
      message
    };
  }
};

var ElementRequired = {
  name: 'ElementRequired',
  slots: ['default'],
  setup(props, context) {
    // ============ DEPENDENCIES ============

    var {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme
    } = base$16(props, context);

    // ============== COMPUTED ==============

    /**
     * Whether the required sign (*) should be visible.
     * 
     * @type {boolean}
     */
    var visible = computed(() => {
      var _form$$value$options$;
      return el$.value.isRequired && ((_form$$value$options$ = form$.value.options.showRequired) === null || _form$$value$options$ === void 0 ? void 0 : _form$$value$options$.indexOf('label')) !== -1;
    });

    /**
     * Whether the required is provided as a slot.
     *
     * @type {boolean}
     * @private
     */
    var isSlot = computed(() => {
      var _el$$value$slots, _el$$value$$slots, _el$$value$$scopedSlo;
      return !!((_el$$value$slots = el$.value.slots) !== null && _el$$value$slots !== void 0 && _el$$value$slots.required || (_el$$value$$slots = el$.value.$slots) !== null && _el$$value$$slots !== void 0 && _el$$value$$slots.required || (/* istanbul ignore next: Vue2 is not checked */form$.value.$vueform.vueVersion === 2 && (_el$$value$$scopedSlo = el$.value.$scopedSlots) !== null && _el$$value$$scopedSlo !== void 0 && _el$$value$$scopedSlo.required));
    });
    return {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme,
      visible,
      isSlot
    };
  }
};

var ElementText = {
  name: 'ElementText',
  slots: ['default'],
  props: {
    type: {
      type: String,
      required: true
    }
  },
  setup(props, context) {
    var {
      type
    } = toRefs(props);

    // ============ DEPENDENCIES ============

    var {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme
    } = base$16(props, context);

    // =============== INJECT ===============

    var config$ = inject('config$');

    // ============== COMPUTED ==============

    /**
     * The value of the content type.
     *
     * @type {string}
     * @private
     */
    var content = computed(() => {
      return form$.value.$vueform.sanitize(localize(el$.value[type.value], config$.value, form$.value));
    });

    /**
     * Whether the contents are provided as a slot.
     *
     * @type {boolean}
     * @private
     */
    var isSlot = computed(() => {
      var _el$$value$slots, _el$$value$$slots, _el$$value$$scopedSlo;
      return !!((_el$$value$slots = el$.value.slots) !== null && _el$$value$slots !== void 0 && _el$$value$slots[type.value] || (_el$$value$$slots = el$.value.$slots) !== null && _el$$value$$slots !== void 0 && _el$$value$$slots[type.value] || (/* istanbul ignore next: Vue2 is not checked */form$.value.$vueform.vueVersion === 2 && (_el$$value$$scopedSlo = el$.value.$scopedSlots) !== null && _el$$value$$scopedSlo !== void 0 && _el$$value$$scopedSlo[type.value]));
    });
    return {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template,
      content,
      isSlot
    };
  }
};

var DragAndDrop = {
  name: 'DragAndDrop',
  emits: ['click', 'drop'],
  props: {
    title: {
      type: String,
      required: true
    },
    description: {
      type: String,
      required: true
    },
    disabled: {
      type: Boolean,
      required: false,
      default: false
    }
  },
  setup(props, context) {
    var {
      disabled
    } = toRefs(props);

    // ============== DEPENDENCIES ==============

    var {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme
    } = base$16(props, context);

    // ================ DATA ================

    /**
     * Whether the user is currently dragging a file over the drag and drop area.
     * 
     * @type {boolean}
     * @default falyse
     */
    var dragging = ref(false);

    /**
     * The DOM element of the drag and drop area.
     * 
     * @type {HTMLElement}
     * @default null
     */
    var area = ref(null);

    // =============== METHODS ==============

    /**
     * Handles `click` event.
     * 
     * @returns {void}
     * @private
     */
    var handleClick = () => {
      context.emit('click');
    };

    // ================ HOOKS ===============

    onMounted(() => {
      // cancelling all default events
      each(['drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'], event => {
        area.value.addEventListener(event, e => {
          e.preventDefault();
          e.stopPropagation();
        });
      });

      // listening for the actual drop event
      area.value.addEventListener('drop', e => {
        if (disabled.value) {
          return;
        }
        context.emit('drop', e);
        dragging.value = false;
      });
      area.value.addEventListener('dragover', e => {
        if (disabled.value) {
          return;
        }
        if (dragging.value !== true) {
          dragging.value = true;
        }
      });
      area.value.addEventListener('dragleave', e => {
        if (disabled.value) {
          return;
        }
        dragging.value = false;
      });
      area.value.addEventListener('dragend', e => {
        if (disabled.value) {
          return;
        }
        dragging.value = false;
      });
    });
    return {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme,
      dragging,
      area,
      handleClick
    };
  }
};

var ElementAddon = {
  name: 'ElementAddon',
  slots: ['default'],
  props: {
    type: {
      required: true,
      type: String
    }
  },
  setup(props, context) {
    var {
      type
    } = toRefs(props);

    // ============ DEPENDENCIES ============

    var {
      form$,
      el$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme
    } = base$16(props, context);

    // =============== INJECT ===============

    var config$ = inject('config$');

    // ============== COMPUTED ==============

    /**
     * The addon definition.
     * ponent.
     *
     * @type {string|function|Component}
     * @private
     */
    var baseAddon = computed(() => {
      return el$.value.addons[type.value];
    });

    /**
     * The content of the addon. If the addon is provided ss a `function` this contains the resolved value.
     *
     * @type {string|Component}
     */
    var addon = computed(() => {
      var addon = isAddonFunction.value ? baseAddon.value(el$.value) : baseAddon.value || /* istanbul ignore next: failsafe */null;
      if (!isAddonComponent.value) {
        addon = localize(addon, config$.value, form$.value);
      }
      return form$.value.$vueform.sanitize(addon);
    });

    /**
    * Whether the addon is provided as a function.
    *
    * @type {boolean}
    * @private
    */
    var isAddonFunction = computed(() => {
      return typeof baseAddon.value === 'function' && (!baseAddon.value.prototype || !baseAddon.value.prototype.constructor || baseAddon.value.prototype.constructor && baseAddon.value.prototype.constructor.name !== 'VueComponent');
    });

    /**
    * Whether addon is provided as a Vue component.
    *
    * @type {boolean}
    * @private
    */
    var isAddonComponent = computed(() => {
      return isVueComponent(baseAddon.value);
    });

    /**
     * Whether the label is provided as a slot.
     *
     * @type {boolean}
     * @private
     */
    var isSlot = computed(() => {
      var _el$$value$slots, _el$$value$$slots, _el$$value$$scopedSlo;
      // @todo:adam last condition is a duplicate of the first one
      return !!((_el$$value$slots = el$.value.slots) !== null && _el$$value$slots !== void 0 && _el$$value$slots["addon-".concat(type.value)] || (_el$$value$$slots = el$.value.$slots) !== null && _el$$value$$slots !== void 0 && _el$$value$$slots["addon-".concat(type.value)] || (/* istanbul ignore next: Vue2 is not checked */form$.value.$vueform.vueVersion === 2 && (_el$$value$$scopedSlo = el$.value.$scopedSlots) !== null && _el$$value$$scopedSlo !== void 0 && _el$$value$$scopedSlo["addon-".concat(type.value)]) || /* istanbul ignore next */el$.value.slots["addon-".concat(type.value)]);
    });
    return {
      el$,
      form$,
      theme,
      Size,
      View,
      classesInstance,
      Templates,
      template,
      classes,
      addon,
      isAddonComponent,
      isSlot
    };
  }
};

var ElementAddonOptions = {
  name: 'ElementAddonOptions',
  emits: ['select', 'open', 'close'],
  props: {
    options: {
      type: [Array],
      required: false,
      default: () => []
    },
    placeholder: {
      type: [String, Number, Object],
      required: false,
      default: ''
    },
    relaxed: {
      type: [Boolean],
      required: false,
      default: false
    },
    position: {
      type: [String],
      required: false,
      default: 'over'
    },
    aria: {
      type: [Object],
      required: false,
      default: () => ({})
    }
  },
  setup(props, context) {
    var {
      options,
      position
    } = toRefs(props);

    // ============ DEPENDENCIES ============

    var {
      form$,
      el$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme
    } = base$16(props, context);
    var {
      events,
      listeners,
      on,
      off,
      fire
    } = base$1i(props, context, {
      form$
    }, {
      events: context.emits
    });

    // ================ DATA ================

    /**
     * Whether the dropdown list is open.
     *
     * @type {boolean}
     */
    var isOpen = ref(false);

    /**
     * The container div.
     *
     * @type {HTMLElement}
     */
    var selector = ref(null);

    /**
     * The dropdown container div.
     *
     * @type {HTMLElement}
     */
    var dropdown = ref(null);

    /**
     * The left position of the dropdown.
     *
     * @type {number|undefined}
     */
    var left = ref(undefined);

    /**
     * The right position of the dropdown.
     *
     * @type {number|undefined}
     */
    var right = ref(undefined);

    /**
     * The top position of the dropdown.
     *
     * @type {number|undefined}
     */
    var top = ref(undefined);

    /**
     * The bottom position of the dropdown.
     *
     * @type {number|undefined}
     */
    var bottom = ref(undefined);

    /**
     * The current search term.
     *
     * @type {string}
     */
    var search = ref('');

    /**
     * Store for search timeout.
     *
     * @type {object}
     */
    var searchTimeout = ref(null);

    /**
     * Store for resize timeout.
     *
     * @type {object}
     */
    var resizeTimeout = ref(null);

    /**
     * Whether selection on hover is disabled.
     *
     * @type {boolean}
     */
    var hoverDisabled = ref(false);

    /**
     * Whether the option list is from top to bottom.
     *
     * @type {boolean}
     */
    var fullHeight = ref(false);

    /**
     * The currently selected option.
     *
     * @type {object}
     */
    var selected = ref({});

    /**
     * The currently pointed option.
     *
     * @type {object}
     */
    var pointed = ref({});

    // ============== COMPUTED ==============

    /**
     * The option that should be focused according to current [`search`](#property-search) term.
     *
     * @type {array}
     */
    var focused = computed(() => {
      if (!search.value) {
        return {};
      }
      return options.value.find(o => o.label.toLowerCase().startsWith(search.value.toString().toLowerCase()));
    });

    /**
     * Additional `style` attribute for the dropdown (position values).
     *
     * @type {object}
     */
    var style = computed(() => {
      return {
        left: left.value !== undefined ? "".concat(left.value, "px") : undefined,
        right: right.value !== undefined ? "".concat(right.value, "px") : undefined,
        top: top.value !== undefined ? "".concat(top.value, "px") : undefined,
        bottom: bottom.value !== undefined ? "".concat(bottom.value, "px") : 'auto'
      };
    });

    // =============== METHODS ==============

    /**
     * Closes the dropdown.
     * 
     * @returns {void}
     */
    var close = () => {
      top.value = undefined;
      bottom.value = undefined;
      fullHeight.value = false;
      isOpen.value = false;
      document.removeEventListener('click', handleClickOutside);
      document.removeEventListener('keydown', handleKeydown);
      window.removeEventListener('resize', handleResize);
      window.removeEventListener('scroll', handleScroll);
      search.value = '';
      context.emit('close');
    };

    /**
     * Opens the dropdown.
     * 
     * @returns {void}
     */
    var open = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(function* () {
        isOpen.value = true;
        yield nextTick();
        var selectorRect = selector.value.getBoundingClientRect();
        if (selector.value.closest('[dir="rtl"]')) {
          left.value = undefined;
          right.value = window.innerWidth - (selectorRect.left + selectorRect.width);
        } else {
          right.value = undefined;
          left.value = selectorRect.left;
        }
        resizeDropdown();
        scrollToSelected();
        setTimeout(() => {
          document.addEventListener('click', handleClickOutside);
          document.addEventListener('keydown', handleKeydown);
          window.addEventListener('resize', handleResize);
          window.addEventListener('scroll', handleScroll);
        }, 0);
        context.emit('open');
      });
      return function open() {
        return _ref.apply(this, arguments);
      };
    }();

    /**
     * Scroll the dropdown to an option.
     * 
     * @param {object} option* an option object form [`options`](#option-options).
     * @returns {void}
     */
    var scrollToOption = option => {
      if (fullHeight.value) {
        var selectorRect = selector.value.getBoundingClientRect();
        var optionRect = option.getBoundingClientRect();
        var targetCenterY = selectorRect.top + selectorRect.height / 2;
        var optionCenterY = optionRect.top + optionRect.height / 2;
        var centerDiff = targetCenterY - optionCenterY;
        var newScrollTop = dropdown.value.scrollTop - centerDiff;
        dropdown.value.scrollTop = newScrollTop;
      } else {
        var _optionRect = option.getBoundingClientRect();
        var dropdownRect = dropdown.value.getBoundingClientRect();
        var optionTopWithinDiv = _optionRect.top - dropdownRect.top;
        dropdown.value.scrollTop = optionTopWithinDiv + dropdown.value.scrollTop;
      }
    };

    /**
     * Scroll to the currently selected option (async).
     * 
     * @returns {void}
     */
    var scrollToSelected = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator(function* () {
        yield nextTick();
        var option = document.querySelector("[data-dropdown-for=\"".concat(el$.value.fieldId, "\"] [data-selected=\"true\"]"));
        if (!option) {
          return;
        }
        scrollToOption(option);
      });
      return function scrollToSelected() {
        return _ref2.apply(this, arguments);
      };
    }();

    /**
     * Resizes the dropdown to best fit into screen.
     * 
     * @returns {void}
     */
    var resizeDropdown = () => {
      if (dropdown.value.getBoundingClientRect().height >= window.innerHeight - 32) {
        fullHeight.value = true;
        top.value = 16;
        bottom.value = 16;
      } else {
        fullHeight.value = false;
        var selectorRect = selector.value.getBoundingClientRect();
        var newTop = selectorRect.top;
        if (position.value === 'bottom') {
          newTop += selectorRect.height;
        } else if (position.value === 'top') ;
        top.value = newTop;
        if (dropdown.value.getBoundingClientRect().height > window.innerHeight - selector.value.getBoundingClientRect().top - 16) {
          bottom.value = 16;
        } else {
          bottom.value = undefined;
        }
      }
    };

    /**
     * Select an option.
     * 
     * @param {object} option* an option object form [`options`](#option-options).
     * @param {boolean} triggerSelect whether should trigger select event
     * @returns {void}
     */
    var selectOption = function selectOption(option) {
      var triggerSelect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      selected.value = option;
      if (triggerSelect) {
        fire('select', option);
      }
    };

    /**
     * Removes the selected option.
     * 
     * @returns {void}
     */
    var reset = () => {
      selected.value = {};
      fire('select', {});
    };

    /**
     * Handles pointing an option (sets [`pointed`](#property-pointed)).
     * 
     * @param {object} option* an option object form [`options`](#option-options).
     * @returns {void}
     */
    var handleOptionPoint = option => {
      if (hoverDisabled.value) {
        return;
      }
      pointed.value = option;
    };

    /**
     * Handle the click of an option.
     * 
     * @param {object} option* an option object form [`options`](#option-options).
     * @returns {void}
     */
    var handleOptionClick = option => {
      selectOption(option);
      close();
      el$.value.input.focus();
    };

    /**
     * Handles the click of collapsed element.
     * 
     * @params {Event} event* the Event
     * @returns {void}
     */
    var handleSelectorClick = e => {
      open();
    };

    /**
     * Handles the keydown even of the collapsed element when focused (async).
     * 
     * @params {Event} event* the Event
     * @returns {void}
     */
    var handleSelectorKeydown = /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator(function* (e) {
        if (isOpen.value) {
          return;
        }
        if (['Enter', ' ', 'ArrowDown', 'ArrowUp'].indexOf(e.key) !== -1) {
          e.preventDefault();
          open();
          yield nextTick();
          var index = selected.value.index !== undefined ? selected.value.index : pointed.value.index || 0;
          var option = document.querySelector("[data-dropdown-for=\"".concat(el$.value.fieldId, "\"] [data-index=\"").concat(index, "\"]"));
          pointed.value = options.value.find(c => c.index === index);
          option.focus();
        }
      });
      return function handleSelectorKeydown(_x) {
        return _ref3.apply(this, arguments);
      };
    }();

    /**
     * Handles clicking outside of the dropdown once opened (closes it).
     * 
     * @params {Event} event* the Event
     * @returns {void}
     */
    var handleClickOutside = e => {
      var _dropdown$value;
      if (!((_dropdown$value = dropdown.value) !== null && _dropdown$value !== void 0 && _dropdown$value.contains(e.target))) {
        close();
      }
    };

    /**
     * Handles the keydown event when the dropdown is open.
     * 
     * @params {Event} event* the Event
     * @returns {void}
     */
    var handleKeydown = e => {
      var _pointed$value;
      if (e.key === 'Escape') {
        close();
        selector.value.focus();
        return;
      }
      if (['Enter', ' '].indexOf(e.key) !== -1 && ((_pointed$value = pointed.value) === null || _pointed$value === void 0 ? void 0 : _pointed$value.index) !== undefined) {
        e.preventDefault();
        selectOption(pointed.value);
        close();
        el$.value.input.focus();
        return;
      }
      if (e.key === 'Tab') {
        e.preventDefault();
        close();
        el$.value.input.focus();
        return;
      }
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        var index = pointed.value.index === undefined ? -1 : pointed.value.index;
        var nextIndex = index + 1;
        if (options.value.length < nextIndex + 1) {
          nextIndex = 0;
        }
        hoverDisabled.value = true;
        pointed.value = options.value.find(c => c.index === nextIndex);
        var option = document.querySelector("[data-dropdown-for=\"".concat(el$.value.fieldId, "\"] [data-index=\"").concat(nextIndex, "\"]"));
        scrollToOption(option);
        option.focus();
        setTimeout(() => {
          hoverDisabled.value = false;
        }, 2);
        return;
      }
      if (e.key === 'ArrowUp') {
        e.preventDefault();
        var _index = pointed.value.index || 0;
        var prevIndex = _index - 1;
        if (prevIndex < 0) {
          prevIndex = options.value.length - 1;
        }
        hoverDisabled.value = true;
        pointed.value = options.value.find(c => c.index === prevIndex);
        var _option = document.querySelector("[data-dropdown-for=\"".concat(el$.value.fieldId, "\"] [data-index=\"").concat(prevIndex, "\"]"));
        scrollToOption(_option);
        _option.focus();
        setTimeout(() => {
          hoverDisabled.value = false;
        }, 0);
        return;
      }
      if (e.key === 'Backspace' && search.value.length) {
        search.value = search.value.slice(0, -1);
        return;
      }
      if (e.key.length === 1 && !e.ctrlKey && !e.metaKey && !e.altKey) {
        search.value += e.key;
        hoverDisabled.value = true;
        if (searchTimeout.value) {
          clearTimeout(searchTimeout.value);
        }
        searchTimeout.value = setTimeout(() => {
          search.value = '';
        }, 1000);
        setTimeout(() => {
          hoverDisabled.value = false;
        }, 0);
      }
    };

    /**
     * Handles the window resize event (closes the dropdown if open).
     * 
     * @returns {void}
     */
    var handleResize = () => {
      close();
    };

    /**
     * Handles the window scroll event (resizes the dropdown if needed).
     * 
     * @returns {void}
     */
    var handleScroll = () => {
      if (resizeTimeout.value) {
        clearTimeout(resizeTimeout.value);
      }
      resizeTimeout.value = setTimeout(() => {
        resizeDropdown();
      }, 50);
    };

    // =============== HOOKS ================

    onBeforeUnmount(() => {
      close();
    });

    // ============== WATCHERS ==============

    watch(focused, option => {
      if (!option || option.index === undefined) {
        return;
      }
      var optionEl = document.querySelector("[data-dropdown-for=\"".concat(el$.value.fieldId, "\"] [data-index=\"").concat(option.index, "\"]"));
      scrollToOption(optionEl);
      pointed.value = option;
      optionEl.focus();
    });
    return {
      form$,
      el$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme,
      events,
      listeners,
      on,
      off,
      fire,
      isOpen,
      selector,
      dropdown,
      left,
      right,
      top,
      bottom,
      style,
      search,
      searchTimeout,
      hoverDisabled,
      selected,
      pointed,
      focused,
      close,
      scrollToOption,
      scrollToSelected,
      selectOption,
      reset,
      handleOptionPoint,
      handleOptionClick,
      handleSelectorClick,
      handleSelectorKeydown,
      handleClickOutside,
      handleKeydown,
      handleResize
    };
  }
};

var HOOKS = [
    "onChange",
    "onClose",
    "onDayCreate",
    "onDestroy",
    "onKeyDown",
    "onMonthChange",
    "onOpen",
    "onParseConfig",
    "onReady",
    "onValueUpdate",
    "onYearChange",
    "onPreCalendarPosition",
];
var defaults$1 = {
    _disable: [],
    allowInput: false,
    allowInvalidPreload: false,
    altFormat: "F j, Y",
    altInput: false,
    altInputClass: "form-control input",
    animate: typeof window === "object" &&
        window.navigator.userAgent.indexOf("MSIE") === -1,
    ariaDateFormat: "F j, Y",
    autoFillDefaultTime: true,
    clickOpens: true,
    closeOnSelect: true,
    conjunction: ", ",
    dateFormat: "Y-m-d",
    defaultHour: 12,
    defaultMinute: 0,
    defaultSeconds: 0,
    disable: [],
    disableMobile: false,
    enableSeconds: false,
    enableTime: false,
    errorHandler: function (err) {
        return typeof console !== "undefined" && console.warn(err);
    },
    getWeek: function (givenDate) {
        var date = new Date(givenDate.getTime());
        date.setHours(0, 0, 0, 0);
        date.setDate(date.getDate() + 3 - ((date.getDay() + 6) % 7));
        var week1 = new Date(date.getFullYear(), 0, 4);
        return (1 +
            Math.round(((date.getTime() - week1.getTime()) / 86400000 -
                3 +
                ((week1.getDay() + 6) % 7)) /
                7));
    },
    hourIncrement: 1,
    ignoredFocusElements: [],
    inline: false,
    locale: "default",
    minuteIncrement: 5,
    mode: "single",
    monthSelectorType: "dropdown",
    nextArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",
    noCalendar: false,
    now: new Date(),
    onChange: [],
    onClose: [],
    onDayCreate: [],
    onDestroy: [],
    onKeyDown: [],
    onMonthChange: [],
    onOpen: [],
    onParseConfig: [],
    onReady: [],
    onValueUpdate: [],
    onYearChange: [],
    onPreCalendarPosition: [],
    plugins: [],
    position: "auto",
    positionElement: undefined,
    prevArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",
    shorthandCurrentMonth: false,
    showMonths: 1,
    static: false,
    time_24hr: false,
    weekNumbers: false,
    wrap: false,
};

var english = {
    weekdays: {
        shorthand: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        longhand: [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
        ],
    },
    months: {
        shorthand: [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec",
        ],
        longhand: [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
        ],
    },
    daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
    firstDayOfWeek: 0,
    ordinal: function (nth) {
        var s = nth % 100;
        if (s > 3 && s < 21)
            return "th";
        switch (s % 10) {
            case 1:
                return "st";
            case 2:
                return "nd";
            case 3:
                return "rd";
            default:
                return "th";
        }
    },
    rangeSeparator: " to ",
    weekAbbreviation: "Wk",
    scrollTitle: "Scroll to increment",
    toggleTitle: "Click to toggle",
    amPM: ["AM", "PM"],
    yearAriaLabel: "Year",
    monthAriaLabel: "Month",
    hourAriaLabel: "Hour",
    minuteAriaLabel: "Minute",
    time_24hr: false,
};

var pad = function (number, length) {
    if (length === void 0) { length = 2; }
    return ("000" + number).slice(length * -1);
};
var int = function (bool) { return (bool === true ? 1 : 0); };
function debounce$1(fn, wait) {
    var t;
    return function () {
        var _this = this;
        var args = arguments;
        clearTimeout(t);
        t = setTimeout(function () { return fn.apply(_this, args); }, wait);
    };
}
var arrayify = function (obj) {
    return obj instanceof Array ? obj : [obj];
};

function toggleClass$1(elem, className, bool) {
    if (bool === true)
        return elem.classList.add(className);
    elem.classList.remove(className);
}
function createElement(tag, className, content) {
    var e = window.document.createElement(tag);
    className = className || "";
    content = content || "";
    e.className = className;
    if (content !== undefined)
        e.textContent = content;
    return e;
}
function clearNode(node) {
    while (node.firstChild)
        node.removeChild(node.firstChild);
}
function findParent(node, condition) {
    if (condition(node))
        return node;
    else if (node.parentNode)
        return findParent(node.parentNode, condition);
    return undefined;
}
function createNumberInput(inputClassName, opts) {
    var wrapper = createElement("div", "numInputWrapper"), numInput = createElement("input", "numInput " + inputClassName), arrowUp = createElement("span", "arrowUp"), arrowDown = createElement("span", "arrowDown");
    if (navigator.userAgent.indexOf("MSIE 9.0") === -1) {
        numInput.type = "number";
    }
    else {
        numInput.type = "text";
        numInput.pattern = "\\d*";
    }
    if (opts !== undefined)
        for (var key in opts)
            numInput.setAttribute(key, opts[key]);
    wrapper.appendChild(numInput);
    wrapper.appendChild(arrowUp);
    wrapper.appendChild(arrowDown);
    return wrapper;
}
function getEventTarget(event) {
    try {
        if (typeof event.composedPath === "function") {
            var path = event.composedPath();
            return path[0];
        }
        return event.target;
    }
    catch (error) {
        return event.target;
    }
}

var doNothing = function () { return undefined; };
var monthToStr = function (monthNumber, shorthand, locale) { return locale.months[shorthand ? "shorthand" : "longhand"][monthNumber]; };
var revFormat = {
    D: doNothing,
    F: function (dateObj, monthName, locale) {
        dateObj.setMonth(locale.months.longhand.indexOf(monthName));
    },
    G: function (dateObj, hour) {
        dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
    },
    H: function (dateObj, hour) {
        dateObj.setHours(parseFloat(hour));
    },
    J: function (dateObj, day) {
        dateObj.setDate(parseFloat(day));
    },
    K: function (dateObj, amPM, locale) {
        dateObj.setHours((dateObj.getHours() % 12) +
            12 * int(new RegExp(locale.amPM[1], "i").test(amPM)));
    },
    M: function (dateObj, shortMonth, locale) {
        dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));
    },
    S: function (dateObj, seconds) {
        dateObj.setSeconds(parseFloat(seconds));
    },
    U: function (_, unixSeconds) { return new Date(parseFloat(unixSeconds) * 1000); },
    W: function (dateObj, weekNum, locale) {
        var weekNumber = parseInt(weekNum);
        var date = new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);
        date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);
        return date;
    },
    Y: function (dateObj, year) {
        dateObj.setFullYear(parseFloat(year));
    },
    Z: function (_, ISODate) { return new Date(ISODate); },
    d: function (dateObj, day) {
        dateObj.setDate(parseFloat(day));
    },
    h: function (dateObj, hour) {
        dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
    },
    i: function (dateObj, minutes) {
        dateObj.setMinutes(parseFloat(minutes));
    },
    j: function (dateObj, day) {
        dateObj.setDate(parseFloat(day));
    },
    l: doNothing,
    m: function (dateObj, month) {
        dateObj.setMonth(parseFloat(month) - 1);
    },
    n: function (dateObj, month) {
        dateObj.setMonth(parseFloat(month) - 1);
    },
    s: function (dateObj, seconds) {
        dateObj.setSeconds(parseFloat(seconds));
    },
    u: function (_, unixMillSeconds) {
        return new Date(parseFloat(unixMillSeconds));
    },
    w: doNothing,
    y: function (dateObj, year) {
        dateObj.setFullYear(2000 + parseFloat(year));
    },
};
var tokenRegex = {
    D: "",
    F: "",
    G: "(\\d\\d|\\d)",
    H: "(\\d\\d|\\d)",
    J: "(\\d\\d|\\d)\\w+",
    K: "",
    M: "",
    S: "(\\d\\d|\\d)",
    U: "(.+)",
    W: "(\\d\\d|\\d)",
    Y: "(\\d{4})",
    Z: "(.+)",
    d: "(\\d\\d|\\d)",
    h: "(\\d\\d|\\d)",
    i: "(\\d\\d|\\d)",
    j: "(\\d\\d|\\d)",
    l: "",
    m: "(\\d\\d|\\d)",
    n: "(\\d\\d|\\d)",
    s: "(\\d\\d|\\d)",
    u: "(.+)",
    w: "(\\d\\d|\\d)",
    y: "(\\d{2})",
};
var formats = {
    Z: function (date) { return date.toISOString(); },
    D: function (date, locale, options) {
        return locale.weekdays.shorthand[formats.w(date, locale, options)];
    },
    F: function (date, locale, options) {
        return monthToStr(formats.n(date, locale, options) - 1, false, locale);
    },
    G: function (date, locale, options) {
        return pad(formats.h(date, locale, options));
    },
    H: function (date) { return pad(date.getHours()); },
    J: function (date, locale) {
        return locale.ordinal !== undefined
            ? date.getDate() + locale.ordinal(date.getDate())
            : date.getDate();
    },
    K: function (date, locale) { return locale.amPM[int(date.getHours() > 11)]; },
    M: function (date, locale) {
        return monthToStr(date.getMonth(), true, locale);
    },
    S: function (date) { return pad(date.getSeconds()); },
    U: function (date) { return date.getTime() / 1000; },
    W: function (date, _, options) {
        return options.getWeek(date);
    },
    Y: function (date) { return pad(date.getFullYear(), 4); },
    d: function (date) { return pad(date.getDate()); },
    h: function (date) { return (date.getHours() % 12 ? date.getHours() % 12 : 12); },
    i: function (date) { return pad(date.getMinutes()); },
    j: function (date) { return date.getDate(); },
    l: function (date, locale) {
        return locale.weekdays.longhand[date.getDay()];
    },
    m: function (date) { return pad(date.getMonth() + 1); },
    n: function (date) { return date.getMonth() + 1; },
    s: function (date) { return date.getSeconds(); },
    u: function (date) { return date.getTime(); },
    w: function (date) { return date.getDay(); },
    y: function (date) { return String(date.getFullYear()).substring(2); },
};

var createDateFormatter = function (_a) {
    var _b = _a.config, config = _b === void 0 ? defaults$1 : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c, _d = _a.isMobile, isMobile = _d === void 0 ? false : _d;
    return function (dateObj, frmt, overrideLocale) {
        var locale = overrideLocale || l10n;
        if (config.formatDate !== undefined && !isMobile) {
            return config.formatDate(dateObj, frmt, locale);
        }
        return frmt
            .split("")
            .map(function (c, i, arr) {
            return formats[c] && arr[i - 1] !== "\\"
                ? formats[c](dateObj, locale, config)
                : c !== "\\"
                    ? c
                    : "";
        })
            .join("");
    };
};
var createDateParser = function (_a) {
    var _b = _a.config, config = _b === void 0 ? defaults$1 : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c;
    return function (date, givenFormat, timeless, customLocale) {
        if (date !== 0 && !date)
            return undefined;
        var locale = customLocale || l10n;
        var parsedDate;
        var dateOrig = date;
        if (date instanceof Date)
            parsedDate = new Date(date.getTime());
        else if (typeof date !== "string" &&
            date.toFixed !== undefined)
            parsedDate = new Date(date);
        else if (typeof date === "string") {
            var format = givenFormat || (config || defaults$1).dateFormat;
            var datestr = String(date).trim();
            if (datestr === "today") {
                parsedDate = new Date();
                timeless = true;
            }
            else if (config && config.parseDate) {
                parsedDate = config.parseDate(date, format);
            }
            else if (/Z$/.test(datestr) ||
                /GMT$/.test(datestr)) {
                parsedDate = new Date(date);
            }
            else {
                var matched = void 0, ops = [];
                for (var i = 0, matchIndex = 0, regexStr = ""; i < format.length; i++) {
                    var token = format[i];
                    var isBackSlash = token === "\\";
                    var escaped = format[i - 1] === "\\" || isBackSlash;
                    if (tokenRegex[token] && !escaped) {
                        regexStr += tokenRegex[token];
                        var match = new RegExp(regexStr).exec(date);
                        if (match && (matched = true)) {
                            ops[token !== "Y" ? "push" : "unshift"]({
                                fn: revFormat[token],
                                val: match[++matchIndex],
                            });
                        }
                    }
                    else if (!isBackSlash)
                        regexStr += ".";
                }
                parsedDate =
                    !config || !config.noCalendar
                        ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0)
                        : new Date(new Date().setHours(0, 0, 0, 0));
                ops.forEach(function (_a) {
                    var fn = _a.fn, val = _a.val;
                    return (parsedDate = fn(parsedDate, val, locale) || parsedDate);
                });
                parsedDate = matched ? parsedDate : undefined;
            }
        }
        if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {
            config.errorHandler(new Error("Invalid date provided: " + dateOrig));
            return undefined;
        }
        if (timeless === true)
            parsedDate.setHours(0, 0, 0, 0);
        return parsedDate;
    };
};
function compareDates(date1, date2, timeless) {
    if (timeless === void 0) { timeless = true; }
    if (timeless !== false) {
        return (new Date(date1.getTime()).setHours(0, 0, 0, 0) -
            new Date(date2.getTime()).setHours(0, 0, 0, 0));
    }
    return date1.getTime() - date2.getTime();
}
var isBetween = function (ts, ts1, ts2) {
    return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);
};
var calculateSecondsSinceMidnight = function (hours, minutes, seconds) {
    return hours * 3600 + minutes * 60 + seconds;
};
var parseSeconds = function (secondsSinceMidnight) {
    var hours = Math.floor(secondsSinceMidnight / 3600), minutes = (secondsSinceMidnight - hours * 3600) / 60;
    return [hours, minutes, secondsSinceMidnight - hours * 3600 - minutes * 60];
};
var duration = {
    DAY: 86400000,
};
function getDefaultHours(config) {
    var hours = config.defaultHour;
    var minutes = config.defaultMinute;
    var seconds = config.defaultSeconds;
    if (config.minDate !== undefined) {
        var minHour = config.minDate.getHours();
        var minMinutes = config.minDate.getMinutes();
        var minSeconds = config.minDate.getSeconds();
        if (hours < minHour) {
            hours = minHour;
        }
        if (hours === minHour && minutes < minMinutes) {
            minutes = minMinutes;
        }
        if (hours === minHour && minutes === minMinutes && seconds < minSeconds)
            seconds = config.minDate.getSeconds();
    }
    if (config.maxDate !== undefined) {
        var maxHr = config.maxDate.getHours();
        var maxMinutes = config.maxDate.getMinutes();
        hours = Math.min(hours, maxHr);
        if (hours === maxHr)
            minutes = Math.min(maxMinutes, minutes);
        if (hours === maxHr && minutes === maxMinutes)
            seconds = config.maxDate.getSeconds();
    }
    return { hours: hours, minutes: minutes, seconds: seconds };
}

if (typeof Object.assign !== "function") {
    Object.assign = function (target) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!target) {
            throw TypeError("Cannot convert undefined or null to object");
        }
        var _loop_1 = function (source) {
            if (source) {
                Object.keys(source).forEach(function (key) { return (target[key] = source[key]); });
            }
        };
        for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
            var source = args_1[_a];
            _loop_1(source);
        }
        return target;
    };
}

var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var DEBOUNCED_CHANGE_MS = 300;
function FlatpickrInstance(element, instanceConfig) {
    var self = {
        config: __assign(__assign({}, defaults$1), flatpickr.defaultConfig),
        l10n: english,
    };
    self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
    self._handlers = [];
    self.pluginElements = [];
    self.loadedPlugins = [];
    self._bind = bind;
    self._setHoursFromDate = setHoursFromDate;
    self._positionCalendar = positionCalendar;
    self.changeMonth = changeMonth;
    self.changeYear = changeYear;
    self.clear = clear;
    self.close = close;
    self.onMouseOver = onMouseOver;
    self._createElement = createElement;
    self.createDay = createDay;
    self.destroy = destroy;
    self.isEnabled = isEnabled;
    self.jumpToDate = jumpToDate;
    self.updateValue = updateValue;
    self.open = open;
    self.redraw = redraw;
    self.set = set;
    self.setDate = setDate;
    self.toggle = toggle;
    function setupHelperFunctions() {
        self.utils = {
            getDaysInMonth: function (month, yr) {
                if (month === void 0) { month = self.currentMonth; }
                if (yr === void 0) { yr = self.currentYear; }
                if (month === 1 && ((yr % 4 === 0 && yr % 100 !== 0) || yr % 400 === 0))
                    return 29;
                return self.l10n.daysInMonth[month];
            },
        };
    }
    function init() {
        self.element = self.input = element;
        self.isOpen = false;
        parseConfig();
        setupLocale();
        setupInputs();
        setupDates();
        setupHelperFunctions();
        if (!self.isMobile)
            build();
        bindEvents();
        if (self.selectedDates.length || self.config.noCalendar) {
            if (self.config.enableTime) {
                setHoursFromDate(self.config.noCalendar ? self.latestSelectedDateObj : undefined);
            }
            updateValue(false);
        }
        setCalendarWidth();
        var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
        if (!self.isMobile && isSafari) {
            positionCalendar();
        }
        triggerEvent("onReady");
    }
    function getClosestActiveElement() {
        var _a;
        return (((_a = self.calendarContainer) === null || _a === void 0 ? void 0 : _a.getRootNode())
            .activeElement || document.activeElement);
    }
    function bindToInstance(fn) {
        return fn.bind(self);
    }
    function setCalendarWidth() {
        var config = self.config;
        if (config.weekNumbers === false && config.showMonths === 1) {
            return;
        }
        else if (config.noCalendar !== true) {
            window.requestAnimationFrame(function () {
                if (self.calendarContainer !== undefined) {
                    self.calendarContainer.style.visibility = "hidden";
                    self.calendarContainer.style.display = "block";
                }
                if (self.daysContainer !== undefined) {
                    var daysWidth = (self.days.offsetWidth + 1) * config.showMonths;
                    self.daysContainer.style.width = daysWidth + "px";
                    self.calendarContainer.style.width =
                        daysWidth +
                            (self.weekWrapper !== undefined
                                ? self.weekWrapper.offsetWidth
                                : 0) +
                            "px";
                    self.calendarContainer.style.removeProperty("visibility");
                    self.calendarContainer.style.removeProperty("display");
                }
            });
        }
    }
    function updateTime(e) {
        if (self.selectedDates.length === 0) {
            var defaultDate = self.config.minDate === undefined ||
                compareDates(new Date(), self.config.minDate) >= 0
                ? new Date()
                : new Date(self.config.minDate.getTime());
            var defaults = getDefaultHours(self.config);
            defaultDate.setHours(defaults.hours, defaults.minutes, defaults.seconds, defaultDate.getMilliseconds());
            self.selectedDates = [defaultDate];
            self.latestSelectedDateObj = defaultDate;
        }
        if (e !== undefined && e.type !== "blur") {
            timeWrapper(e);
        }
        var prevValue = self._input.value;
        setHoursFromInputs();
        updateValue();
        if (self._input.value !== prevValue) {
            self._debouncedChange();
        }
    }
    function ampm2military(hour, amPM) {
        return (hour % 12) + 12 * int(amPM === self.l10n.amPM[1]);
    }
    function military2ampm(hour) {
        switch (hour % 24) {
            case 0:
            case 12:
                return 12;
            default:
                return hour % 12;
        }
    }
    function setHoursFromInputs() {
        if (self.hourElement === undefined || self.minuteElement === undefined)
            return;
        var hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24, minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60, seconds = self.secondElement !== undefined
            ? (parseInt(self.secondElement.value, 10) || 0) % 60
            : 0;
        if (self.amPM !== undefined) {
            hours = ampm2military(hours, self.amPM.textContent);
        }
        var limitMinHours = self.config.minTime !== undefined ||
            (self.config.minDate &&
                self.minDateHasTime &&
                self.latestSelectedDateObj &&
                compareDates(self.latestSelectedDateObj, self.config.minDate, true) ===
                    0);
        var limitMaxHours = self.config.maxTime !== undefined ||
            (self.config.maxDate &&
                self.maxDateHasTime &&
                self.latestSelectedDateObj &&
                compareDates(self.latestSelectedDateObj, self.config.maxDate, true) ===
                    0);
        if (self.config.maxTime !== undefined &&
            self.config.minTime !== undefined &&
            self.config.minTime > self.config.maxTime) {
            var minBound = calculateSecondsSinceMidnight(self.config.minTime.getHours(), self.config.minTime.getMinutes(), self.config.minTime.getSeconds());
            var maxBound = calculateSecondsSinceMidnight(self.config.maxTime.getHours(), self.config.maxTime.getMinutes(), self.config.maxTime.getSeconds());
            var currentTime = calculateSecondsSinceMidnight(hours, minutes, seconds);
            if (currentTime > maxBound && currentTime < minBound) {
                var result = parseSeconds(minBound);
                hours = result[0];
                minutes = result[1];
                seconds = result[2];
            }
        }
        else {
            if (limitMaxHours) {
                var maxTime = self.config.maxTime !== undefined
                    ? self.config.maxTime
                    : self.config.maxDate;
                hours = Math.min(hours, maxTime.getHours());
                if (hours === maxTime.getHours())
                    minutes = Math.min(minutes, maxTime.getMinutes());
                if (minutes === maxTime.getMinutes())
                    seconds = Math.min(seconds, maxTime.getSeconds());
            }
            if (limitMinHours) {
                var minTime = self.config.minTime !== undefined
                    ? self.config.minTime
                    : self.config.minDate;
                hours = Math.max(hours, minTime.getHours());
                if (hours === minTime.getHours() && minutes < minTime.getMinutes())
                    minutes = minTime.getMinutes();
                if (minutes === minTime.getMinutes())
                    seconds = Math.max(seconds, minTime.getSeconds());
            }
        }
        setHours(hours, minutes, seconds);
    }
    function setHoursFromDate(dateObj) {
        var date = dateObj || self.latestSelectedDateObj;
        if (date && date instanceof Date) {
            setHours(date.getHours(), date.getMinutes(), date.getSeconds());
        }
    }
    function setHours(hours, minutes, seconds) {
        if (self.latestSelectedDateObj !== undefined) {
            self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);
        }
        if (!self.hourElement || !self.minuteElement || self.isMobile)
            return;
        self.hourElement.value = pad(!self.config.time_24hr
            ? ((12 + hours) % 12) + 12 * int(hours % 12 === 0)
            : hours);
        self.minuteElement.value = pad(minutes);
        if (self.amPM !== undefined)
            self.amPM.textContent = self.l10n.amPM[int(hours >= 12)];
        if (self.secondElement !== undefined)
            self.secondElement.value = pad(seconds);
    }
    function onYearInput(event) {
        var eventTarget = getEventTarget(event);
        var year = parseInt(eventTarget.value) + (event.delta || 0);
        if (year / 1000 > 1 ||
            (event.key === "Enter" && !/[^\d]/.test(year.toString()))) {
            changeYear(year);
        }
    }
    function bind(element, event, handler, options) {
        if (event instanceof Array)
            return event.forEach(function (ev) { return bind(element, ev, handler, options); });
        if (element instanceof Array)
            return element.forEach(function (el) { return bind(el, event, handler, options); });
        element.addEventListener(event, handler, options);
        self._handlers.push({
            remove: function () { return element.removeEventListener(event, handler, options); },
        });
    }
    function triggerChange() {
        triggerEvent("onChange");
    }
    function bindEvents() {
        if (self.config.wrap) {
            ["open", "close", "toggle", "clear"].forEach(function (evt) {
                Array.prototype.forEach.call(self.element.querySelectorAll("[data-" + evt + "]"), function (el) {
                    return bind(el, "click", self[evt]);
                });
            });
        }
        if (self.isMobile) {
            setupMobile();
            return;
        }
        var debouncedResize = debounce$1(onResize, 50);
        self._debouncedChange = debounce$1(triggerChange, DEBOUNCED_CHANGE_MS);
        if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent))
            bind(self.daysContainer, "mouseover", function (e) {
                if (self.config.mode === "range")
                    onMouseOver(getEventTarget(e));
            });
        bind(self._input, "keydown", onKeyDown);
        if (self.calendarContainer !== undefined) {
            bind(self.calendarContainer, "keydown", onKeyDown);
        }
        if (!self.config.inline && !self.config.static)
            bind(window, "resize", debouncedResize);
        if (window.ontouchstart !== undefined)
            bind(window.document, "touchstart", documentClick);
        else
            bind(window.document, "mousedown", documentClick);
        bind(window.document, "focus", documentClick, { capture: true });
        if (self.config.clickOpens === true) {
            bind(self._input, "focus", self.open);
            bind(self._input, "click", self.open);
        }
        if (self.daysContainer !== undefined) {
            bind(self.monthNav, "click", onMonthNavClick);
            bind(self.monthNav, ["keyup", "increment"], onYearInput);
            bind(self.daysContainer, "click", selectDate);
        }
        if (self.timeContainer !== undefined &&
            self.minuteElement !== undefined &&
            self.hourElement !== undefined) {
            var selText = function (e) {
                return getEventTarget(e).select();
            };
            bind(self.timeContainer, ["increment"], updateTime);
            bind(self.timeContainer, "blur", updateTime, { capture: true });
            bind(self.timeContainer, "click", timeIncrement);
            bind([self.hourElement, self.minuteElement], ["focus", "click"], selText);
            if (self.secondElement !== undefined)
                bind(self.secondElement, "focus", function () { return self.secondElement && self.secondElement.select(); });
            if (self.amPM !== undefined) {
                bind(self.amPM, "click", function (e) {
                    updateTime(e);
                });
            }
        }
        if (self.config.allowInput) {
            bind(self._input, "blur", onBlur);
        }
    }
    function jumpToDate(jumpDate, triggerChange) {
        var jumpTo = jumpDate !== undefined
            ? self.parseDate(jumpDate)
            : self.latestSelectedDateObj ||
                (self.config.minDate && self.config.minDate > self.now
                    ? self.config.minDate
                    : self.config.maxDate && self.config.maxDate < self.now
                        ? self.config.maxDate
                        : self.now);
        var oldYear = self.currentYear;
        var oldMonth = self.currentMonth;
        try {
            if (jumpTo !== undefined) {
                self.currentYear = jumpTo.getFullYear();
                self.currentMonth = jumpTo.getMonth();
            }
        }
        catch (e) {
            e.message = "Invalid date supplied: " + jumpTo;
            self.config.errorHandler(e);
        }
        if (triggerChange && self.currentYear !== oldYear) {
            triggerEvent("onYearChange");
            buildMonthSwitch();
        }
        if (triggerChange &&
            (self.currentYear !== oldYear || self.currentMonth !== oldMonth)) {
            triggerEvent("onMonthChange");
        }
        self.redraw();
    }
    function timeIncrement(e) {
        var eventTarget = getEventTarget(e);
        if (~eventTarget.className.indexOf("arrow"))
            incrementNumInput(e, eventTarget.classList.contains("arrowUp") ? 1 : -1);
    }
    function incrementNumInput(e, delta, inputElem) {
        var target = e && getEventTarget(e);
        var input = inputElem ||
            (target && target.parentNode && target.parentNode.firstChild);
        var event = createEvent("increment");
        event.delta = delta;
        input && input.dispatchEvent(event);
    }
    function build() {
        var fragment = window.document.createDocumentFragment();
        self.calendarContainer = createElement("div", "flatpickr-calendar");
        self.calendarContainer.tabIndex = -1;
        if (!self.config.noCalendar) {
            fragment.appendChild(buildMonthNav());
            self.innerContainer = createElement("div", "flatpickr-innerContainer");
            if (self.config.weekNumbers) {
                var _a = buildWeeks(), weekWrapper = _a.weekWrapper, weekNumbers = _a.weekNumbers;
                self.innerContainer.appendChild(weekWrapper);
                self.weekNumbers = weekNumbers;
                self.weekWrapper = weekWrapper;
            }
            self.rContainer = createElement("div", "flatpickr-rContainer");
            self.rContainer.appendChild(buildWeekdays());
            if (!self.daysContainer) {
                self.daysContainer = createElement("div", "flatpickr-days");
                self.daysContainer.tabIndex = -1;
            }
            buildDays();
            self.rContainer.appendChild(self.daysContainer);
            self.innerContainer.appendChild(self.rContainer);
            fragment.appendChild(self.innerContainer);
        }
        if (self.config.enableTime) {
            fragment.appendChild(buildTime());
        }
        toggleClass$1(self.calendarContainer, "rangeMode", self.config.mode === "range");
        toggleClass$1(self.calendarContainer, "animate", self.config.animate === true);
        toggleClass$1(self.calendarContainer, "multiMonth", self.config.showMonths > 1);
        self.calendarContainer.appendChild(fragment);
        var customAppend = self.config.appendTo !== undefined &&
            self.config.appendTo.nodeType !== undefined;
        if (self.config.inline || self.config.static) {
            self.calendarContainer.classList.add(self.config.inline ? "inline" : "static");
            if (self.config.inline) {
                if (!customAppend && self.element.parentNode)
                    self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);
                else if (self.config.appendTo !== undefined)
                    self.config.appendTo.appendChild(self.calendarContainer);
            }
            if (self.config.static) {
                var wrapper = createElement("div", "flatpickr-wrapper");
                if (self.element.parentNode)
                    self.element.parentNode.insertBefore(wrapper, self.element);
                wrapper.appendChild(self.element);
                if (self.altInput)
                    wrapper.appendChild(self.altInput);
                wrapper.appendChild(self.calendarContainer);
            }
        }
        if (!self.config.static && !self.config.inline)
            (self.config.appendTo !== undefined
                ? self.config.appendTo
                : window.document.body).appendChild(self.calendarContainer);
    }
    function createDay(className, date, _dayNumber, i) {
        var dateIsEnabled = isEnabled(date, true), dayElement = createElement("span", className, date.getDate().toString());
        dayElement.dateObj = date;
        dayElement.$i = i;
        dayElement.setAttribute("aria-label", self.formatDate(date, self.config.ariaDateFormat));
        if (className.indexOf("hidden") === -1 &&
            compareDates(date, self.now) === 0) {
            self.todayDateElem = dayElement;
            dayElement.classList.add("today");
            dayElement.setAttribute("aria-current", "date");
        }
        if (dateIsEnabled) {
            dayElement.tabIndex = -1;
            if (isDateSelected(date)) {
                dayElement.classList.add("selected");
                self.selectedDateElem = dayElement;
                if (self.config.mode === "range") {
                    toggleClass$1(dayElement, "startRange", self.selectedDates[0] &&
                        compareDates(date, self.selectedDates[0], true) === 0);
                    toggleClass$1(dayElement, "endRange", self.selectedDates[1] &&
                        compareDates(date, self.selectedDates[1], true) === 0);
                    if (className === "nextMonthDay")
                        dayElement.classList.add("inRange");
                }
            }
        }
        else {
            dayElement.classList.add("flatpickr-disabled");
        }
        if (self.config.mode === "range") {
            if (isDateInRange(date) && !isDateSelected(date))
                dayElement.classList.add("inRange");
        }
        if (self.weekNumbers &&
            self.config.showMonths === 1 &&
            className !== "prevMonthDay" &&
            i % 7 === 6) {
            self.weekNumbers.insertAdjacentHTML("beforeend", "<span class='flatpickr-day'>" + self.config.getWeek(date) + "</span>");
        }
        triggerEvent("onDayCreate", dayElement);
        return dayElement;
    }
    function focusOnDayElem(targetNode) {
        targetNode.focus();
        if (self.config.mode === "range")
            onMouseOver(targetNode);
    }
    function getFirstAvailableDay(delta) {
        var startMonth = delta > 0 ? 0 : self.config.showMonths - 1;
        var endMonth = delta > 0 ? self.config.showMonths : -1;
        for (var m = startMonth; m != endMonth; m += delta) {
            var month = self.daysContainer.children[m];
            var startIndex = delta > 0 ? 0 : month.children.length - 1;
            var endIndex = delta > 0 ? month.children.length : -1;
            for (var i = startIndex; i != endIndex; i += delta) {
                var c = month.children[i];
                if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj))
                    return c;
            }
        }
        return undefined;
    }
    function getNextAvailableDay(current, delta) {
        var givenMonth = current.className.indexOf("Month") === -1
            ? current.dateObj.getMonth()
            : self.currentMonth;
        var endMonth = delta > 0 ? self.config.showMonths : -1;
        var loopDelta = delta > 0 ? 1 : -1;
        for (var m = givenMonth - self.currentMonth; m != endMonth; m += loopDelta) {
            var month = self.daysContainer.children[m];
            var startIndex = givenMonth - self.currentMonth === m
                ? current.$i + delta
                : delta < 0
                    ? month.children.length - 1
                    : 0;
            var numMonthDays = month.children.length;
            for (var i = startIndex; i >= 0 && i < numMonthDays && i != (delta > 0 ? numMonthDays : -1); i += loopDelta) {
                var c = month.children[i];
                if (c.className.indexOf("hidden") === -1 &&
                    isEnabled(c.dateObj) &&
                    Math.abs(current.$i - i) >= Math.abs(delta))
                    return focusOnDayElem(c);
            }
        }
        self.changeMonth(loopDelta);
        focusOnDay(getFirstAvailableDay(loopDelta), 0);
        return undefined;
    }
    function focusOnDay(current, offset) {
        var activeElement = getClosestActiveElement();
        var dayFocused = isInView(activeElement || document.body);
        var startElem = current !== undefined
            ? current
            : dayFocused
                ? activeElement
                : self.selectedDateElem !== undefined && isInView(self.selectedDateElem)
                    ? self.selectedDateElem
                    : self.todayDateElem !== undefined && isInView(self.todayDateElem)
                        ? self.todayDateElem
                        : getFirstAvailableDay(offset > 0 ? 1 : -1);
        if (startElem === undefined) {
            self._input.focus();
        }
        else if (!dayFocused) {
            focusOnDayElem(startElem);
        }
        else {
            getNextAvailableDay(startElem, offset);
        }
    }
    function buildMonthDays(year, month) {
        var firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;
        var prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12, year);
        var daysInMonth = self.utils.getDaysInMonth(month, year), days = window.document.createDocumentFragment(), isMultiMonth = self.config.showMonths > 1, prevMonthDayClass = isMultiMonth ? "prevMonthDay hidden" : "prevMonthDay", nextMonthDayClass = isMultiMonth ? "nextMonthDay hidden" : "nextMonthDay";
        var dayNumber = prevMonthDays + 1 - firstOfMonth, dayIndex = 0;
        for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {
            days.appendChild(createDay("flatpickr-day " + prevMonthDayClass, new Date(year, month - 1, dayNumber), dayNumber, dayIndex));
        }
        for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {
            days.appendChild(createDay("flatpickr-day", new Date(year, month, dayNumber), dayNumber, dayIndex));
        }
        for (var dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth &&
            (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++) {
            days.appendChild(createDay("flatpickr-day " + nextMonthDayClass, new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));
        }
        var dayContainer = createElement("div", "dayContainer");
        dayContainer.appendChild(days);
        return dayContainer;
    }
    function buildDays() {
        if (self.daysContainer === undefined) {
            return;
        }
        clearNode(self.daysContainer);
        if (self.weekNumbers)
            clearNode(self.weekNumbers);
        var frag = document.createDocumentFragment();
        for (var i = 0; i < self.config.showMonths; i++) {
            var d = new Date(self.currentYear, self.currentMonth, 1);
            d.setMonth(self.currentMonth + i);
            frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));
        }
        self.daysContainer.appendChild(frag);
        self.days = self.daysContainer.firstChild;
        if (self.config.mode === "range" && self.selectedDates.length === 1) {
            onMouseOver();
        }
    }
    function buildMonthSwitch() {
        if (self.config.showMonths > 1 ||
            self.config.monthSelectorType !== "dropdown")
            return;
        var shouldBuildMonth = function (month) {
            if (self.config.minDate !== undefined &&
                self.currentYear === self.config.minDate.getFullYear() &&
                month < self.config.minDate.getMonth()) {
                return false;
            }
            return !(self.config.maxDate !== undefined &&
                self.currentYear === self.config.maxDate.getFullYear() &&
                month > self.config.maxDate.getMonth());
        };
        self.monthsDropdownContainer.tabIndex = -1;
        self.monthsDropdownContainer.innerHTML = "";
        for (var i = 0; i < 12; i++) {
            if (!shouldBuildMonth(i))
                continue;
            var month = createElement("option", "flatpickr-monthDropdown-month");
            month.value = new Date(self.currentYear, i).getMonth().toString();
            month.textContent = monthToStr(i, self.config.shorthandCurrentMonth, self.l10n);
            month.tabIndex = -1;
            if (self.currentMonth === i) {
                month.selected = true;
            }
            self.monthsDropdownContainer.appendChild(month);
        }
    }
    function buildMonth() {
        var container = createElement("div", "flatpickr-month");
        var monthNavFragment = window.document.createDocumentFragment();
        var monthElement;
        if (self.config.showMonths > 1 ||
            self.config.monthSelectorType === "static") {
            monthElement = createElement("span", "cur-month");
        }
        else {
            self.monthsDropdownContainer = createElement("select", "flatpickr-monthDropdown-months");
            self.monthsDropdownContainer.setAttribute("aria-label", self.l10n.monthAriaLabel);
            bind(self.monthsDropdownContainer, "change", function (e) {
                var target = getEventTarget(e);
                var selectedMonth = parseInt(target.value, 10);
                self.changeMonth(selectedMonth - self.currentMonth);
                triggerEvent("onMonthChange");
            });
            buildMonthSwitch();
            monthElement = self.monthsDropdownContainer;
        }
        var yearInput = createNumberInput("cur-year", { tabindex: "-1" });
        var yearElement = yearInput.getElementsByTagName("input")[0];
        yearElement.setAttribute("aria-label", self.l10n.yearAriaLabel);
        if (self.config.minDate) {
            yearElement.setAttribute("min", self.config.minDate.getFullYear().toString());
        }
        if (self.config.maxDate) {
            yearElement.setAttribute("max", self.config.maxDate.getFullYear().toString());
            yearElement.disabled =
                !!self.config.minDate &&
                    self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();
        }
        var currentMonth = createElement("div", "flatpickr-current-month");
        currentMonth.appendChild(monthElement);
        currentMonth.appendChild(yearInput);
        monthNavFragment.appendChild(currentMonth);
        container.appendChild(monthNavFragment);
        return {
            container: container,
            yearElement: yearElement,
            monthElement: monthElement,
        };
    }
    function buildMonths() {
        clearNode(self.monthNav);
        self.monthNav.appendChild(self.prevMonthNav);
        if (self.config.showMonths) {
            self.yearElements = [];
            self.monthElements = [];
        }
        for (var m = self.config.showMonths; m--;) {
            var month = buildMonth();
            self.yearElements.push(month.yearElement);
            self.monthElements.push(month.monthElement);
            self.monthNav.appendChild(month.container);
        }
        self.monthNav.appendChild(self.nextMonthNav);
    }
    function buildMonthNav() {
        self.monthNav = createElement("div", "flatpickr-months");
        self.yearElements = [];
        self.monthElements = [];
        self.prevMonthNav = createElement("span", "flatpickr-prev-month");
        self.prevMonthNav.innerHTML = self.config.prevArrow;
        self.nextMonthNav = createElement("span", "flatpickr-next-month");
        self.nextMonthNav.innerHTML = self.config.nextArrow;
        buildMonths();
        Object.defineProperty(self, "_hidePrevMonthArrow", {
            get: function () { return self.__hidePrevMonthArrow; },
            set: function (bool) {
                if (self.__hidePrevMonthArrow !== bool) {
                    toggleClass$1(self.prevMonthNav, "flatpickr-disabled", bool);
                    self.__hidePrevMonthArrow = bool;
                }
            },
        });
        Object.defineProperty(self, "_hideNextMonthArrow", {
            get: function () { return self.__hideNextMonthArrow; },
            set: function (bool) {
                if (self.__hideNextMonthArrow !== bool) {
                    toggleClass$1(self.nextMonthNav, "flatpickr-disabled", bool);
                    self.__hideNextMonthArrow = bool;
                }
            },
        });
        self.currentYearElement = self.yearElements[0];
        updateNavigationCurrentMonth();
        return self.monthNav;
    }
    function buildTime() {
        self.calendarContainer.classList.add("hasTime");
        if (self.config.noCalendar)
            self.calendarContainer.classList.add("noCalendar");
        var defaults = getDefaultHours(self.config);
        self.timeContainer = createElement("div", "flatpickr-time");
        self.timeContainer.tabIndex = -1;
        var separator = createElement("span", "flatpickr-time-separator", ":");
        var hourInput = createNumberInput("flatpickr-hour", {
            "aria-label": self.l10n.hourAriaLabel,
        });
        self.hourElement = hourInput.getElementsByTagName("input")[0];
        var minuteInput = createNumberInput("flatpickr-minute", {
            "aria-label": self.l10n.minuteAriaLabel,
        });
        self.minuteElement = minuteInput.getElementsByTagName("input")[0];
        self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;
        self.hourElement.value = pad(self.latestSelectedDateObj
            ? self.latestSelectedDateObj.getHours()
            : self.config.time_24hr
                ? defaults.hours
                : military2ampm(defaults.hours));
        self.minuteElement.value = pad(self.latestSelectedDateObj
            ? self.latestSelectedDateObj.getMinutes()
            : defaults.minutes);
        self.hourElement.setAttribute("step", self.config.hourIncrement.toString());
        self.minuteElement.setAttribute("step", self.config.minuteIncrement.toString());
        self.hourElement.setAttribute("min", self.config.time_24hr ? "0" : "1");
        self.hourElement.setAttribute("max", self.config.time_24hr ? "23" : "12");
        self.hourElement.setAttribute("maxlength", "2");
        self.minuteElement.setAttribute("min", "0");
        self.minuteElement.setAttribute("max", "59");
        self.minuteElement.setAttribute("maxlength", "2");
        self.timeContainer.appendChild(hourInput);
        self.timeContainer.appendChild(separator);
        self.timeContainer.appendChild(minuteInput);
        if (self.config.time_24hr)
            self.timeContainer.classList.add("time24hr");
        if (self.config.enableSeconds) {
            self.timeContainer.classList.add("hasSeconds");
            var secondInput = createNumberInput("flatpickr-second");
            self.secondElement = secondInput.getElementsByTagName("input")[0];
            self.secondElement.value = pad(self.latestSelectedDateObj
                ? self.latestSelectedDateObj.getSeconds()
                : defaults.seconds);
            self.secondElement.setAttribute("step", self.minuteElement.getAttribute("step"));
            self.secondElement.setAttribute("min", "0");
            self.secondElement.setAttribute("max", "59");
            self.secondElement.setAttribute("maxlength", "2");
            self.timeContainer.appendChild(createElement("span", "flatpickr-time-separator", ":"));
            self.timeContainer.appendChild(secondInput);
        }
        if (!self.config.time_24hr) {
            self.amPM = createElement("span", "flatpickr-am-pm", self.l10n.amPM[int((self.latestSelectedDateObj
                ? self.hourElement.value
                : self.config.defaultHour) > 11)]);
            self.amPM.title = self.l10n.toggleTitle;
            self.amPM.tabIndex = -1;
            self.timeContainer.appendChild(self.amPM);
        }
        return self.timeContainer;
    }
    function buildWeekdays() {
        if (!self.weekdayContainer)
            self.weekdayContainer = createElement("div", "flatpickr-weekdays");
        else
            clearNode(self.weekdayContainer);
        for (var i = self.config.showMonths; i--;) {
            var container = createElement("div", "flatpickr-weekdaycontainer");
            self.weekdayContainer.appendChild(container);
        }
        updateWeekdays();
        return self.weekdayContainer;
    }
    function updateWeekdays() {
        if (!self.weekdayContainer) {
            return;
        }
        var firstDayOfWeek = self.l10n.firstDayOfWeek;
        var weekdays = __spreadArrays(self.l10n.weekdays.shorthand);
        if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {
            weekdays = __spreadArrays(weekdays.splice(firstDayOfWeek, weekdays.length), weekdays.splice(0, firstDayOfWeek));
        }
        for (var i = self.config.showMonths; i--;) {
            self.weekdayContainer.children[i].innerHTML = "\n      <span class='flatpickr-weekday'>\n        " + weekdays.join("</span><span class='flatpickr-weekday'>") + "\n      </span>\n      ";
        }
    }
    function buildWeeks() {
        self.calendarContainer.classList.add("hasWeeks");
        var weekWrapper = createElement("div", "flatpickr-weekwrapper");
        weekWrapper.appendChild(createElement("span", "flatpickr-weekday", self.l10n.weekAbbreviation));
        var weekNumbers = createElement("div", "flatpickr-weeks");
        weekWrapper.appendChild(weekNumbers);
        return {
            weekWrapper: weekWrapper,
            weekNumbers: weekNumbers,
        };
    }
    function changeMonth(value, isOffset) {
        if (isOffset === void 0) { isOffset = true; }
        var delta = isOffset ? value : value - self.currentMonth;
        if ((delta < 0 && self._hidePrevMonthArrow === true) ||
            (delta > 0 && self._hideNextMonthArrow === true))
            return;
        self.currentMonth += delta;
        if (self.currentMonth < 0 || self.currentMonth > 11) {
            self.currentYear += self.currentMonth > 11 ? 1 : -1;
            self.currentMonth = (self.currentMonth + 12) % 12;
            triggerEvent("onYearChange");
            buildMonthSwitch();
        }
        buildDays();
        triggerEvent("onMonthChange");
        updateNavigationCurrentMonth();
    }
    function clear(triggerChangeEvent, toInitial) {
        if (triggerChangeEvent === void 0) { triggerChangeEvent = true; }
        if (toInitial === void 0) { toInitial = true; }
        self.input.value = "";
        if (self.altInput !== undefined)
            self.altInput.value = "";
        if (self.mobileInput !== undefined)
            self.mobileInput.value = "";
        self.selectedDates = [];
        self.latestSelectedDateObj = undefined;
        if (toInitial === true) {
            self.currentYear = self._initialDate.getFullYear();
            self.currentMonth = self._initialDate.getMonth();
        }
        if (self.config.enableTime === true) {
            var _a = getDefaultHours(self.config), hours = _a.hours, minutes = _a.minutes, seconds = _a.seconds;
            setHours(hours, minutes, seconds);
        }
        self.redraw();
        if (triggerChangeEvent)
            triggerEvent("onChange");
    }
    function close() {
        self.isOpen = false;
        if (!self.isMobile) {
            if (self.calendarContainer !== undefined) {
                self.calendarContainer.classList.remove("open");
            }
            if (self._input !== undefined) {
                self._input.classList.remove("active");
            }
        }
        triggerEvent("onClose");
    }
    function destroy() {
        if (self.config !== undefined)
            triggerEvent("onDestroy");
        for (var i = self._handlers.length; i--;) {
            self._handlers[i].remove();
        }
        self._handlers = [];
        if (self.mobileInput) {
            if (self.mobileInput.parentNode)
                self.mobileInput.parentNode.removeChild(self.mobileInput);
            self.mobileInput = undefined;
        }
        else if (self.calendarContainer && self.calendarContainer.parentNode) {
            if (self.config.static && self.calendarContainer.parentNode) {
                var wrapper = self.calendarContainer.parentNode;
                wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);
                if (wrapper.parentNode) {
                    while (wrapper.firstChild)
                        wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);
                    wrapper.parentNode.removeChild(wrapper);
                }
            }
            else
                self.calendarContainer.parentNode.removeChild(self.calendarContainer);
        }
        if (self.altInput) {
            self.input.type = "text";
            if (self.altInput.parentNode)
                self.altInput.parentNode.removeChild(self.altInput);
            delete self.altInput;
        }
        if (self.input) {
            self.input.type = self.input._type;
            self.input.classList.remove("flatpickr-input");
            self.input.removeAttribute("readonly");
        }
        [
            "_showTimeInput",
            "latestSelectedDateObj",
            "_hideNextMonthArrow",
            "_hidePrevMonthArrow",
            "__hideNextMonthArrow",
            "__hidePrevMonthArrow",
            "isMobile",
            "isOpen",
            "selectedDateElem",
            "minDateHasTime",
            "maxDateHasTime",
            "days",
            "daysContainer",
            "_input",
            "_positionElement",
            "innerContainer",
            "rContainer",
            "monthNav",
            "todayDateElem",
            "calendarContainer",
            "weekdayContainer",
            "prevMonthNav",
            "nextMonthNav",
            "monthsDropdownContainer",
            "currentMonthElement",
            "currentYearElement",
            "navigationCurrentMonth",
            "selectedDateElem",
            "config",
        ].forEach(function (k) {
            try {
                delete self[k];
            }
            catch (_) { }
        });
    }
    function isCalendarElem(elem) {
        return self.calendarContainer.contains(elem);
    }
    function documentClick(e) {
        if (self.isOpen && !self.config.inline) {
            var eventTarget_1 = getEventTarget(e);
            var isCalendarElement = isCalendarElem(eventTarget_1);
            var isInput = eventTarget_1 === self.input ||
                eventTarget_1 === self.altInput ||
                self.element.contains(eventTarget_1) ||
                (e.path &&
                    e.path.indexOf &&
                    (~e.path.indexOf(self.input) ||
                        ~e.path.indexOf(self.altInput)));
            var lostFocus = !isInput &&
                !isCalendarElement &&
                !isCalendarElem(e.relatedTarget);
            var isIgnored = !self.config.ignoredFocusElements.some(function (elem) {
                return elem.contains(eventTarget_1);
            });
            if (lostFocus && isIgnored) {
                if (self.config.allowInput) {
                    self.setDate(self._input.value, false, self.config.altInput
                        ? self.config.altFormat
                        : self.config.dateFormat);
                }
                if (self.timeContainer !== undefined &&
                    self.minuteElement !== undefined &&
                    self.hourElement !== undefined &&
                    self.input.value !== "" &&
                    self.input.value !== undefined) {
                    updateTime();
                }
                self.close();
                if (self.config &&
                    self.config.mode === "range" &&
                    self.selectedDates.length === 1)
                    self.clear(false);
            }
        }
    }
    function changeYear(newYear) {
        if (!newYear ||
            (self.config.minDate && newYear < self.config.minDate.getFullYear()) ||
            (self.config.maxDate && newYear > self.config.maxDate.getFullYear()))
            return;
        var newYearNum = newYear, isNewYear = self.currentYear !== newYearNum;
        self.currentYear = newYearNum || self.currentYear;
        if (self.config.maxDate &&
            self.currentYear === self.config.maxDate.getFullYear()) {
            self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);
        }
        else if (self.config.minDate &&
            self.currentYear === self.config.minDate.getFullYear()) {
            self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);
        }
        if (isNewYear) {
            self.redraw();
            triggerEvent("onYearChange");
            buildMonthSwitch();
        }
    }
    function isEnabled(date, timeless) {
        var _a;
        if (timeless === void 0) { timeless = true; }
        var dateToCheck = self.parseDate(date, undefined, timeless);
        if ((self.config.minDate &&
            dateToCheck &&
            compareDates(dateToCheck, self.config.minDate, timeless !== undefined ? timeless : !self.minDateHasTime) < 0) ||
            (self.config.maxDate &&
                dateToCheck &&
                compareDates(dateToCheck, self.config.maxDate, timeless !== undefined ? timeless : !self.maxDateHasTime) > 0))
            return false;
        if (!self.config.enable && self.config.disable.length === 0)
            return true;
        if (dateToCheck === undefined)
            return false;
        var bool = !!self.config.enable, array = (_a = self.config.enable) !== null && _a !== void 0 ? _a : self.config.disable;
        for (var i = 0, d = void 0; i < array.length; i++) {
            d = array[i];
            if (typeof d === "function" &&
                d(dateToCheck))
                return bool;
            else if (d instanceof Date &&
                dateToCheck !== undefined &&
                d.getTime() === dateToCheck.getTime())
                return bool;
            else if (typeof d === "string") {
                var parsed = self.parseDate(d, undefined, true);
                return parsed && parsed.getTime() === dateToCheck.getTime()
                    ? bool
                    : !bool;
            }
            else if (typeof d === "object" &&
                dateToCheck !== undefined &&
                d.from &&
                d.to &&
                dateToCheck.getTime() >= d.from.getTime() &&
                dateToCheck.getTime() <= d.to.getTime())
                return bool;
        }
        return !bool;
    }
    function isInView(elem) {
        if (self.daysContainer !== undefined)
            return (elem.className.indexOf("hidden") === -1 &&
                elem.className.indexOf("flatpickr-disabled") === -1 &&
                self.daysContainer.contains(elem));
        return false;
    }
    function onBlur(e) {
        var isInput = e.target === self._input;
        var valueChanged = self._input.value.trimEnd() !== getDateStr();
        if (isInput &&
            valueChanged &&
            !(e.relatedTarget && isCalendarElem(e.relatedTarget))) {
            self.setDate(self._input.value, true, e.target === self.altInput
                ? self.config.altFormat
                : self.config.dateFormat);
        }
    }
    function onKeyDown(e) {
        var eventTarget = getEventTarget(e);
        var isInput = self.config.wrap
            ? element.contains(eventTarget)
            : eventTarget === self._input;
        var allowInput = self.config.allowInput;
        var allowKeydown = self.isOpen && (!allowInput || !isInput);
        var allowInlineKeydown = self.config.inline && isInput && !allowInput;
        if (e.keyCode === 13 && isInput) {
            if (allowInput) {
                self.setDate(self._input.value, true, eventTarget === self.altInput
                    ? self.config.altFormat
                    : self.config.dateFormat);
                self.close();
                return eventTarget.blur();
            }
            else {
                self.open();
            }
        }
        else if (isCalendarElem(eventTarget) ||
            allowKeydown ||
            allowInlineKeydown) {
            var isTimeObj = !!self.timeContainer &&
                self.timeContainer.contains(eventTarget);
            switch (e.keyCode) {
                case 13:
                    if (isTimeObj) {
                        e.preventDefault();
                        updateTime();
                        focusAndClose();
                    }
                    else
                        selectDate(e);
                    break;
                case 27:
                    e.preventDefault();
                    focusAndClose();
                    break;
                case 8:
                case 46:
                    if (isInput && !self.config.allowInput) {
                        e.preventDefault();
                        self.clear();
                    }
                    break;
                case 37:
                case 39:
                    if (!isTimeObj && !isInput) {
                        e.preventDefault();
                        var activeElement = getClosestActiveElement();
                        if (self.daysContainer !== undefined &&
                            (allowInput === false ||
                                (activeElement && isInView(activeElement)))) {
                            var delta_1 = e.keyCode === 39 ? 1 : -1;
                            if (!e.ctrlKey)
                                focusOnDay(undefined, delta_1);
                            else {
                                e.stopPropagation();
                                changeMonth(delta_1);
                                focusOnDay(getFirstAvailableDay(1), 0);
                            }
                        }
                    }
                    else if (self.hourElement)
                        self.hourElement.focus();
                    break;
                case 38:
                case 40:
                    e.preventDefault();
                    var delta = e.keyCode === 40 ? 1 : -1;
                    if ((self.daysContainer &&
                        eventTarget.$i !== undefined) ||
                        eventTarget === self.input ||
                        eventTarget === self.altInput) {
                        if (e.ctrlKey) {
                            e.stopPropagation();
                            changeYear(self.currentYear - delta);
                            focusOnDay(getFirstAvailableDay(1), 0);
                        }
                        else if (!isTimeObj)
                            focusOnDay(undefined, delta * 7);
                    }
                    else if (eventTarget === self.currentYearElement) {
                        changeYear(self.currentYear - delta);
                    }
                    else if (self.config.enableTime) {
                        if (!isTimeObj && self.hourElement)
                            self.hourElement.focus();
                        updateTime(e);
                        self._debouncedChange();
                    }
                    break;
                case 9:
                    if (isTimeObj) {
                        var elems = [
                            self.hourElement,
                            self.minuteElement,
                            self.secondElement,
                            self.amPM,
                        ]
                            .concat(self.pluginElements)
                            .filter(function (x) { return x; });
                        var i = elems.indexOf(eventTarget);
                        if (i !== -1) {
                            var target = elems[i + (e.shiftKey ? -1 : 1)];
                            e.preventDefault();
                            (target || self._input).focus();
                        }
                    }
                    else if (!self.config.noCalendar &&
                        self.daysContainer &&
                        self.daysContainer.contains(eventTarget) &&
                        e.shiftKey) {
                        e.preventDefault();
                        self._input.focus();
                    }
                    break;
            }
        }
        if (self.amPM !== undefined && eventTarget === self.amPM) {
            switch (e.key) {
                case self.l10n.amPM[0].charAt(0):
                case self.l10n.amPM[0].charAt(0).toLowerCase():
                    self.amPM.textContent = self.l10n.amPM[0];
                    setHoursFromInputs();
                    updateValue();
                    break;
                case self.l10n.amPM[1].charAt(0):
                case self.l10n.amPM[1].charAt(0).toLowerCase():
                    self.amPM.textContent = self.l10n.amPM[1];
                    setHoursFromInputs();
                    updateValue();
                    break;
            }
        }
        if (isInput || isCalendarElem(eventTarget)) {
            triggerEvent("onKeyDown", e);
        }
    }
    function onMouseOver(elem, cellClass) {
        if (cellClass === void 0) { cellClass = "flatpickr-day"; }
        if (self.selectedDates.length !== 1 ||
            (elem &&
                (!elem.classList.contains(cellClass) ||
                    elem.classList.contains("flatpickr-disabled"))))
            return;
        var hoverDate = elem
            ? elem.dateObj.getTime()
            : self.days.firstElementChild.dateObj.getTime(), initialDate = self.parseDate(self.selectedDates[0], undefined, true).getTime(), rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()), rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime());
        var containsDisabled = false;
        var minRange = 0, maxRange = 0;
        for (var t = rangeStartDate; t < rangeEndDate; t += duration.DAY) {
            if (!isEnabled(new Date(t), true)) {
                containsDisabled =
                    containsDisabled || (t > rangeStartDate && t < rangeEndDate);
                if (t < initialDate && (!minRange || t > minRange))
                    minRange = t;
                else if (t > initialDate && (!maxRange || t < maxRange))
                    maxRange = t;
            }
        }
        var hoverableCells = Array.from(self.rContainer.querySelectorAll("*:nth-child(-n+" + self.config.showMonths + ") > ." + cellClass));
        hoverableCells.forEach(function (dayElem) {
            var date = dayElem.dateObj;
            var timestamp = date.getTime();
            var outOfRange = (minRange > 0 && timestamp < minRange) ||
                (maxRange > 0 && timestamp > maxRange);
            if (outOfRange) {
                dayElem.classList.add("notAllowed");
                ["inRange", "startRange", "endRange"].forEach(function (c) {
                    dayElem.classList.remove(c);
                });
                return;
            }
            else if (containsDisabled && !outOfRange)
                return;
            ["startRange", "inRange", "endRange", "notAllowed"].forEach(function (c) {
                dayElem.classList.remove(c);
            });
            if (elem !== undefined) {
                elem.classList.add(hoverDate <= self.selectedDates[0].getTime()
                    ? "startRange"
                    : "endRange");
                if (initialDate < hoverDate && timestamp === initialDate)
                    dayElem.classList.add("startRange");
                else if (initialDate > hoverDate && timestamp === initialDate)
                    dayElem.classList.add("endRange");
                if (timestamp >= minRange &&
                    (maxRange === 0 || timestamp <= maxRange) &&
                    isBetween(timestamp, initialDate, hoverDate))
                    dayElem.classList.add("inRange");
            }
        });
    }
    function onResize() {
        if (self.isOpen && !self.config.static && !self.config.inline)
            positionCalendar();
    }
    function open(e, positionElement) {
        if (positionElement === void 0) { positionElement = self._positionElement; }
        if (self.isMobile === true) {
            if (e) {
                e.preventDefault();
                var eventTarget = getEventTarget(e);
                if (eventTarget) {
                    eventTarget.blur();
                }
            }
            if (self.mobileInput !== undefined) {
                self.mobileInput.focus();
                self.mobileInput.click();
            }
            triggerEvent("onOpen");
            return;
        }
        else if (self._input.disabled || self.config.inline) {
            return;
        }
        var wasOpen = self.isOpen;
        self.isOpen = true;
        if (!wasOpen) {
            self.calendarContainer.classList.add("open");
            self._input.classList.add("active");
            triggerEvent("onOpen");
            positionCalendar(positionElement);
        }
        if (self.config.enableTime === true && self.config.noCalendar === true) {
            if (self.config.allowInput === false &&
                (e === undefined ||
                    !self.timeContainer.contains(e.relatedTarget))) {
                setTimeout(function () { return self.hourElement.select(); }, 50);
            }
        }
    }
    function minMaxDateSetter(type) {
        return function (date) {
            var dateObj = (self.config["_" + type + "Date"] = self.parseDate(date, self.config.dateFormat));
            var inverseDateObj = self.config["_" + (type === "min" ? "max" : "min") + "Date"];
            if (dateObj !== undefined) {
                self[type === "min" ? "minDateHasTime" : "maxDateHasTime"] =
                    dateObj.getHours() > 0 ||
                        dateObj.getMinutes() > 0 ||
                        dateObj.getSeconds() > 0;
            }
            if (self.selectedDates) {
                self.selectedDates = self.selectedDates.filter(function (d) { return isEnabled(d); });
                if (!self.selectedDates.length && type === "min")
                    setHoursFromDate(dateObj);
                updateValue();
            }
            if (self.daysContainer) {
                redraw();
                if (dateObj !== undefined)
                    self.currentYearElement[type] = dateObj.getFullYear().toString();
                else
                    self.currentYearElement.removeAttribute(type);
                self.currentYearElement.disabled =
                    !!inverseDateObj &&
                        dateObj !== undefined &&
                        inverseDateObj.getFullYear() === dateObj.getFullYear();
            }
        };
    }
    function parseConfig() {
        var boolOpts = [
            "wrap",
            "weekNumbers",
            "allowInput",
            "allowInvalidPreload",
            "clickOpens",
            "time_24hr",
            "enableTime",
            "noCalendar",
            "altInput",
            "shorthandCurrentMonth",
            "inline",
            "static",
            "enableSeconds",
            "disableMobile",
        ];
        var userConfig = __assign(__assign({}, JSON.parse(JSON.stringify(element.dataset || {}))), instanceConfig);
        var formats = {};
        self.config.parseDate = userConfig.parseDate;
        self.config.formatDate = userConfig.formatDate;
        Object.defineProperty(self.config, "enable", {
            get: function () { return self.config._enable; },
            set: function (dates) {
                self.config._enable = parseDateRules(dates);
            },
        });
        Object.defineProperty(self.config, "disable", {
            get: function () { return self.config._disable; },
            set: function (dates) {
                self.config._disable = parseDateRules(dates);
            },
        });
        var timeMode = userConfig.mode === "time";
        if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {
            var defaultDateFormat = flatpickr.defaultConfig.dateFormat || defaults$1.dateFormat;
            formats.dateFormat =
                userConfig.noCalendar || timeMode
                    ? "H:i" + (userConfig.enableSeconds ? ":S" : "")
                    : defaultDateFormat + " H:i" + (userConfig.enableSeconds ? ":S" : "");
        }
        if (userConfig.altInput &&
            (userConfig.enableTime || timeMode) &&
            !userConfig.altFormat) {
            var defaultAltFormat = flatpickr.defaultConfig.altFormat || defaults$1.altFormat;
            formats.altFormat =
                userConfig.noCalendar || timeMode
                    ? "h:i" + (userConfig.enableSeconds ? ":S K" : " K")
                    : defaultAltFormat + (" h:i" + (userConfig.enableSeconds ? ":S" : "") + " K");
        }
        Object.defineProperty(self.config, "minDate", {
            get: function () { return self.config._minDate; },
            set: minMaxDateSetter("min"),
        });
        Object.defineProperty(self.config, "maxDate", {
            get: function () { return self.config._maxDate; },
            set: minMaxDateSetter("max"),
        });
        var minMaxTimeSetter = function (type) { return function (val) {
            self.config[type === "min" ? "_minTime" : "_maxTime"] = self.parseDate(val, "H:i:S");
        }; };
        Object.defineProperty(self.config, "minTime", {
            get: function () { return self.config._minTime; },
            set: minMaxTimeSetter("min"),
        });
        Object.defineProperty(self.config, "maxTime", {
            get: function () { return self.config._maxTime; },
            set: minMaxTimeSetter("max"),
        });
        if (userConfig.mode === "time") {
            self.config.noCalendar = true;
            self.config.enableTime = true;
        }
        Object.assign(self.config, formats, userConfig);
        for (var i = 0; i < boolOpts.length; i++)
            self.config[boolOpts[i]] =
                self.config[boolOpts[i]] === true ||
                    self.config[boolOpts[i]] === "true";
        HOOKS.filter(function (hook) { return self.config[hook] !== undefined; }).forEach(function (hook) {
            self.config[hook] = arrayify(self.config[hook] || []).map(bindToInstance);
        });
        self.isMobile =
            !self.config.disableMobile &&
                !self.config.inline &&
                self.config.mode === "single" &&
                !self.config.disable.length &&
                !self.config.enable &&
                !self.config.weekNumbers &&
                /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        for (var i = 0; i < self.config.plugins.length; i++) {
            var pluginConf = self.config.plugins[i](self) || {};
            for (var key in pluginConf) {
                if (HOOKS.indexOf(key) > -1) {
                    self.config[key] = arrayify(pluginConf[key])
                        .map(bindToInstance)
                        .concat(self.config[key]);
                }
                else if (typeof userConfig[key] === "undefined")
                    self.config[key] = pluginConf[key];
            }
        }
        if (!userConfig.altInputClass) {
            self.config.altInputClass =
                getInputElem().className + " " + self.config.altInputClass;
        }
        triggerEvent("onParseConfig");
    }
    function getInputElem() {
        return self.config.wrap
            ? element.querySelector("[data-input]")
            : element;
    }
    function setupLocale() {
        if (typeof self.config.locale !== "object" &&
            typeof flatpickr.l10ns[self.config.locale] === "undefined")
            self.config.errorHandler(new Error("flatpickr: invalid locale " + self.config.locale));
        self.l10n = __assign(__assign({}, flatpickr.l10ns.default), (typeof self.config.locale === "object"
            ? self.config.locale
            : self.config.locale !== "default"
                ? flatpickr.l10ns[self.config.locale]
                : undefined));
        tokenRegex.D = "(" + self.l10n.weekdays.shorthand.join("|") + ")";
        tokenRegex.l = "(" + self.l10n.weekdays.longhand.join("|") + ")";
        tokenRegex.M = "(" + self.l10n.months.shorthand.join("|") + ")";
        tokenRegex.F = "(" + self.l10n.months.longhand.join("|") + ")";
        tokenRegex.K = "(" + self.l10n.amPM[0] + "|" + self.l10n.amPM[1] + "|" + self.l10n.amPM[0].toLowerCase() + "|" + self.l10n.amPM[1].toLowerCase() + ")";
        var userConfig = __assign(__assign({}, instanceConfig), JSON.parse(JSON.stringify(element.dataset || {})));
        if (userConfig.time_24hr === undefined &&
            flatpickr.defaultConfig.time_24hr === undefined) {
            self.config.time_24hr = self.l10n.time_24hr;
        }
        self.formatDate = createDateFormatter(self);
        self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
    }
    function positionCalendar(customPositionElement) {
        if (typeof self.config.position === "function") {
            return void self.config.position(self, customPositionElement);
        }
        if (self.calendarContainer === undefined)
            return;
        triggerEvent("onPreCalendarPosition");
        var positionElement = customPositionElement || self._positionElement;
        var calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, (function (acc, child) { return acc + child.offsetHeight; }), 0), calendarWidth = self.calendarContainer.offsetWidth, configPos = self.config.position.split(" "), configPosVertical = configPos[0], configPosHorizontal = configPos.length > 1 ? configPos[1] : null, inputBounds = positionElement.getBoundingClientRect(), distanceFromBottom = window.innerHeight - inputBounds.bottom, showOnTop = configPosVertical === "above" ||
            (configPosVertical !== "below" &&
                distanceFromBottom < calendarHeight &&
                inputBounds.top > calendarHeight);
        var top = window.pageYOffset +
            inputBounds.top +
            (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);
        toggleClass$1(self.calendarContainer, "arrowTop", !showOnTop);
        toggleClass$1(self.calendarContainer, "arrowBottom", showOnTop);
        if (self.config.inline)
            return;
        var left = window.pageXOffset + inputBounds.left;
        var isCenter = false;
        var isRight = false;
        if (configPosHorizontal === "center") {
            left -= (calendarWidth - inputBounds.width) / 2;
            isCenter = true;
        }
        else if (configPosHorizontal === "right") {
            left -= calendarWidth - inputBounds.width;
            isRight = true;
        }
        toggleClass$1(self.calendarContainer, "arrowLeft", !isCenter && !isRight);
        toggleClass$1(self.calendarContainer, "arrowCenter", isCenter);
        toggleClass$1(self.calendarContainer, "arrowRight", isRight);
        var right = window.document.body.offsetWidth -
            (window.pageXOffset + inputBounds.right);
        var rightMost = left + calendarWidth > window.document.body.offsetWidth;
        var centerMost = right + calendarWidth > window.document.body.offsetWidth;
        toggleClass$1(self.calendarContainer, "rightMost", rightMost);
        if (self.config.static)
            return;
        self.calendarContainer.style.top = top + "px";
        if (!rightMost) {
            self.calendarContainer.style.left = left + "px";
            self.calendarContainer.style.right = "auto";
        }
        else if (!centerMost) {
            self.calendarContainer.style.left = "auto";
            self.calendarContainer.style.right = right + "px";
        }
        else {
            var doc = getDocumentStyleSheet();
            if (doc === undefined)
                return;
            var bodyWidth = window.document.body.offsetWidth;
            var centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);
            var centerBefore = ".flatpickr-calendar.centerMost:before";
            var centerAfter = ".flatpickr-calendar.centerMost:after";
            var centerIndex = doc.cssRules.length;
            var centerStyle = "{left:" + inputBounds.left + "px;right:auto;}";
            toggleClass$1(self.calendarContainer, "rightMost", false);
            toggleClass$1(self.calendarContainer, "centerMost", true);
            doc.insertRule(centerBefore + "," + centerAfter + centerStyle, centerIndex);
            self.calendarContainer.style.left = centerLeft + "px";
            self.calendarContainer.style.right = "auto";
        }
    }
    function getDocumentStyleSheet() {
        var editableSheet = null;
        for (var i = 0; i < document.styleSheets.length; i++) {
            var sheet = document.styleSheets[i];
            if (!sheet.cssRules)
                continue;
            try {
                sheet.cssRules;
            }
            catch (err) {
                continue;
            }
            editableSheet = sheet;
            break;
        }
        return editableSheet != null ? editableSheet : createStyleSheet();
    }
    function createStyleSheet() {
        var style = document.createElement("style");
        document.head.appendChild(style);
        return style.sheet;
    }
    function redraw() {
        if (self.config.noCalendar || self.isMobile)
            return;
        buildMonthSwitch();
        updateNavigationCurrentMonth();
        buildDays();
    }
    function focusAndClose() {
        self._input.focus();
        if (window.navigator.userAgent.indexOf("MSIE") !== -1 ||
            navigator.msMaxTouchPoints !== undefined) {
            setTimeout(self.close, 0);
        }
        else {
            self.close();
        }
    }
    function selectDate(e) {
        e.preventDefault();
        e.stopPropagation();
        var isSelectable = function (day) {
            return day.classList &&
                day.classList.contains("flatpickr-day") &&
                !day.classList.contains("flatpickr-disabled") &&
                !day.classList.contains("notAllowed");
        };
        var t = findParent(getEventTarget(e), isSelectable);
        if (t === undefined)
            return;
        var target = t;
        var selectedDate = (self.latestSelectedDateObj = new Date(target.dateObj.getTime()));
        var shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth ||
            selectedDate.getMonth() >
                self.currentMonth + self.config.showMonths - 1) &&
            self.config.mode !== "range";
        self.selectedDateElem = target;
        if (self.config.mode === "single")
            self.selectedDates = [selectedDate];
        else if (self.config.mode === "multiple") {
            var selectedIndex = isDateSelected(selectedDate);
            if (selectedIndex)
                self.selectedDates.splice(parseInt(selectedIndex), 1);
            else
                self.selectedDates.push(selectedDate);
        }
        else if (self.config.mode === "range") {
            if (self.selectedDates.length === 2) {
                self.clear(false, false);
            }
            self.latestSelectedDateObj = selectedDate;
            self.selectedDates.push(selectedDate);
            if (compareDates(selectedDate, self.selectedDates[0], true) !== 0)
                self.selectedDates.sort(function (a, b) { return a.getTime() - b.getTime(); });
        }
        setHoursFromInputs();
        if (shouldChangeMonth) {
            var isNewYear = self.currentYear !== selectedDate.getFullYear();
            self.currentYear = selectedDate.getFullYear();
            self.currentMonth = selectedDate.getMonth();
            if (isNewYear) {
                triggerEvent("onYearChange");
                buildMonthSwitch();
            }
            triggerEvent("onMonthChange");
        }
        updateNavigationCurrentMonth();
        buildDays();
        updateValue();
        if (!shouldChangeMonth &&
            self.config.mode !== "range" &&
            self.config.showMonths === 1)
            focusOnDayElem(target);
        else if (self.selectedDateElem !== undefined &&
            self.hourElement === undefined) {
            self.selectedDateElem && self.selectedDateElem.focus();
        }
        if (self.hourElement !== undefined)
            self.hourElement !== undefined && self.hourElement.focus();
        if (self.config.closeOnSelect) {
            var single = self.config.mode === "single" && !self.config.enableTime;
            var range = self.config.mode === "range" &&
                self.selectedDates.length === 2 &&
                !self.config.enableTime;
            if (single || range) {
                focusAndClose();
            }
        }
        triggerChange();
    }
    var CALLBACKS = {
        locale: [setupLocale, updateWeekdays],
        showMonths: [buildMonths, setCalendarWidth, buildWeekdays],
        minDate: [jumpToDate],
        maxDate: [jumpToDate],
        positionElement: [updatePositionElement],
        clickOpens: [
            function () {
                if (self.config.clickOpens === true) {
                    bind(self._input, "focus", self.open);
                    bind(self._input, "click", self.open);
                }
                else {
                    self._input.removeEventListener("focus", self.open);
                    self._input.removeEventListener("click", self.open);
                }
            },
        ],
    };
    function set(option, value) {
        if (option !== null && typeof option === "object") {
            Object.assign(self.config, option);
            for (var key in option) {
                if (CALLBACKS[key] !== undefined)
                    CALLBACKS[key].forEach(function (x) { return x(); });
            }
        }
        else {
            self.config[option] = value;
            if (CALLBACKS[option] !== undefined)
                CALLBACKS[option].forEach(function (x) { return x(); });
            else if (HOOKS.indexOf(option) > -1)
                self.config[option] = arrayify(value);
        }
        self.redraw();
        updateValue(true);
    }
    function setSelectedDate(inputDate, format) {
        var dates = [];
        if (inputDate instanceof Array)
            dates = inputDate.map(function (d) { return self.parseDate(d, format); });
        else if (inputDate instanceof Date || typeof inputDate === "number")
            dates = [self.parseDate(inputDate, format)];
        else if (typeof inputDate === "string") {
            switch (self.config.mode) {
                case "single":
                case "time":
                    dates = [self.parseDate(inputDate, format)];
                    break;
                case "multiple":
                    dates = inputDate
                        .split(self.config.conjunction)
                        .map(function (date) { return self.parseDate(date, format); });
                    break;
                case "range":
                    dates = inputDate
                        .split(self.l10n.rangeSeparator)
                        .map(function (date) { return self.parseDate(date, format); });
                    break;
            }
        }
        else
            self.config.errorHandler(new Error("Invalid date supplied: " + JSON.stringify(inputDate)));
        self.selectedDates = (self.config.allowInvalidPreload
            ? dates
            : dates.filter(function (d) { return d instanceof Date && isEnabled(d, false); }));
        if (self.config.mode === "range")
            self.selectedDates.sort(function (a, b) { return a.getTime() - b.getTime(); });
    }
    function setDate(date, triggerChange, format) {
        if (triggerChange === void 0) { triggerChange = false; }
        if (format === void 0) { format = self.config.dateFormat; }
        if ((date !== 0 && !date) || (date instanceof Array && date.length === 0))
            return self.clear(triggerChange);
        setSelectedDate(date, format);
        self.latestSelectedDateObj =
            self.selectedDates[self.selectedDates.length - 1];
        self.redraw();
        jumpToDate(undefined, triggerChange);
        setHoursFromDate();
        if (self.selectedDates.length === 0) {
            self.clear(false);
        }
        updateValue(triggerChange);
        if (triggerChange)
            triggerEvent("onChange");
    }
    function parseDateRules(arr) {
        return arr
            .slice()
            .map(function (rule) {
            if (typeof rule === "string" ||
                typeof rule === "number" ||
                rule instanceof Date) {
                return self.parseDate(rule, undefined, true);
            }
            else if (rule &&
                typeof rule === "object" &&
                rule.from &&
                rule.to)
                return {
                    from: self.parseDate(rule.from, undefined),
                    to: self.parseDate(rule.to, undefined),
                };
            return rule;
        })
            .filter(function (x) { return x; });
    }
    function setupDates() {
        self.selectedDates = [];
        self.now = self.parseDate(self.config.now) || new Date();
        var preloadedDate = self.config.defaultDate ||
            ((self.input.nodeName === "INPUT" ||
                self.input.nodeName === "TEXTAREA") &&
                self.input.placeholder &&
                self.input.value === self.input.placeholder
                ? null
                : self.input.value);
        if (preloadedDate)
            setSelectedDate(preloadedDate, self.config.dateFormat);
        self._initialDate =
            self.selectedDates.length > 0
                ? self.selectedDates[0]
                : self.config.minDate &&
                    self.config.minDate.getTime() > self.now.getTime()
                    ? self.config.minDate
                    : self.config.maxDate &&
                        self.config.maxDate.getTime() < self.now.getTime()
                        ? self.config.maxDate
                        : self.now;
        self.currentYear = self._initialDate.getFullYear();
        self.currentMonth = self._initialDate.getMonth();
        if (self.selectedDates.length > 0)
            self.latestSelectedDateObj = self.selectedDates[0];
        if (self.config.minTime !== undefined)
            self.config.minTime = self.parseDate(self.config.minTime, "H:i");
        if (self.config.maxTime !== undefined)
            self.config.maxTime = self.parseDate(self.config.maxTime, "H:i");
        self.minDateHasTime =
            !!self.config.minDate &&
                (self.config.minDate.getHours() > 0 ||
                    self.config.minDate.getMinutes() > 0 ||
                    self.config.minDate.getSeconds() > 0);
        self.maxDateHasTime =
            !!self.config.maxDate &&
                (self.config.maxDate.getHours() > 0 ||
                    self.config.maxDate.getMinutes() > 0 ||
                    self.config.maxDate.getSeconds() > 0);
    }
    function setupInputs() {
        self.input = getInputElem();
        if (!self.input) {
            self.config.errorHandler(new Error("Invalid input element specified"));
            return;
        }
        self.input._type = self.input.type;
        self.input.type = "text";
        self.input.classList.add("flatpickr-input");
        self._input = self.input;
        if (self.config.altInput) {
            self.altInput = createElement(self.input.nodeName, self.config.altInputClass);
            self._input = self.altInput;
            self.altInput.placeholder = self.input.placeholder;
            self.altInput.disabled = self.input.disabled;
            self.altInput.required = self.input.required;
            self.altInput.tabIndex = self.input.tabIndex;
            self.altInput.type = "text";
            self.input.setAttribute("type", "hidden");
            if (!self.config.static && self.input.parentNode)
                self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);
        }
        if (!self.config.allowInput)
            self._input.setAttribute("readonly", "readonly");
        updatePositionElement();
    }
    function updatePositionElement() {
        self._positionElement = self.config.positionElement || self._input;
    }
    function setupMobile() {
        var inputType = self.config.enableTime
            ? self.config.noCalendar
                ? "time"
                : "datetime-local"
            : "date";
        self.mobileInput = createElement("input", self.input.className + " flatpickr-mobile");
        self.mobileInput.tabIndex = 1;
        self.mobileInput.type = inputType;
        self.mobileInput.disabled = self.input.disabled;
        self.mobileInput.required = self.input.required;
        self.mobileInput.placeholder = self.input.placeholder;
        self.mobileFormatStr =
            inputType === "datetime-local"
                ? "Y-m-d\\TH:i:S"
                : inputType === "date"
                    ? "Y-m-d"
                    : "H:i:S";
        if (self.selectedDates.length > 0) {
            self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);
        }
        if (self.config.minDate)
            self.mobileInput.min = self.formatDate(self.config.minDate, "Y-m-d");
        if (self.config.maxDate)
            self.mobileInput.max = self.formatDate(self.config.maxDate, "Y-m-d");
        if (self.input.getAttribute("step"))
            self.mobileInput.step = String(self.input.getAttribute("step"));
        self.input.type = "hidden";
        if (self.altInput !== undefined)
            self.altInput.type = "hidden";
        try {
            if (self.input.parentNode)
                self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);
        }
        catch (_a) { }
        bind(self.mobileInput, "change", function (e) {
            self.setDate(getEventTarget(e).value, false, self.mobileFormatStr);
            triggerEvent("onChange");
            triggerEvent("onClose");
        });
    }
    function toggle(e) {
        if (self.isOpen === true)
            return self.close();
        self.open(e);
    }
    function triggerEvent(event, data) {
        if (self.config === undefined)
            return;
        var hooks = self.config[event];
        if (hooks !== undefined && hooks.length > 0) {
            for (var i = 0; hooks[i] && i < hooks.length; i++)
                hooks[i](self.selectedDates, self.input.value, self, data);
        }
        if (event === "onChange") {
            self.input.dispatchEvent(createEvent("change"));
            self.input.dispatchEvent(createEvent("input"));
        }
    }
    function createEvent(name) {
        var e = document.createEvent("Event");
        e.initEvent(name, true, true);
        return e;
    }
    function isDateSelected(date) {
        for (var i = 0; i < self.selectedDates.length; i++) {
            var selectedDate = self.selectedDates[i];
            if (selectedDate instanceof Date &&
                compareDates(selectedDate, date) === 0)
                return "" + i;
        }
        return false;
    }
    function isDateInRange(date) {
        if (self.config.mode !== "range" || self.selectedDates.length < 2)
            return false;
        return (compareDates(date, self.selectedDates[0]) >= 0 &&
            compareDates(date, self.selectedDates[1]) <= 0);
    }
    function updateNavigationCurrentMonth() {
        if (self.config.noCalendar || self.isMobile || !self.monthNav)
            return;
        self.yearElements.forEach(function (yearElement, i) {
            var d = new Date(self.currentYear, self.currentMonth, 1);
            d.setMonth(self.currentMonth + i);
            if (self.config.showMonths > 1 ||
                self.config.monthSelectorType === "static") {
                self.monthElements[i].textContent =
                    monthToStr(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + " ";
            }
            else {
                self.monthsDropdownContainer.value = d.getMonth().toString();
            }
            yearElement.value = d.getFullYear().toString();
        });
        self._hidePrevMonthArrow =
            self.config.minDate !== undefined &&
                (self.currentYear === self.config.minDate.getFullYear()
                    ? self.currentMonth <= self.config.minDate.getMonth()
                    : self.currentYear < self.config.minDate.getFullYear());
        self._hideNextMonthArrow =
            self.config.maxDate !== undefined &&
                (self.currentYear === self.config.maxDate.getFullYear()
                    ? self.currentMonth + 1 > self.config.maxDate.getMonth()
                    : self.currentYear > self.config.maxDate.getFullYear());
    }
    function getDateStr(specificFormat) {
        var format = specificFormat ||
            (self.config.altInput ? self.config.altFormat : self.config.dateFormat);
        return self.selectedDates
            .map(function (dObj) { return self.formatDate(dObj, format); })
            .filter(function (d, i, arr) {
            return self.config.mode !== "range" ||
                self.config.enableTime ||
                arr.indexOf(d) === i;
        })
            .join(self.config.mode !== "range"
            ? self.config.conjunction
            : self.l10n.rangeSeparator);
    }
    function updateValue(triggerChange) {
        if (triggerChange === void 0) { triggerChange = true; }
        if (self.mobileInput !== undefined && self.mobileFormatStr) {
            self.mobileInput.value =
                self.latestSelectedDateObj !== undefined
                    ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr)
                    : "";
        }
        self.input.value = getDateStr(self.config.dateFormat);
        if (self.altInput !== undefined) {
            self.altInput.value = getDateStr(self.config.altFormat);
        }
        if (triggerChange !== false)
            triggerEvent("onValueUpdate");
    }
    function onMonthNavClick(e) {
        var eventTarget = getEventTarget(e);
        var isPrevMonth = self.prevMonthNav.contains(eventTarget);
        var isNextMonth = self.nextMonthNav.contains(eventTarget);
        if (isPrevMonth || isNextMonth) {
            changeMonth(isPrevMonth ? -1 : 1);
        }
        else if (self.yearElements.indexOf(eventTarget) >= 0) {
            eventTarget.select();
        }
        else if (eventTarget.classList.contains("arrowUp")) {
            self.changeYear(self.currentYear + 1);
        }
        else if (eventTarget.classList.contains("arrowDown")) {
            self.changeYear(self.currentYear - 1);
        }
    }
    function timeWrapper(e) {
        e.preventDefault();
        var isKeyDown = e.type === "keydown", eventTarget = getEventTarget(e), input = eventTarget;
        if (self.amPM !== undefined && eventTarget === self.amPM) {
            self.amPM.textContent =
                self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
        }
        var min = parseFloat(input.getAttribute("min")), max = parseFloat(input.getAttribute("max")), step = parseFloat(input.getAttribute("step")), curValue = parseInt(input.value, 10), delta = e.delta ||
            (isKeyDown ? (e.which === 38 ? 1 : -1) : 0);
        var newValue = curValue + step * delta;
        if (typeof input.value !== "undefined" && input.value.length === 2) {
            var isHourElem = input === self.hourElement, isMinuteElem = input === self.minuteElement;
            if (newValue < min) {
                newValue =
                    max +
                        newValue +
                        int(!isHourElem) +
                        (int(isHourElem) && int(!self.amPM));
                if (isMinuteElem)
                    incrementNumInput(undefined, -1, self.hourElement);
            }
            else if (newValue > max) {
                newValue =
                    input === self.hourElement ? newValue - max - int(!self.amPM) : min;
                if (isMinuteElem)
                    incrementNumInput(undefined, 1, self.hourElement);
            }
            if (self.amPM &&
                isHourElem &&
                (step === 1
                    ? newValue + curValue === 23
                    : Math.abs(newValue - curValue) > step)) {
                self.amPM.textContent =
                    self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
            }
            input.value = pad(newValue);
        }
    }
    init();
    return self;
}
function _flatpickr(nodeList, config) {
    var nodes = Array.prototype.slice
        .call(nodeList)
        .filter(function (x) { return x instanceof HTMLElement; });
    var instances = [];
    for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        try {
            if (node.getAttribute("data-fp-omit") !== null)
                continue;
            if (node._flatpickr !== undefined) {
                node._flatpickr.destroy();
                node._flatpickr = undefined;
            }
            node._flatpickr = FlatpickrInstance(node, config || {});
            instances.push(node._flatpickr);
        }
        catch (e) {
            console.error(e);
        }
    }
    return instances.length === 1 ? instances[0] : instances;
}
if (typeof HTMLElement !== "undefined" &&
    typeof HTMLCollection !== "undefined" &&
    typeof NodeList !== "undefined") {
    HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function (config) {
        return _flatpickr(this, config);
    };
    HTMLElement.prototype.flatpickr = function (config) {
        return _flatpickr([this], config);
    };
}
var flatpickr = function (selector, config) {
    if (typeof selector === "string") {
        return _flatpickr(window.document.querySelectorAll(selector), config);
    }
    else if (selector instanceof Node) {
        return _flatpickr([selector], config);
    }
    else {
        return _flatpickr(selector, config);
    }
};
flatpickr.defaultConfig = {};
flatpickr.l10ns = {
    en: __assign({}, english),
    default: __assign({}, english),
};
flatpickr.localize = function (l10n) {
    flatpickr.l10ns.default = __assign(__assign({}, flatpickr.l10ns.default), l10n);
};
flatpickr.setDefaults = function (config) {
    flatpickr.defaultConfig = __assign(__assign({}, flatpickr.defaultConfig), config);
};
flatpickr.parseDate = createDateParser({});
flatpickr.formatDate = createDateFormatter({});
flatpickr.compareDates = compareDates;
if (typeof jQuery !== "undefined" && typeof jQuery.fn !== "undefined") {
    jQuery.fn.flatpickr = function (config) {
        return _flatpickr(this, config);
    };
}
Date.prototype.fp_incr = function (days) {
    return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === "string" ? parseInt(days, 10) : days));
};
if (typeof window !== "undefined") {
    window.flatpickr = flatpickr;
}

var DatepickerWrapper = {
  name: 'DatepickerWrapper',
  emits: ['change'],
  props: {
    value: {
      required: true
    },
    options: {
      type: [Object],
      required: true
    },
    id: {
      type: [Number, String],
      required: true
    },
    placeholder: {
      type: [Number, String],
      required: false
    },
    attrs: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    autocomplete: {
      required: false,
      type: [String, Number],
      default: null
    }
  },
  setup(props, context) {
    var {
      id,
      options,
      value
    } = toRefs(props);

    // ============ DEPENDENCIES ============

    var {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme
    } = base$16(props, context);
    var moment = form$.value.$vueform.services.moment;
    var $this = getCurrentInstance().proxy;

    // ================ DATA ================

    /**
     * The [flatpickr instance](https://flatpickr.js.org/instance-methods-properties-elements).
     * 
     * @type {object}
     * @default null
     */
    var datepicker$ = ref(null);

    /**
     * The date input DOM element.
     * 
     * @type {HTMLElement}
     */
    var input = ref(null);

    // ============== COMPUTED ==============

    /**
     * Whether the element containing the datepicker is available.
     * 
     * @type {boolean}
     * @private
     */
    var available = computed(() => {
      return el$.value.available;
    });

    /**
     * The current locale object for flatpickr.
     * 
     * @type {object}
     * @private
     */
    var locale = computed(() => {
      var _$this$$vueform$i18n$, _$this$$vueform$i18n$2;
      return ((_$this$$vueform$i18n$ = $this.$vueform.i18n.locales[form$.value.locale$]) === null || _$this$$vueform$i18n$ === void 0 || (_$this$$vueform$i18n$ = _$this$$vueform$i18n$.vueform) === null || _$this$$vueform$i18n$ === void 0 ? void 0 : _$this$$vueform$i18n$.datepicker) || ((_$this$$vueform$i18n$2 = $this.$vueform.i18n.locales[$this.$vueform.i18n.fallbackLocale]) === null || _$this$$vueform$i18n$2 === void 0 || (_$this$$vueform$i18n$2 = _$this$$vueform$i18n$2.vueform) === null || _$this$$vueform$i18n$2 === void 0 ? void 0 : _$this$$vueform$i18n$2.datepicker) || {};
    });

    /**
     * The current `options.mode`.
     * 
     * @type {string}
     */
    var mode = computed(() => {
      return options.value.mode || 'single';
    });

    /**
     * The flatpickr configuration object. Can be extended via [`options`](#options) with [flatpickr options](https://flatpickr.js.org/options/).
     * 
     * @type {object}
     */
    var config = computed(() => {
      var config = {};
      each(options.value, (val, option) => {
        if (val !== null && val !== undefined) {
          config[option] = val;
        }
      });

      // Append the form to main form instead of end of the body
      // Update: Experimental removal, because enter was disabled
      // when appended to form config.appendTo = this.form$.$refs.form$

      // according to:
      // https://github.com/flatpickr/flatpickr/issues/1019
      config.static = true;
      return config;
    });

    // =============== METHODS ==============

    /**
     * Emits `change` event.
     * 
     * @param {array|Date} value* the value to emit with change
     * @returns {void}
     * @private
     */
    var update = val => {
      context.emit('change', mode.value == 'single' ? val[0] || null : val);
    };

    /**
     * Sets's the datepicker input parent's `id` attribute.
     * 
     * @returns {void}
     * @private
     */
    var setDatepickerId = () => {
      datepicker$.value.input.parentElement.id = 'datepicker-' + id.value;
    };

    /**
     * Initalizes the flatpickr.
     * 
     * @returns {Promise}
     * @private
     */
    var init = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(function* () {
        if (!input.value) {
          yield nextTick();
        }
        datepicker$.value = flatpickr(input.value, Object.assign({}, config.value, {
          onChange: val => {
            update(val);
          },
          onClose: val => {
            val = mode.value == 'range' && val.length < 2 ? [] : val;
            update(val);
          },
          // creating a date object from a string date provided in displayFormat (to value)
          parseDate: (dateStr, format) => {
            return moment(dateStr, format, true).toDate();
          },
          // creating a date string according to displayFormat (to display)
          formatDate: (date, format) => {
            return moment(date).format(format);
          },
          ariaDateFormat: 'MMMM D, YYYY',
          disableMobile: true,
          locale: locale.value
        }));
        if (datepicker$.value.calendarContainer) {
          classes.value.calendarContainer.forEach(c => {
            datepicker$.value.calendarContainer.classList.add(c);
          });
        }
        setDatepickerId();
        if (value.value !== null) {
          datepicker$.value.setDate(value.value, false);
        }
      });
      return function init() {
        return _ref.apply(this, arguments);
      };
    }();

    // ============== WATCHERS ==============

    watch(value, (n, o) => {
      var _datepicker$$value;
      (_datepicker$$value = datepicker$.value) === null || _datepicker$$value === void 0 || _datepicker$$value.setDate(n, false);
    });
    watch(id, (n, o) => {
      setDatepickerId();
    }, {
      immediate: false
    });
    watch(options, (n, o) => {
      if (isEqual_1(n, o)) {
        return;
      }
      init();
    }, {
      deep: true
    });
    watch([locale, available], (n, o) => {
      init();
    }, {
      deep: true
    });

    // ================ HOOKS ===============

    onMounted(() => {
      init();
    });

    // // Required because if static == true the picker does
    // // not close properly when clicking outside of it.
    // document.addEventListener('click', () => {
    //   if(clickedOutsideElement('datepicker-' + this.id)) {
    //     if (this.datepicker$.isOpen) {
    //       this.datepicker$.close()
    //     }
    //   }
    // })

    return {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      theme,
      classes,
      Templates,
      template,
      datepicker$,
      input,
      config,
      mode,
      locale,
      update,
      init
    };
  }
};

var EditorWrapper = {
  name: 'EditorWrapper',
  emits: ['input', 'alert', 'error', 'blur'],
  props: {
    value: {
      required: false,
      default: null
    },
    placeholder: {
      required: false,
      type: [String, Number],
      default: null
    },
    name: {
      required: false,
      type: [String, Number],
      default: null
    },
    id: {
      required: false,
      type: [String, Number],
      default: null
    },
    accept: {
      required: false,
      type: Array,
      default: () => []
    },
    acceptMimes: {
      required: false,
      type: Array,
      default: () => []
    },
    endpoint: {
      required: false,
      type: [String, Function, Promise],
      default: null
    },
    method: {
      required: false,
      type: String,
      default: 'post'
    },
    disabled: {
      required: false,
      type: Boolean,
      default: false
    },
    hideTools: {
      required: false,
      type: [Array],
      default: () => []
    },
    attrs: {
      required: false,
      type: [Object],
      default: () => ({})
    }
  },
  setup(props, context) {
    var {
      value,
      disabled,
      acceptMimes,
      accept,
      endpoint,
      method,
      attrs,
      placeholder,
      id
    } = toRefs(props);

    // ============ DEPENDENCIES ============

    var {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme
    } = base$16(props, context);

    // ================ DATA ================

    /**
     * The [`Trix`](https://github.com/basecamp/trix) instance.
     * 
     * @type {HTMLElement}
     * @default null
     * @private
     */
    var trix$ = ref(null);

    // ============== COMPUTED ==============

    /**
     * The [`Trix`](https://github.com/basecamp/trix) instance.
     * 
     * @type {HTMLElement}
     * @default null
     */
    var editor$ = computed(() => {
      return trix$.value.$el || trix$.value;
    });
    var resolvedEndpoint = computed(() => {
      if (endpoint.value) {
        return typeof endpoint.value === 'function' ? endpoint.value : form$.value.$vueform.config.endpoints[endpoint.value] || endpoint.value;
      }
      return typeof form$.value.$vueform.config.endpoints.attachment === 'function' ? form$.value.$vueform.config.endpoints.attachment : form$.value.$vueform.config.endpoints.attachment.url;
    });
    var resolvedMethod = computed(() => {
      if (typeof resolvedEndpoint.value === 'function') {
        return null;
      }
      if (endpoint.value && form$.value.$vueform.config.endpoints[endpoint.value]) {
        return form$.value.$vueform.config.endpoints[endpoint.value];
      }
      return method.value || form$.value.$vueform.config.endpoints.attachment.method;
    });
    var options = computed(() => {
      return _objectSpread2$1(_objectSpread2$1({}, attrs.value), {}, {
        placeholder: placeholder.value,
        disabled: disabled.value,
        contentEditable: !disabled.value,
        id: id.value,
        input: "editor-input-".concat(id.value)
      });
    });

    // =============== METHODS ==============

    /**
     * Updates the value of editor.
     * 
     * @param {string} value* the value to update with
     * @returns {void}
     */
    var update = val => {
      if (typeof val == 'number') {
        val = String(val);
      }
      if (val === null || val === undefined) {
        val = '';
      }
      if (editor$.value.editor) {
        editor$.value.editor.loadHTML(val);
      } else {
        setTimeout(() => {
          var _editor$$value$editor;
          (_editor$$value$editor = editor$.value.editor) === null || _editor$$value$editor === void 0 || _editor$$value$editor.loadHTML(val);
        }, 0);
      }
    };

    /**
     * Sets an option for editor.
     * 
     * @param {string} key* the option key
     * @param {string} value* the option value
     * @returns {void}
     */
    var setOption = (key, val) => {
      editor$.value[key] = val;
    };

    /**
     * Handles `change` event.
     * 
     * @returns {void}
     * @private
     */
    var handleChange = () => {
      // If the change is only triggered because of `update`
      // method (which implies an external call) we should
      // not emit any events because that would duplicate the
      // effects of the value change.
      if (editor$.value.value == value.value || !editor$.value.value && !value.value) {
        return;
      }
      context.emit('input', {
        target: {
          value: editor$.value.value
        }
      });
    };

    /**
     * Handles `fileAccept` event.
     * 
     * @param {Event} e* event
     * @returns {void}
     * @private
     */
    var handleFileAccept = e => {
      if (disabled.value) {
        e.preventDefault();
        return;
      }
      if (!e.file) {
        e.preventDefault();
        return;
      }
      if (acceptMimes.value && acceptMimes.value.length && acceptMimes.value.indexOf(e.file.type) === -1) {
        e.preventDefault();
        context.emit('alert', form$.value.__(form$.value.translations.vueform.editor.acceptedMimesError, {
          mimes: acceptMimes.value.join(', ')
        }));
      }
      var extension = e.file.name.split('.').pop();
      if (accept.value && accept.value.length && accept.value.indexOf(extension) === -1) {
        e.preventDefault();
        context.emit('alert', form$.value.__(form$.value.translations.vueform.editor.acceptedExtensionsError, {
          extensions: accept.value.join(', ')
        }));
      }
    };

    /**
     * Handles `attachmentAdd` event.
     * 
     * @param {Event} e* event
     * @returns {Promise}
     * @private
     */
    var handleAttachmentAdd = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(function* (e) {
        if (!e.attachment.file) {
          return;
        }
        var data = new FormData();
        data.append('Content-Type', e.attachment.file.type);
        data.append('file', e.attachment.file);
        var response;
        try {
          if (typeof resolvedEndpoint.value === 'function') {
            response = yield resolvedEndpoint.value(e.attachment, el$.value);
          } else {
            response = yield el$.value.$vueform.services.axios.request({
              url: resolvedEndpoint.value,
              method: resolvedMethod.value,
              [resolvedMethod.value.toLowerCase() === 'get' ? 'params' : 'data']: data,
              onUploadProgress: progress => {
                e.attachment.setUploadProgress(Math.round(progress.loaded * 100 / progress.total));
              }
            });
            response = response.data;
          }
          e.attachment.setAttributes({
            url: response.url,
            href: response.href
          });
        } catch (error) {
          context.emit('error', error);
        }
      });
      return function handleAttachmentAdd(_x) {
        return _ref.apply(this, arguments);
      };
    }();

    /**
     * Handles `blur` event.
     * 
     * @returns {void}
     * @private
     */
    var handleBlur = () => {
      context.emit('blur');
    };

    // ============== WATCHERS ==============

    watch(disabled, val => {
      editor$.value.contentEditable = !val;
    });
    return {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      resolvedEndpoint,
      options,
      theme,
      classes,
      Templates,
      template,
      trix$,
      editor$,
      update,
      setOption,
      handleChange,
      handleFileAccept,
      handleAttachmentAdd,
      handleBlur
    };
  }
};

var base$15 = function base(props, context, dependencies) {
  var {
    label
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var el$ = dependencies.el$;

  // =============== INJECT ===============

  var config$ = inject('config$');

  // ============== COMPUTED ==============

  /**
   * Whether the element has a [`label`](#option-label) option, a [#label](#slot-label) slot or `Vueform` component's [`forceLabels`](vueform#option-force-labels) option is `true`.
   *
   * @type {boolean}
   *
   */
  var hasLabel = computed(() => {
    var _el$$value$$slots, _el$$value$$scopedSlo;
    return !!(form$.value.options.forceLabels || label.value || el$.value.slots.label || (_el$$value$$slots = el$.value.$slots) !== null && _el$$value$$slots !== void 0 && _el$$value$$slots.label || (/* istanbul ignore next: vue2 */form$.value.$vueform.vueVersion === 2 && (_el$$value$$scopedSlo = el$.value.$scopedSlots) !== null && _el$$value$$scopedSlo !== void 0 && _el$$value$$scopedSlo.label));
  });

  /**
   * Whether the label is provided as a function.
   *
   * @type {boolean}
   * @private
   */
  var isLabelFunction = computed(() => {
    return typeof label.value === 'function' && (!label.value.prototype || !label.value.prototype.constructor || label.value.prototype.constructor && label.value.prototype.constructor.name !== 'VueComponent');
  });

  /**
   * Whether label is provided as a Vue component.
   *
   * @type {boolean}
   * @private
   */
  var isLabelComponent = computed(() => {
    return isVueComponent(label.value);
  });

  /**
   * The localized label of the element.
   *
   * @type {string|Component}
   * @private
   */
  var Label = computed(() => {
    var Label = isLabelFunction.value ? label.value(el$.value) : label.value || null;

    /* istanbul ignore else */
    if (!isLabelComponent.value) {
      Label = localize(Label, config$.value, form$.value);
    }
    return form$.value.$vueform.sanitize(Label);
  });
  return {
    hasLabel,
    Label
  };
};

var base$14 = function base(props, context, dependencies) {
  var {
    columns,
    presets
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var theme = dependencies.theme;
  var hasLabel = dependencies.hasLabel;

  // ================ DATA ================

  var Columns = ref(cloneDeep_1(columns.value));

  // ============== COMPUTED ==============

  /**
   * The classes service instance.
   *
   * @type {Columns}
   * @private
   */
  var columnsClassesService = computed(() => {
    var config = form$.value.$vueform.config;
    return new form$.value.$vueform.services.columns({
      configPresetColumns: config.usePresets,
      configColumns: config.columns,
      formPresetColumns: form$.value.options.presets,
      formColumns: form$.value.options.columns,
      elementPresetColumns: presets.value,
      elementColumns: Columns.value
    }, hasLabel.value, theme.value.columns, config.presets);
  });

  /**
   * Calculated column sizes and classes for the element.
   *
   * @type {object}
   * @private
   */
  var columnsClasses = computed(() => {
    return columnsClassesService.value.classes;
  });

  /**
   * The `cols` property of the Columns service instance.
   *
   * @type {object}
   * @private
   */
  var computedCols = computed(() => {
    return columnsClassesService.value.cols;
  });

  // =============== METHODS ==============

  /**
   * Update columns programmatically.
   *
   * @param {number|array} value* the new value for columns option
   * @returns {void}
   * @private
   */
  var updateColumns = v => {
    Columns.value = cloneDeep_1(v);
  };
  watch(columns, v => {
    Columns.value = cloneDeep_1(v);
  }, {
    immediate: false,
    deep: true
  });
  return {
    computedCols,
    columnsClassesService,
    columnsClasses,
    updateColumns
  };
};

var base$13 = function base(props, context, dependencies) {
  var {
    size,
    view,
    views,
    presets
  } = toRefs(props);
  var componentName = context.name;

  // ============ DEPENDENCIES ============

  var available = dependencies.available;
  var active = dependencies.active;
  var form$ = dependencies.form$;
  var parent = dependencies.parent;

  // ================ DATA ================

  /**
   * Whether the element was hidden programmatically with [`show()`](#method-show) or [`hide()`](#method-hide) methods.
   *
   * @type {boolean}
   * @default false
   */
  var hidden = ref(false);

  // ============== COMPUTED ==============

  /**
   * Whether the element is visible. It's `false` when `available` or `active` is `false` or `hidden` is `true`.
   *
   * @type {boolean}
   */
  var visible = computed(() => {
    return available.value && !hidden.value && active.value;
  });

  /**
   * The resolved size of the element and all of its child components.
   *
   * @type {string}
   */
  var Size = computed(() => {
    var Size;
    if (size.value) {
      Size = size.value;
    } else {
      each(presets.value, presetName => {
        var preset = form$.value.$vueform.config.presets[presetName];
        if (!preset || !preset.size) {
          return;
        }
        Size = preset.size;
      });
    }
    if (!Size) {
      if (parent.value) {
        Size = parent.value.Size;
      } else {
        Size = form$.value.Size;
      }
    }
    return Size;
  });

  /**
   * The name of the resolved view for the component and the default view for its child components. Child component views can be overridden with [`views`](#option-views) option. This one should be used to determine the component's view in class functions.
   *
   * @type {string}
   */
  var View = computed(() => {
    if (view.value) {
      return view.value;
    }
    return Views.value[componentName.value];
  });

  /**
   * The name of the views for the components.
   *
   * @type {object}
   * @private
   */
  var Views = computed(() => {
    var Views = form$.value.Views;
    each(presets.value, presetName => {
      var preset = form$.value.$vueform.config.presets[presetName];
      if (!preset || !preset.views) {
        return;
      }
      Views = Object.assign({}, Views, preset.views);
    });
    Views = Object.assign({}, Views, views.value);
    return Views;
  });

  // =============== METHODS ==============

  /**
   * Hides the element.
   *
   * @returns {void}
   */
  var hide = () => {
    hidden.value = true;
  };

  /**
   * Shows the element if it was hidden with [`hide()`](#method-hide) method.
   *
   * @returns {void}
   */
  var show = () => {
    hidden.value = false;
  };

  // ============== PROVIDES ==============

  provide('Size', Size);
  provide('View', View);
  provide('Views', Views);
  return {
    hidden,
    visible,
    Size,
    View,
    Views,
    hide,
    show
  };
};
var captcha$1 = function captcha(props, context, dependencies) {
  var {
    hidden,
    visible: baseVisible,
    Size,
    View,
    Views,
    hide,
    show
  } = base$13(props, context, dependencies);

  // ============ DEPENDENCIES =============

  var {
    shouldVerify
  } = dependencies;

  // =============== METHODS ===============

  var visible = computed(() => {
    return baseVisible.value && shouldVerify.value;
  });
  return {
    hidden,
    visible,
    Size,
    View,
    Views,
    hide,
    show
  };
};

var base$12 = function base(props, context, dependencies) {
  var {
    templates,
    presets
  } = toRefs(props);
  var componentName = context.name;

  // ============ DEPENDENCIES ============

  var theme = dependencies.theme;
  var View = dependencies.View;
  var form$ = dependencies.form$;

  // ============== COMPUTED ==============

  /**
   * The list of templates available to the element.
   *
   * @type {object}
   * @private
   */
  var Templates = computed(() => {
    var presetTemplates = {};
    each(presets ? presets.value : [], presetName => {
      var preset = form$.value.$vueform.config.presets[presetName];
      if (!preset || !preset.templates) {
        return;
      }
      presetTemplates = Object.assign({}, presetTemplates, preset.templates);
    });
    return _objectSpread2$1(_objectSpread2$1(_objectSpread2$1({}, theme.value.templates), presetTemplates), templates ? templates.value : {});
  });

  /**
   * The component's template.
   *
   * @type {object}
   */
  var template = computed(() => {
    return View && View.value && Templates.value["".concat(componentName.value, "_").concat(View.value)] ? Templates.value["".concat(componentName.value, "_").concat(View.value)] : Templates.value[componentName.value];
  });
  return {
    Templates,
    template
  };
};

var base$11 = function base(props, context, dependencies) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  toRefs(props);

  // ============ DEPENDENCIES ============

  var el$ = dependencies.el$;

  // =============== OPTIONS ==============

  var defaultElementSlots = ['label', 'info', 'required', 'description', 'before', 'between', 'after'];
  var defaultFieldSlots = ['checkbox', 'radio', 'option', 'single-label', 'multiple-label', 'tag', 'no-results', 'no-options', 'after-list', 'before-list', 'placeholder', 'group-label', 'caret', 'clear', 'spinner', 'option', 'default', 'addon-before', 'addon-after'];

  // ============== COMPUTED ==============

  /**
   * Slots of the element.
   *
   * @type {object}
   * @private
   */
  var elementSlots = computed(() => {
    var elementSlots = {};
    defaultElementSlots.filter(s => options.slots.indexOf(s) !== -1).forEach(s => {
      var slot = el$.value.slots[s] || el$.value.slots[camelCase_1(s)];
      if (typeof slot === 'object') {
        if (slot.props && (Array.isArray(slot.props) && slot.props.indexOf('el$') === -1 || !Array.isArray(slot.props) && Object.keys(slot.props).indexOf('el$') === -1)) {
          if (Array.isArray(slot.props)) {
            slot.props.push('el$');
          } else {
            slot.props.el$ = {
              type: Object,
              required: true
            };
          }
        } else if (!slot.props) {
          slot.props = ['el$'];
        }
      }
      elementSlots[s] = slot;
    });
    return elementSlots;
  });

  /**
   * Slots related to the element's field. E.g. an "elementSlot" is something related to the element, like `label`, `description`, etc. A "fieldSlot" is something that related to the field within the element, e.g. `option` or `single-label` for `SelectElement`.
   *
   * @type {object}
   * @private
   */
  var fieldSlots = computed(() => {
    var fieldSlots = {};
    defaultFieldSlots.filter(s => options.slots.indexOf(s) !== -1).forEach(s => {
      var slot = el$.value.slots[s] || el$.value.slots[camelCase_1(s)];

      // Add `el$` prop to `default` slot
      if (typeof slot === 'object') {
        if (slot.props && (Array.isArray(slot.props) && slot.props.indexOf('el$') === -1 || !Array.isArray(slot.props) && Object.keys(slot.props).indexOf('el$') === -1)) {
          if (Array.isArray(slot.props)) {
            slot.props.push('el$');
          } else {
            slot.props.el$ = {
              type: Object,
              required: true
            };
          }
        } else if (!slot.props) {
          slot.props = ['el$'];
        }
      }
      fieldSlots[s] = slot;
    });
    return fieldSlots;
  });
  return {
    elementSlots,
    fieldSlots
  };
};

var base$10 = function base(props, context, dependencies) {
  var {
    buttonLabel,
    buttonType,
    href,
    target,
    loading,
    onClick,
    resets,
    submits
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var isDisabled = dependencies.isDisabled;
  var fieldId = dependencies.fieldId;
  var fire = dependencies.fire;
  var el$ = dependencies.el$;

  // =============== INJECT ===============

  var config$ = inject('config$');

  // ============== COMPUTED ==============

  /**
   * Whether the button is in loading state.
   *
   * @type {boolean}
   */
  var isLoading = computed(() => {
    if (typeof loading.value === 'function') {
      return loading.value(form$.value, el$.value);
    }
    if (submits.value && (form$.value.submitting || form$.value.preparing || form$.value.isLoading)) {
      return true;
    }
    return loading.value;
  });

  /**
   * Whether the button's label is a component.
   *
   * @type {boolean}
   * @private
   */
  var isButtonLabelComponent = computed(() => {
    return isVueComponent(buttonLabel.value);
  });

  /**
   * Attributes of the button.
   *
   * @type {object}
   * @private
   */
  var button = computed(() => {
    var button = {
      id: fieldId.value
    };
    switch (buttonType.value) {
      case 'anchor':
        button.href = href.value;
        button.target = target.value;
        break;
      case 'button':
        button.disabled = isDisabled.value;
        break;
    }
    if (isLoading.value) {
      button.tabindex = undefined;
    }
    return button;
  });
  var resolvedButtonLabel = computed(() => {
    return localize(form$.value.$vueform.sanitize(typeof buttonLabel.value === 'function' ? buttonLabel.value(el$.value) : buttonLabel.value), config$.value, form$.value);
  });

  // =============== METHODS ==============

  /**
   * Handles the button's click event.
   *
   * @param {Event} e* event object event
   * @returns {void}
   * @private
   */
  var handleClick = e => {
    if (buttonType.value === 'anchor' && !href.value) {
      e.preventDefault();
    }
    if (isDisabled.value || isLoading.value) {
      e.preventDefault();
      return;
    }
    if (resets.value) {
      form$.value.reset();
    }
    if (submits.value) {
      form$.value.submit();
    }
    fire('click', form$.value, el$.value, e);
  };
  return {
    isButtonLabelComponent,
    button,
    resolvedButtonLabel,
    isLoading,
    handleClick
  };
};

var base$$ = function base(props, context, dependencies) {
  var {
    layout,
    inline
  } = toRefs(props);

  // ============== COMPUTED ==============

  /**
   * The current layout of the element.
   *
   * @type {string|Component}
   * @private
   */
  var elementLayout = computed(() => {
    return inline.value || !layout.value ? 'ElementLayoutInline' : layout.value;
  });
  return {
    elementLayout
  };
};

var base$_ = function base(props, context, dependencies) {
  var {
    id,
    name
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var parent = dependencies.parent;

  // ============== COMPUTED ==============

  /**
   * The `id` of the <%field%>. If [`id`](#option-id) is not provided [`path`](#option-path) will be used.
   *
   * @type {string}
   */
  var fieldId = computed(() => {
    var _parent$value, _parent$value2;
    return id.value || ((_parent$value = parent.value) !== null && _parent$value !== void 0 && _parent$value.fieldId ? "".concat((_parent$value2 = parent.value) === null || _parent$value2 === void 0 ? void 0 : _parent$value2.fieldId, ".").concat(name.value) : name.value);
  });
  return {
    fieldId
  };
};

var base$Z = function base(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var {
    container
  } = dependencies;

  // =============== METHOD ===============

  /**
   * Focuses the first focusable part of the element.
   *
   * @returns {void}
   * @private
   */
  var focus = () => {
    var _container$value, _el$querySelector;
    var el = ((_container$value = container.value) === null || _container$value === void 0 ? void 0 : _container$value.$el) || container.value;
    el === null || el === void 0 || (_el$querySelector = el.querySelector('a[href],area[href],input:not([disabled]),select:not([disabled]),textarea:not([disabled]),' + 'button:not([disabled]),iframe,[tabindex],[contentEditable=true],trix-editor')) === null || _el$querySelector === void 0 || _el$querySelector.focus();
  };
  return {
    focus
  };
};
var editor$1 = function editor(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var {
    input
  } = dependencies;

  // =============== METHOD ===============

  var focus = () => {
    input.value.editor$.focus();
  };
  return {
    focus
  };
};

var base$Y = function base(props, context, dependencies) {
  var currentInstance = getCurrentInstance();

  // ============== COMPUTED ==============

  /**
   * The element's component.
   *
   * @type {VueformElement}
   */
  var el$ = computed(() => {
    return currentInstance.proxy;
  });

  // ============== PROVIDES ==============

  /**
   * The element's component.
   *
   * @type {VueformElement}
   */
  provide('el$', el$);
  return {
    el$
  };
};

var baseClone = _baseClone;

/** Used to compose bitmasks for cloning. */
var CLONE_SYMBOLS_FLAG = 4;

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone$1(value) {
  return baseClone(value, CLONE_SYMBOLS_FLAG);
}

var clone_1 = clone$1;

var base$X = function base(props, context, dependencies) {
  var {
    disabled
  } = toRefs(props);
  var {
    el$,
    form$,
    path
  } = dependencies;

  // ================ DATA ================

  /**
   * Helper to store whether the element is disabled via api (with .disable()).
   *
   * @type {boolean|null}
   * @default null
   * @private
   */
  var localDisabled = ref(null);

  // ============== COMPUTED ==============

  /**
   * Whether the element is disabled.
   *
   * @type {boolean}
   */
  var isDisabled = computed(() => {
    if (localDisabled.value === true) {
      return true;
    }
    if (localDisabled.value === false) {
      return false;
    }
    if (typeof disabled.value === 'function') {
      return disabled.value(el$.value, form$.value);
    }
    if (Array.isArray(disabled.value)) {
      return disabled.value.every(condition => {
        return form$.value.$vueform.services.condition.check(condition, path.value, form$.value, el$.value);
      });
    }
    if (typeof disabled.value === 'object' && disabled.value && disabled.value.value !== undefined) {
      return disabled.value.value;
    }
    return disabled.value;
  });

  // =============== METHODS ==============

  /**
   * Disables the element.
   *
   * @returns {void}
   */
  var disable = () => {
    localDisabled.value = true;
  };

  /**
   * Enables the element even if it is disabled by [`disabled`](#disabled) option.
   *
   * @returns {void}
   */
  var enable = () => {
    localDisabled.value = false;
  };
  return {
    localDisabled,
    isDisabled,
    disable,
    enable
  };
};
var checkboxgroup$3 = function checkboxgroup(props, context, dependencies) {
  var {
    disables
  } = toRefs(props);
  var {
    localDisabled,
    isDisabled
  } = base$X(props, context, dependencies);

  // ================ DATA ================

  /**
   * List of option keys to be disabled.
   *
   * @type {array}
   * @default []
   * @private
   */
  var disabledItems = ref([]);

  // =============== METHODS ==============

  /**
   * Disables one item or more items.
   *
   * @param {array|string|number} values* value(s) to disable
   * @returns {void}
   */
  var disable = values => {
    if (!isArray_1(values)) {
      values = [values];
    }
    var disablesList = clone_1(disabledItems.value);
    each(values, item => {
      item = String(item);

      /* istanbul ignore else */
      if (disablesList.indexOf(item) === -1) {
        disablesList.push(item);
      }
    });
    disabledItems.value = disablesList;
  };

  /**
   * Disables one item or more disabled items.
   *
   * @param {array|string|number} values* value(s) to enable
   * @returns {void}
   */
  var enable = values => {
    if (!isArray_1(values)) {
      values = [values];
    }
    var disablesList = clone_1(disabledItems.value);
    each(values, item => {
      item = String(item);
      var index = disablesList.indexOf(item);

      /* istanbul ignore else */
      if (index !== -1) {
        disablesList.splice(index, 1);
      }
    });
    disabledItems.value = disablesList;
  };

  /**
   * Disables all items.
   *
   * @returns {void}
   */
  var disableAll = () => {
    localDisabled.value = true;
  };

  /**
   * Enables all items.
   *
   * @returns {void}
   */
  var enableAll = () => {
    localDisabled.value = false;
    disabledItems.value = [];
  };

  // ================ HOOKS ===============

  disabledItems.value = map_1(disables.value || /* istanbul ignore next: can't fall into this, because it is hardwired to be `[]` if undefined */[], d => {
    return String(d);
  });
  return {
    disabledItems,
    isDisabled,
    disableAll,
    enableAll,
    disable,
    enable
  };
};
var button$1 = function button(props, context, dependencies) {
  var {
    disabled,
    submits
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var el$ = dependencies.el$;

  // ============== COMPUTED ==============

  /**
   * Whether the button is disabled.
   *
   * @type {boolean}
   */
  var isDisabled = computed(() => {
    if (typeof disabled.value === 'function') {
      return disabled.value(el$.value, form$.value);
    }
    if (submits.value && (form$.value.invalid && form$.value.shouldValidateOnChange || form$.value.busy || form$.value.isDisabled)) {
      return true;
    }
    return disabled.value;
  });
  return {
    isDisabled
  };
};
var radiogroup$2 = checkboxgroup$3;

var base$W = function base(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var fieldId = dependencies.fieldId;
  var invalid = dependencies.invalid;
  var isDisabled = dependencies.isDisabled;
  var busy = dependencies.busy;

  // ============== COMPUTED ==============

  /**
   * The `id` of the related label component.
   *
   * @type {string}
   * @private
   */
  var labelId = computed(() => {
    return "".concat(fieldId.value, "__label");
  });

  /**
   * The `id` of the related description component.
   *
   * @type {string}
   * @private
   */
  var descriptionId = computed(() => {
    return "".concat(fieldId.value, "__description");
  });

  /**
   * The `id` of the related description component.
   *
   * @type {string}
   * @private
   */
  var infoId = computed(() => {
    return "".concat(fieldId.value, "__info");
  });

  /**
   * The `id` of the related error component.
   *
   * @type {string}
   * @private
   */
  var errorId = computed(() => {
    return "".concat(fieldId.value, "__error");
  });

  /**
   * The `aria-*` attributes of the input.
   *
   * @type {object}
   */
  var aria = computed(() => {
    return {
      'aria-labelledby': labelId.value,
      'aria-describedby': "".concat(descriptionId.value, " ").concat(infoId.value),
      'aria-invalid': invalid.value,
      'aria-errormessage': errorId.value,
      'aria-disabled': isDisabled === null || isDisabled === void 0 ? void 0 : isDisabled.value,
      'aria-busy': busy.value
    };
  });
  return {
    descriptionId,
    labelId,
    infoId,
    errorId,
    aria
  };
};
var checkbox$1 = function checkbox(props, context, dependencies) {
  var {
    text
  } = toRefs(props);
  var {
    descriptionId,
    labelId,
    infoId,
    errorId
  } = base$W(props, context, dependencies);

  // ============ DEPENDENCIES ============

  var invalid = dependencies.invalid;
  var isDisabled = dependencies.isDisabled;
  var busy = dependencies.busy;

  // ============== COMPUTED ==============

  var aria = computed(() => {
    var aria = {
      'aria-label': text.value,
      'aria-describedby': "".concat(labelId.value, " ").concat(descriptionId.value, " ").concat(infoId.value),
      'aria-invalid': invalid.value,
      'aria-errormessage': errorId.value,
      'aria-disabled': isDisabled.value,
      'aria-busy': busy.value
    };
    if (!aria['aria-label']) {
      aria['aria-labelledby'] = labelId.value;
    }
    return aria;
  });
  return {
    descriptionId,
    labelId,
    infoId,
    errorId,
    aria
  };
};
var checkboxgroup$2 = function checkboxgroup(props, context, dependencies) {
  var {
    descriptionId,
    labelId,
    infoId,
    errorId
  } = base$W(props, context, dependencies);

  // ============ DEPENDENCIES ============

  var invalid = dependencies.invalid;
  var isDisabled = dependencies.isDisabled;
  var busy = dependencies.busy;

  // ============== COMPUTED ==============

  var aria = computed(() => {
    return {
      'aria-describedby': "".concat(descriptionId.value, " ").concat(infoId.value),
      'aria-invalid': invalid.value,
      'aria-errormessage': errorId.value,
      'aria-disabled': isDisabled.value,
      'aria-busy': busy.value
    };
  });
  return {
    descriptionId,
    labelId,
    infoId,
    errorId,
    aria
  };
};
var button = function button(props, context, dependencies) {
  var {
    descriptionId,
    labelId,
    infoId,
    errorId
  } = base$W(props, context, dependencies);

  // ============ DEPENDENCIES ============

  var isDisabled = dependencies.isDisabled;

  // ============== COMPUTED ==============

  var aria = computed(() => {
    return {
      'aria-labelledby': labelId.value,
      'aria-describedby': "".concat(descriptionId.value, " ").concat(infoId.value),
      'aria-disabled': isDisabled.value
    };
  });
  return {
    descriptionId,
    labelId,
    infoId,
    errorId,
    aria
  };
};
var static_$3 = function static_(props, context, dependencies) {
  var {
    descriptionId,
    labelId,
    infoId,
    errorId
  } = base$W(props, context, dependencies);

  // ============== COMPUTED ==============

  var aria = computed(() => {
    return {
      'aria-labelledby': labelId.value,
      'aria-describedby': "".concat(descriptionId.value, " ").concat(infoId.value)
    };
  });
  return {
    descriptionId,
    labelId,
    infoId,
    errorId,
    aria
  };
};
var phone$2 = function phone(props, context, dependencies) {
  toRefs(props);
  var {
    descriptionId,
    labelId,
    infoId,
    errorId,
    aria
  } = base$W(props, context, dependencies);

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;

  // ============== COMPUTED ==============

  var optionsAria = computed(() => {
    return {
      'aria-label': form$.value.translations.vueform.elements.phone.ariaLabel
    };
  });
  return {
    descriptionId,
    labelId,
    infoId,
    errorId,
    aria,
    optionsAria
  };
};
var radiogroup$1 = checkboxgroup$2;
var radio = checkbox$1;
var toggle$1 = checkbox$1;
var file$4 = checkboxgroup$2;

var createCaseFirst = _createCaseFirst;

/**
 * Converts the first character of `string` to lower case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.lowerFirst('Fred');
 * // => 'fred'
 *
 * _.lowerFirst('FRED');
 * // => 'fRED'
 */
var lowerFirst = createCaseFirst('toLowerCase');

var lowerFirst_1 = lowerFirst;

var base$V = function base(props, context, dependencies) {
  var {
    name
  } = toRefs(props);
  var currentInstance = getCurrentInstance();

  // ============ DEPENDENCIES =============

  var form$ = dependencies.form$;

  // =============== METHODS ==============

  /**
  * Sets the component to the parent as if `refs` were used.
  * 
  * @param {VNode} $parent parent component
  * @param {function} assignToParent the assignToParent function for recursion
  * @returns {void}
  * @private
  */
  var assignToParent = ($parent, assignToParent) => {
    if ($parent.cells$) {
      form$.value.$set($parent.cells$, name.value, currentInstance.proxy);
    }
    if ($parent.children$Array) {
      $parent.children$Array.push(currentInstance.proxy);
    } else if ($parent.elements$) {
      form$.value.$set($parent.elements$, name.value, currentInstance.proxy);
    } else {
      assignToParent($parent.$parent, assignToParent);
    }
  };

  /**
  * Removes the component from the parent.
  * 
  * @param {VNode} $parent parent component
  * @param {function} removeFromParent the removeFromParent function for recursion
  * @private
  */
  var removeFromParent = ($parent, removeFromParent) => {
    if ($parent.cells$) {
      form$.value.$delete($parent.cells$, name.value);
    }
    if ($parent.children$Array) {
      $parent.children$Array.splice($parent.children$Array.map(e$ => normalize(e$.name)).indexOf(normalize(name.value)), 1);
    } else if ($parent.elements$) {
      form$.value.$delete($parent.elements$, name.value);
    } else {
      removeFromParent($parent.$parent, removeFromParent);
    }
  };
  return {
    assignToParent,
    removeFromParent
  };
};

var base$U = function base(props, context, dependencies) {
  var instantHooks = ['onBeforeCreate', 'onCreated'];
  var hooks = {
    onBeforeMount,
    onMounted,
    onBeforeUpdate,
    onUpdated,
    onBeforeUnmount,
    onUnmounted
  };
  var currentInstance = getCurrentInstance();

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var el$ = dependencies.el$;
  var fire = dependencies.fire;
  var {
    assignToParent,
    removeFromParent
  } = base$V(props, context, {
    form$
  });

  // ================= DATA ================

  /**
   * The ref to the outermost DOM of the element.
   *
   * @type {HTMLElement}
   */
  var container = ref(null);

  /**
   * Whether the element has been already mounted.
   *
   * @type {boolean}
   * @default true
   */
  var mounted = ref(false);

  /**
   * Whether the element is hidden internally by core components like tabs or steps. Only intended for reading.
   *
   * @type {boolean}
   * @default true
   * @private
   */
  var active = ref(true);

  // ============== COMPUTED ==============

  /**
   * Whether the element is static (does not have any data or validation).
   *
   * @type {boolean}
   * @private
   */
  var isStatic = computed(() => {
    return false;
  });

  /**
   * Whether the element's value is a file.
   *
   * @type {boolean}
   * @private
   */
  var isFileType = computed(() => {
    return false;
  });

  /**
   * Whether the element's value is an image.
   *
   * @type {boolean}
   * @private
   */
  var isImageType = computed(() => {
    return false;
  });

  /**
   * Whether the element's value is an array.
   *
   * @type {boolean}
   * @private
   */
  var isArrayType = computed(() => {
    return false;
  });

  /**
   * Whether the element is a nested object.
   *
   * @type {boolean}
   * @private
   */
  var isObjectType = computed(() => {
    return false;
  });

  /**
   * Whether the element is a nested group.
   *
   * @type {boolean}
   * @private
   */
  var isGroupType = computed(() => {
    return false;
  });

  /**
   * Whether the element is a list.
   *
   * @type {boolean}
   * @private
   */
  var isListType = computed(() => {
    return false;
  });

  /**
   * Whether the element is a matrix.
   *
   * @type {boolean}
   * @private
   */
  var isMatrixType = computed(() => {
    return false;
  });

  /**
   * Whether the element is a grid.
   *
   * @type {boolean}
   * @private
   */
  var isGridType = computed(() => {
    return false;
  });

  /**
   * Whether the element should be visible when using `tabs` or `steps`.
   *
   * @type {boolean}
   * @private
   */
  var isActive = computed(() => {
    return active.value;
  });

  // ============== METHODS ===============

  /**
   * Sets the `active` property of the element to `true`.
   *
   * @returns {void}
   * @private
   */
  var activate = () => {
    active.value = true;
  };

  /**
   * Sets the `active` property of the element to `false`.
   *
   * @returns {void}
   * @private
   */
  var deactivate = () => {
    active.value = false;
  };

  // ================ HOOKS ===============

  onBeforeMount(() => {
    assignToParent(currentInstance.proxy.$parent, assignToParent);
  });
  onMounted(() => {
    mounted.value = true;
  });
  onBeforeUnmount(() => {
    removeFromParent(currentInstance.proxy.$parent, removeFromParent);
  });
  Object.values(instantHooks).forEach(hook => {
    fire(lowerFirst_1(hook.replace('on', '')), el$.value);
  });
  Object.keys(hooks).forEach(hook => {
    hooks[hook](() => {
      fire(lowerFirst_1(hook.replace('on', '')), el$.value);
    });
  });
  return {
    isStatic,
    isFileType,
    isArrayType,
    isImageType,
    isObjectType,
    isGroupType,
    isListType,
    isMatrixType,
    isGridType,
    isActive,
    active,
    mounted,
    container,
    activate,
    deactivate
  };
};
var list$4 = function list(props, context, dependencies) {
  var {
    isStatic,
    isFileType,
    isImageType,
    isObjectType,
    isGroupType,
    isMatrixType,
    isGridType,
    isActive,
    active,
    mounted,
    container,
    activate,
    deactivate
  } = base$U(props, context, dependencies);

  // ============== COMPUTED ==============

  var isArrayType = computed(() => {
    return true;
  });
  var isListType = computed(() => {
    return true;
  });
  return {
    isStatic,
    isFileType,
    isArrayType,
    isImageType,
    isObjectType,
    isGroupType,
    isMatrixType,
    isGridType,
    isListType,
    isActive,
    active,
    mounted,
    container,
    activate,
    deactivate
  };
};
var checkboxgroup$1 = function checkboxgroup(props, context, dependencies) {
  var {
    isStatic,
    isFileType,
    isImageType,
    isObjectType,
    isGroupType,
    isListType,
    isMatrixType,
    isGridType,
    isActive,
    active,
    mounted,
    container,
    activate,
    deactivate
  } = base$U(props, context, dependencies);

  // ============== COMPUTED ==============

  var isArrayType = computed(() => {
    return true;
  });
  return {
    isStatic,
    isFileType,
    isArrayType,
    isImageType,
    isObjectType,
    isGroupType,
    isMatrixType,
    isGridType,
    isListType,
    isActive,
    active,
    mounted,
    container,
    activate,
    deactivate
  };
};
var object$7 = function object(props, context, dependencies) {
  var {
    isStatic,
    isFileType,
    isArrayType,
    isImageType,
    isGroupType,
    isMatrixType,
    isGridType,
    isListType,
    isActive,
    active,
    mounted,
    container,
    activate,
    deactivate
  } = base$U(props, context, dependencies);

  // ============== COMPUTED ==============

  var isObjectType = computed(() => {
    return true;
  });
  return {
    isStatic,
    isFileType,
    isArrayType,
    isImageType,
    isObjectType,
    isGroupType,
    isMatrixType,
    isGridType,
    isListType,
    isActive,
    active,
    mounted,
    container,
    activate,
    deactivate
  };
};
var group$7 = function group(props, context, dependencies) {
  var {
    isStatic,
    isFileType,
    isArrayType,
    isImageType,
    isObjectType,
    isMatrixType,
    isGridType,
    isListType,
    isActive,
    active,
    mounted,
    container,
    activate,
    deactivate
  } = base$U(props, context, dependencies);

  // ============== COMPUTED ==============

  var isGroupType = computed(() => {
    return true;
  });
  return {
    isStatic,
    isFileType,
    isArrayType,
    isImageType,
    isObjectType,
    isGroupType,
    isMatrixType,
    isGridType,
    isListType,
    isActive,
    active,
    mounted,
    container,
    activate,
    deactivate
  };
};
var matrix$5 = function matrix(props, context, dependencies) {
  var {
    isStatic,
    isFileType,
    isArrayType,
    isImageType,
    isObjectType,
    isGroupType,
    isListType,
    isGridType,
    isActive,
    active,
    mounted,
    container,
    activate,
    deactivate
  } = base$U(props, context, dependencies);

  // ============== COMPUTED ==============

  var isMatrixType = computed(() => {
    return true;
  });
  return {
    isStatic,
    isFileType,
    isArrayType,
    isImageType,
    isObjectType,
    isGroupType,
    isMatrixType,
    isGridType,
    isListType,
    isActive,
    active,
    mounted,
    container,
    activate,
    deactivate
  };
};
var grid$1 = function grid(props, context, dependencies) {
  var {
    isStatic,
    isFileType,
    isArrayType,
    isImageType,
    isObjectType,
    isGroupType,
    isListType,
    isMatrixType,
    isActive,
    active,
    mounted,
    container,
    activate,
    deactivate
  } = base$U(props, context, dependencies);

  // ============== COMPUTED ==============

  var isGridType = computed(() => {
    return true;
  });
  return {
    isStatic,
    isFileType,
    isArrayType,
    isImageType,
    isObjectType,
    isGroupType,
    isMatrixType,
    isGridType,
    isListType,
    isActive,
    active,
    mounted,
    container,
    activate,
    deactivate
  };
};
var file$3 = function file(props, context, dependencies) {
  var {
    view
  } = toRefs(props);
  var {
    isStatic,
    isArrayType,
    isObjectType,
    isGroupType,
    isMatrixType,
    isGridType,
    isListType,
    isActive,
    active,
    mounted,
    container,
    activate,
    deactivate
  } = base$U(props, context, dependencies);

  // ============== COMPUTED ==============

  var isFileType = computed(() => {
    return true;
  });
  var isImageType = computed(() => {
    return ['gallery', 'image'].indexOf(view.value) !== -1;
  });
  return {
    isStatic,
    isFileType,
    isArrayType,
    isImageType,
    isObjectType,
    isGroupType,
    isMatrixType,
    isGridType,
    isListType,
    isActive,
    active,
    mounted,
    container,
    activate,
    deactivate
  };
};
var static_$2 = function static_(props, context, dependencies) {
  var {
    isArrayType,
    isFileType,
    isImageType,
    isObjectType,
    isGroupType,
    isMatrixType,
    isGridType,
    isListType,
    isActive,
    active,
    mounted,
    container,
    activate,
    deactivate
  } = base$U(props, context, dependencies);

  // ============== COMPUTED ==============

  var isStatic = computed(() => {
    return true;
  });
  return {
    isStatic,
    isFileType,
    isArrayType,
    isImageType,
    isObjectType,
    isGroupType,
    isMatrixType,
    isGridType,
    isListType,
    isActive,
    active,
    mounted,
    container,
    activate,
    deactivate
  };
};
var dates$5 = checkboxgroup$1;
var multiselect$5 = checkboxgroup$1;
var tags$5 = checkboxgroup$1;

var base$T = function base(props, context, dependencies) {
  var {
    name
  } = toRefs(props);
  var currentInstance = getCurrentInstance();

  // ============ DEPENDENCIES ============

  var {
    form$
  } = dependencies;

  // ============== COMPUTED ==============

  /**
   * The parent component of the element.
   *
   * @type {VNode}
   */
  var parent = computed(() => {
    var getParent = (parent, getParent) => {
      if (parent && (form$.value.$vueform.vueVersion === 3 && parent.$options.name && parent.$options.name.match(/^[a-zA-Z\-]*Element$/) || form$.value.$vueform.vueVersion === 2 && parent.hasOwnProperty('el$') && typeof parent.el$ !== 'function')) {
        return parent.el$;
      } else if (parent.$parent) {
        return getParent(parent.$parent, getParent);
      } else {
        return null;
      }
    };
    return getParent(form$.value.$vueform.vueVersion === 3 ? currentInstance.parent.proxy : currentInstance.proxy.$parent, getParent);
  });

  /**
   * The path of the element using dot `.` syntax.
   *
   * @type {string}
   */
  var path = computed(() => {
    return parent.value && parent.value.path ? parent.value.path + '.' + name.value : name.value;
  });

  /**
   * The path of the element's data using dot `.` syntax.
   *
   * @type {string}
   */
  var dataPath = computed(() => {
    return parent.value && parent.value.dataPath ? parent.value.dataPath + '.' + name.value : name.value;
  });

  /**
   * Whether the element is just a container of children but not nested on data level (eg. [`GroupElement`](group-element))
   *
   * @type {boolean}
   * @private
   */
  var flat = computed(() => {
    return false;
  });
  return {
    parent,
    path,
    dataPath,
    flat
  };
};
var group$6 = function group(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var {
    path,
    parent
  } = base$T(props, context, dependencies);

  // ============== COMPUTED ==============

  var dataPath = computed(() => {
    return parent.value && parent.value.dataPath ? parent.value.dataPath : null;
  });
  var flat = computed(() => {
    return true;
  });
  return {
    path,
    dataPath,
    flat,
    parent
  };
};
var static_$1 = function static_(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var {
    path,
    parent,
    flat
  } = base$T(props, context, dependencies);

  // ============== COMPUTED ==============

  return {
    path,
    flat,
    parent
  };
};

function resolveDeps(props, context, options) {
  var deps = options.deps || {};
  options = _objectSpread2$1(_objectSpread2$1({}, options), {}, {
    events: context.emits,
    slots: context.slots
  });
  context.features.forEach(feature => {
    each(feature(props, context, deps, options), (featureDep, key) => {
      deps[key] = featureDep;
    });
  });
  return deps;
}

var base$S = function base(props, context) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var deps = resolveDeps(props, context, options);
  onMounted(() => {
    if (deps.initWatcher) {
      deps.initWatcher();
    }
    if (deps.initMessageBag) {
      deps.initMessageBag();
    }
    if (deps.initValidation) {
      deps.initValidation();
    }
  });
  return _objectSpread2$1({}, deps);
};
var static_ = function static_(props, context) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var deps = resolveDeps(props, context, options);
  return _objectSpread2$1({}, deps);
};
var multilingual$8 = function multilingual(props, context) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var deps = resolveDeps(props, context, options);
  onMounted(() => {
    deps.initWatcher();
    deps.initState();
    deps.initMessageBag();
    deps.initValidation();
  });
  return _objectSpread2$1({}, deps);
};
var location$3 = function location(props, context) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var {
    displayKey
  } = toRefs(props);
  var deps = resolveDeps(props, context, options);
  onMounted(() => {
    if (deps.value.value[displayKey.value]) {
      deps.input.value.value = deps.value.value[displayKey.value];
    }
  });
  onMounted(() => {
    deps.initWatcher();
    deps.initMessageBag();
    deps.initValidation();
  });
  return _objectSpread2$1({}, deps);
};

var BaseElement = {
  props: {
    name: {
      required: true,
      type: [String, Number]
    },
    conditions: {
      required: false,
      type: [Array],
      default: () => []
    },
    onBeforeCreate: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onCreated: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onBeforeMount: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onMounted: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onBeforeUpdate: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onUpdated: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onBeforeUnmount: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onUnmounted: {
      required: false,
      type: [Function],
      default: null,
      private: true
    }
  }
};

var HasView = {
  props: {
    inline: {
      required: false,
      type: [Boolean],
      default: false
    },
    layout: {
      required: false,
      type: [String, Object, Boolean],
      default: 'ElementLayout',
      private: true
    },
    addClass: {
      required: false,
      type: [Array, Object, String, Function],
      default: null
    },
    removeClass: {
      required: false,
      type: [Array, Object, Function],
      default: null
    },
    replaceClass: {
      required: false,
      type: [Object, Function],
      default: null
    },
    overrideClass: {
      required: false,
      type: [Array, Object, String, Function],
      default: null
    },
    addClasses: {
      required: false,
      type: [Object, Function],
      default: () => ({})
    },
    replaceClasses: {
      required: false,
      type: [Object, Function],
      default: () => ({})
    },
    removeClasses: {
      required: false,
      type: [Object, Function],
      default: () => ({})
    },
    overrideClasses: {
      required: false,
      type: [Object, Function],
      default: () => ({})
    },
    presets: {
      required: false,
      type: [Array],
      default: () => []
    },
    view: {
      required: false,
      type: [String],
      default: undefined
    },
    views: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    size: {
      required: false,
      type: [String],
      default: undefined
    },
    columns: {
      required: false,
      type: [Object, String, Number],
      default: null
    },
    templates: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    description: {
      required: false,
      type: [String, Object],
      localized: true,
      default: null
    },
    info: {
      required: false,
      type: [String, Object],
      localized: true,
      default: null
    },
    infoPosition: {
      required: false,
      type: [String],
      default: 'right'
    },
    label: {
      required: false,
      type: [String, Object, Function],
      localized: true,
      default: null
    },
    before: {
      required: false,
      type: [Object, String, Number],
      localized: true,
      default: null
    },
    between: {
      required: false,
      type: [Object, String, Number],
      localized: true,
      default: null
    },
    after: {
      required: false,
      type: [Object, String, Number],
      localized: true,
      default: null
    },
    slots: {
      required: false,
      type: [Object],
      default: () => ({})
    }
  }
};

var ButtonElement = {
  name: 'ButtonElement',
  mixins: [BaseElement, HasView],
  emits: ['click', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'button',
      private: true
    },
    buttonLabel: {
      required: false,
      type: [String, Object, Function],
      default: null
    },
    buttonType: {
      required: false,
      type: [String],
      default: 'button' // button|anchor
    },
    buttonClass: {
      required: false,
      type: [String, Array, Object],
      default: null
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    loading: {
      required: false,
      type: [Function, Boolean],
      default: false
    },
    href: {
      required: false,
      type: [String],
      default: ''
    },
    target: {
      required: false,
      type: [String],
      default: null
    },
    onClick: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    resets: {
      required: false,
      type: [Boolean],
      default: false
    },
    submits: {
      required: false,
      type: [Boolean],
      default: false
    },
    secondary: {
      required: false,
      type: [Boolean],
      default: false
    },
    danger: {
      required: false,
      type: [Boolean],
      default: false
    },
    full: {
      required: false,
      type: [Boolean],
      default: false
    },
    align: {
      required: false,
      type: [String],
      default: undefined
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, static_$1, base$1i, static_$2, button$1, base$1a, base$15, base$13, base$12, base$_, base$10, base$1g, base$14, base$11, button, base$Z];
    context.slots = ['label', 'info', 'description', 'before', 'between', 'after', 'default'];
    return _objectSpread2$1({}, static_(props, context));
  }
};

var base$R = function base(props, context, dependencies) {
  // ================ DATA ================

  /**
   * The main input field of the element.
   *
   * @type {HTMLElement}
   */
  var input = ref(null);
  return {
    input
  };
};
var select$4 = function select(props, context, dependencies) {
  // ================ DATA ================

  /**
   * The main input field of the element, which can be a [`Multiselect`](https://github.com/vueform/multiselect) component.
   *
   * @type {HTMLElement}
   */
  var input = ref(null);
  return {
    input
  };
};
var multiselect$4 = select$4;
var tags$4 = select$4;

function checkDateFormat (format, date, moment) {
  if (!(date instanceof Date) && moment(date, format).format(format) !== date) {
    console.warn("Wrong formatted date. Expected format: \"".concat(format, "\", received: \"").concat(date, "\""));
  }
}

var getRowKey = name => {
  var parts = name.split('_');
  return parts[parts.length - 2];
};

var getColKey = name => {
  var parts = name.split('_');
  return parts[parts.length - 1];
};

var valueGet = _ref => {
  var {
    parent,
    name,
    form$,
    dataPath,
    internalValue,
    defaultValue
  } = _ref;
  var value;
  if (parent.value && parent.value.isMatrixType) {
    var row = parent.value.resolvedRows[getRowKey(name.value)];
    var col = parent.value.resolvedColumns[getColKey(name.value)];
    var rowModel = form$.value.isSync ? get_1(form$.value.model, "".concat(parent.value.dataPath, ".").concat(row.value)) : parent.value.value[row.value];
    switch (parent.value.dataType) {
      case 'assoc':
        value = rowModel === col.value ? true : null;
        break;
      case 'array':
        value = Array.isArray(rowModel) && rowModel.includes(col.value);
        break;
      default:
        value = rowModel === null || rowModel === void 0 ? void 0 : rowModel[col.value];
    }
  } else if (form$.value.isSync) {
    value = get_1(form$.value.model, dataPath.value);
  } else if (parent.value && (parent.value.isObjectType || parent.value.isGroupType || parent.value.isGridType || parent.value.isListType)) {
    value = parent.value.value[name.value];
  } else {
    value = internalValue === null || internalValue === void 0 ? void 0 : internalValue.value;
  }
  return value !== undefined ? value : (defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.value) instanceof File ? defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.value : cloneDeep_1(defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.value);
};

var valueSet = (val, _ref) => {
  var {
    parent,
    name,
    form$,
    dataPath,
    internalValue
  } = _ref;
  if (parent.value && parent.value.isMatrixType) {
    var row = parent.value.resolvedRows[getRowKey(name.value)];
    var col = parent.value.resolvedColumns[getColKey(name.value)];
    var matrixModel = form$.value.isSync ? get_1(form$.value.model, parent.value.dataPath) : parent.value.value;
    var rowModel = matrixModel[row.value];
    var newValue;
    switch (parent.value.dataType) {
      case 'assoc':
        var assocValue;
        if (val) {
          assocValue = col.value;
        } else if (rowModel === col.value || rowModel && typeof rowModel !== typeof col.value) {
          assocValue = null;
        }
        newValue = _objectSpread2$1({}, matrixModel);
        if (assocValue !== undefined) {
          newValue[row.value] = assocValue;
        }
        break;
      case 'array':
        var arrayValue = [];
        parent.value.resolvedColumns.forEach((column, c) => {
          if (Array.isArray(rowModel) && rowModel.includes(column.value) && column.value !== col.value || column.value === col.value && val) {
            arrayValue.push(column.value);
          }
        });
        newValue = _objectSpread2$1(_objectSpread2$1({}, matrixModel), {}, {
          [row.value]: arrayValue
        });
        break;
      default:
        var newParentValue = {};
        parent.value.resolvedRows.forEach((Row, r) => {
          newParentValue[Row.value] = _objectSpread2$1({}, Object.keys(matrixModel[Row.value] || {}).filter(k => parent.value.resolvedColumns.map(c => String(c.value)).includes(k)).reduce((prev, curr) => _objectSpread2$1(_objectSpread2$1({}, prev), {}, {
            [curr]: matrixModel[Row.value][curr]
          }), {}));
          if (Row.value === row.value) {
            parent.value.resolvedColumns.forEach((Column, c) => {
              newParentValue[row.value][Column.value] = Column.value === col.value ? val : newParentValue[row.value][Column.value];
            });
          }
        });
        newValue = newParentValue;
    }
    if (form$.value.isSync) {
      form$.value.updateModel(parent.value.dataPath, newValue);
    } else {
      parent.value.value = newValue;
    }
  } else if (form$.value.isSync) {
    form$.value.updateModel(dataPath.value, val);
  } else if (parent.value && parent.value.isListType) {
    var _newValue = parent.value.value.map((v, k) => k == name.value ? val : v);
    parent.value.update(_newValue);
  } else if (parent.value && (parent.value.isObjectType || parent.value.isGroupType || parent.value.isGridType)) {
    parent.value.value = Object.assign({}, parent.value.value, {
      [name.value]: val
    });
  } else {
    internalValue.value = val;
  }
};

var base$Q = function base(props, context, dependencies) {
  var _options$value, _options$value2;
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var {
    name,
    type
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var {
    parent,
    defaultValue,
    dataPath,
    form$
  } = dependencies;

  // ================ DATA =================

  /**
   * The initial value of the element.
   * 
   *
   * @type {any}
   * @private
   */
  var initialValue = ref(valueGet({
    parent,
    name,
    form$,
    dataPath
  }));

  // ============== COMPUTED ===============

  /**
   * The store for the value of the element when we're not using external data (form's `v-model`).
   *
   * @type {any}
   * @private
   */
  var internalValue = ref(defaultValue.value instanceof File ? defaultValue.value : cloneDeep_1(defaultValue.value));

  /**
   * The value of the element.
   *
   * @type {any}
   */
  var value = computed({
    get: ((_options$value = options.value) === null || _options$value === void 0 ? void 0 : _options$value.get) || function () {
      return valueGet({
        parent,
        name,
        form$,
        dataPath,
        internalValue,
        defaultValue
      });
    },
    set: ((_options$value2 = options.value) === null || _options$value2 === void 0 ? void 0 : _options$value2.set) || function (val) {
      return valueSet(val, {
        parent,
        name,
        form$,
        dataPath,
        internalValue
      });
    }
  });

  /**
   * Intermediary value between element's value and field's `v-model`. It is required when we need to transform the value format between the element and its field.
   *
   * @type {any}
   */
  var model = computed({
    get() {
      return value.value;
    },
    set(val) {
      value.value = val;
    }
  });

  /**
   * Whether the element has its default value.
   *
   * @type {boolean}
   */
  var isDefault = computed(() => {
    return isEqual_1(value.value, defaultValue.value);
  });
  if (options.init === undefined || options.init !== false) {
    // If element's value was undefined initially (not found in v-model/data) then we need to set its value
    if (initialValue.value === undefined) {
      value.value = defaultValue.value instanceof File ? defaultValue.value : cloneDeep_1(defaultValue.value);
    }
  }

  // ============== WATCHERS ===============

  /* istanbul ignore next: type can not be changed on the fly */
  watch(type, () => {
    value.value = defaultValue.value instanceof File ? defaultValue.value : cloneDeep_1(defaultValue.value);
  });
  return {
    initialValue,
    internalValue,
    value,
    model,
    isDefault
  };
};
var text$3 = function text(props, context, dependencies) {
  var _options$value3, _options$value4;
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var {
    name,
    expression
  } = toRefs(props);
  var {
    initialValue,
    internalValue,
    isDefault
  } = base$Q(props, context, dependencies);
  var unwatchDeps;
  var unwatchData;
  var unwatchLocale;

  // ============ DEPENDENCIES =============

  var {
    parent,
    defaultValue,
    dataPath,
    form$,
    shouldForceNumbers,
    stringToNumber,
    on
  } = dependencies;
  var $vueform = inject('$vueform');
  var config$ = inject('config$');

  // ================ DATA =================

  /**
   * The object that only contains data of the fields that the expression depends on.
   * 
   * @type {object}
   * @private
   */
  var dependencyData = ref({});

  /**
   * The expression of the current language (or default).
   * 
   * @type {string}
   * @private
   */
  var currentExpression = ref();

  // ============== COMPUTED ===============

  var value = computed({
    get: ((_options$value3 = options.value) === null || _options$value3 === void 0 ? void 0 : _options$value3.get) || function () {
      return valueGet({
        parent,
        name,
        form$,
        dataPath,
        internalValue,
        defaultValue
      });
    },
    set: ((_options$value4 = options.value) === null || _options$value4 === void 0 ? void 0 : _options$value4.set) || function (val) {
      if (shouldForceNumbers()) {
        val = stringToNumber(val);
      }
      return valueSet(val, {
        parent,
        name,
        form$,
        dataPath,
        internalValue
      });
    }
  });
  var model = computed({
    get() {
      return value.value;
    },
    set(val) {
      value.value = val;
    }
  });

  /**
   * The list of element paths that the current expression depends on.
   * 
   * @type {array}
   * @private
   */
  var expressionDeps = computed(() => {
    if (!expression.value) {
      return [];
    }
    return form$.value.expression.vars(currentExpression.value, dataPath.value);
  });

  /**
   * Resolve the value of the current expression and sets it as the value of the element.
   * 
   * @returns {void}
   * @private
   */
  var resolveExpressionValue = () => {
    if (!currentExpression.value) return;
    value.value = form$.value.resolveExpression(currentExpression.value, dataPath.value);
  };

  /**
   * Sets the current expression depending on the current language (or default).
   * 
   * @returns {void}
   * @private
   */
  var setCurrentExpression = () => {
    currentExpression.value = localize(expression.value, config$.value, form$.value);
  };

  /**
   * Starts to track changes related to expression.
   * 
   * @returns {void}
   * @private
   */
  var trackExpression = () => {
    on('reset', resolveExpressionValue);
    on('clear', resolveExpressionValue);
    unwatchLocale = watch([() => $vueform.value.i18n.locale, () => form$.value.locale], () => {
      setCurrentExpression();
    });
    unwatchData = watch(() => form$.value.requestData, () => {
      var fullData = flatten(form$.value.requestData);
      for (var key of expressionDeps.value) {
        dependencyData.value[key] = fullData[key];
      }
    }, {
      deep: true,
      immediate: true
    });
    unwatchDeps = watch(dependencyData, () => {
      if (!currentExpression.value) return;
      resolveExpressionValue();
    }, {
      deep: true
    });
  };

  /**
   * Ends tracking changes related to expression.
   * 
   * @returns {void}
   * @private
   */
  var untrackExpression = () => {
    if (unwatchData) unwatchData();
    if (unwatchDeps) unwatchDeps();
    if (unwatchLocale) unwatchLocale();
  };
  if (expression.value) {
    onMounted(() => {
      setCurrentExpression();
      resolveExpressionValue();
      trackExpression();
    });
  }
  watch(expression, (n, o) => {
    if (n) {
      setCurrentExpression();
      resolveExpressionValue();
      if (!o) trackExpression();
    } else {
      value.value = defaultValue.value;
      untrackExpression();
    }
  }, {
    immediate: false,
    deep: true
  });
  return {
    initialValue,
    internalValue,
    value,
    model,
    isDefault
  };
};
var matrix$4 = function matrix(props, context, dependencies) {
  var {
    name,
    type
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var {
    parent,
    defaultValue,
    dataPath,
    form$,
    hasDynamicRows
  } = dependencies;

  // ================ DATA =================

  var initialValue = ref(undefined);

  // If sync
  if (form$.value.isSync) {
    initialValue.value = get_1(form$.value.model, dataPath.value);

    // If parent is a container
  } else if (parent.value && (parent.value.isObjectType || parent.value.isGroupType || parent.value.isGridType || parent.value.isListType)) {
    initialValue.value = parent.value.value[name.value];
  }

  // ============== COMPUTED ===============

  var internalValue = ref(cloneDeep_1(defaultValue.value));

  /**
   * The value of the element.
   *
   * @type {any}
   */
  var value = computed({
    get: function get() {
      var value;

      // If sync
      if (form$.value.isSync) {
        value = get_1(form$.value.model, dataPath.value);

        // If parent is a container or list
      } else if (parent.value && (parent.value.isObjectType || parent.value.isGroupType || parent.value.isGridType || parent.value.isListType)) {
        value = parent.value.value[name.value];

        // If has no parent
      } else {
        value = internalValue.value;
      }
      value = value !== undefined ? value : cloneDeep_1(defaultValue.value);
      if (hasDynamicRows.value) {
        value = Object.values(value);
      }
      return value;
    },
    set: function set(val) {
      // // If sync
      if (form$.value.isSync) {
        form$.value.updateModel(dataPath.value, val);
      }

      // If parent is list
      else if (parent.value && parent.value.isListType) {
        parent.value.update(parent.value.value.map((v, k) => k == name.value ? val : v));
      }

      // If parent is container
      else if (parent.value && (parent.value.isObjectType || parent.value.isGroupType || parent.value.isGridType)) {
        parent.value.value = Object.assign({}, parent.value.value, {
          [name.value]: val
        });

        // If has no parent
      } else {
        internalValue.value = val;
      }
    }
  });
  var model = computed({
    get() {
      return value.value;
    },
    set(val) {
      value.value = val;
    }
  });
  var isDefault = computed(() => {
    return isEqual_1(value.value, defaultValue.value);
  });
  if (initialValue.value === undefined) {
    value.value = defaultValue.value;
  } else {
    value.value = _objectSpread2$1(_objectSpread2$1({}, defaultValue.value), value.value);
  }

  // ============== WATCHERS ===============

  watch(type, () => {
    value.value = cloneDeep_1(defaultValue.value);
  });
  return {
    initialValue,
    internalValue,
    value,
    model,
    isDefault
  };
};
var list$3 = function list(props, context, dependencies) {
  var {
    initialValue,
    internalValue,
    value,
    model,
    isDefault
  } = base$Q(props, context, dependencies, {
    init: false
  });
  return {
    initialValue,
    internalValue,
    value,
    model,
    isDefault
  };
};
var object$6 = function object(props, context, dependencies) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var {
    initialValue,
    internalValue,
    value,
    isDefault
  } = base$Q(props, context, dependencies, {
    init: false
  });

  // ============ DEPENDENCIES =============

  var defaultValue = dependencies.defaultValue;

  // ================ HOOKS ================

  /* istanbul ignore else */
  if (options.init === undefined || /* istanbul ignore next: init will always be false */options.init !== false) {
    if (initialValue.value === undefined) {
      value.value = defaultValue.value;
    } else {
      value.value = Object.assign({}, defaultValue.value, value.value);
    }
  }
  return {
    internalValue,
    value,
    isDefault
  };
};
var group$5 = function group(props, context, dependencies) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  // ============ DEPENDENCIES =============

  var parent = dependencies.parent;
  var dataPath = dependencies.dataPath;
  var defaultValue = dependencies.defaultValue;
  var children$Array = dependencies.children$Array;
  var form$ = dependencies.form$;

  // ================ DATA =================

  /**
   * The store for the value of the element when we're not using external data (form's `v-model`).
   *
   * @type {any}
   * @private
   */
  var internalValue = ref(cloneDeep_1(defaultValue.value));

  // ============== COMPUTED ===============

  var value = computed(options.value || {
    get() {
      var value;
      if (form$.value.isSync) {
        value = dataPath.value ? get_1(form$.value.model, dataPath.value) || {} : form$.value.model;
      } else if (parent.value && (parent.value.isObjectType || parent.value.isGroupType || parent.value.isGridType)) {
        value = parent.value.value;
      } else {
        value = internalValue.value;
      }

      // Filter out children values that parent has but not among group elements
      var childKeys = children$Array.value.reduce((all, child$) => {
        /* istanbul ignore else */
        if (!child$ || child$.isStatic) {
          return all;
        }
        var keys = [];
        if (!child$.flat) {
          keys.push(child$.name);
        } else {
          var addGroupKeys = children$Array => {
            children$Array.forEach(child$ => {
              if (!child$.isStatic && child$.flat) {
                addGroupKeys(child$.children$Array);
              } /* istanbul ignore else */else if (!child$.isStatic) {
                keys.push(child$.name);
              }
            });
          };
          addGroupKeys(child$.children$Array);
        }
        return all.concat(keys);
      }, []);
      var tempValue = {};
      childKeys.forEach(key => {
        /* istanbul ignore else */
        if (value[key] !== undefined) {
          tempValue[key] = value[key];
        }
      });
      value = tempValue;
      return value !== undefined ? value : /* istanbul ignore next: will never reach, internalValue is assigned at the beginning */cloneDeep_1(defaultValue.value);
    },
    set(val) {
      if (form$.value.isSync) {
        form$.value.updateModel(dataPath.value, val);
      } else if (parent.value && (parent.value.isObjectType || parent.value.isGroupType || parent.value.isGridType)) {
        parent.value.value = Object.assign({}, parent.value.value, val);
      } else {
        internalValue.value = val;
      }
    }
  });
  var isDefault = computed(() => {
    return isEqual_1(value.value, defaultValue.value);
  });
  return {
    value,
    isDefault
  };
};
var multilingual$7 = function multilingual(props, context, dependencies) {
  var {
    value,
    isDefault
  } = base$Q(props, context, dependencies);

  // ============ DEPENDENCIES =============

  var language = dependencies.language;

  // ============== COMPUTED ===============

  var model = computed({
    get() {
      return value.value[language.value];
    },
    set(val) {
      value.value = Object.assign({}, value.value, {
        [language.value]: val
      });
    }
  });
  return {
    value,
    model,
    isDefault
  };
};
var date$3 = function date(props, context, dependencies) {
  var {
    name
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var parent = dependencies.parent;
  var valueDateFormat = dependencies.valueDateFormat;
  var defaultValue = dependencies.defaultValue;
  var dataPath = dependencies.dataPath;
  var form$ = dependencies.form$;
  var moment = form$.value.$vueform.services.moment;

  // ================= PRE =================

  /**
   * The store for the value of the element when we're not using external data (form's `v-model`).
   *
   * @type {any}
   * @private
   */
  var internalValue = ref(cloneDeep_1(defaultValue.value));
  var {
    value,
    initialValue,
    isDefault
  } = base$Q(props, context, dependencies, {
    value: {
      get() {
        return valueGet({
          parent,
          name,
          form$,
          dataPath,
          internalValue,
          defaultValue
        });
      },
      set(val) {
        // If the value is not a Date object check if it is matching the value format
        if (!isEmpty_1(val) && !(val instanceof Date) && valueDateFormat.value !== false) {
          checkDateFormat(valueDateFormat.value, val, moment);
        }
        val = val && val instanceof Date && valueDateFormat.value !== false ? moment(val).format(valueDateFormat.value) : val;
        return valueSet(val, {
          parent,
          name,
          form$,
          dataPath,
          internalValue
        });
      }
    }
  });

  // ============== COMPUTED ===============

  var model = computed(() => {
    return value.value instanceof Date || !value.value ? value.value : moment(value.value, valueDateFormat.value).toDate();
  });
  return {
    value,
    model,
    initialValue,
    internalValue,
    isDefault
  };
};
var dates$4 = function dates(props, context, dependencies) {
  var {
    name
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var parent = dependencies.parent;
  var valueDateFormat = dependencies.valueDateFormat;
  var defaultValue = dependencies.defaultValue;
  var dataPath = dependencies.dataPath;
  var form$ = dependencies.form$;
  var moment = form$.value.$vueform.services.moment;

  // ================= PRE =================

  /**
   * The store for the value of the element when we're not using external data (form's `v-model`).
   *
   * @type {any}
   * @private
   */
  var internalValue = ref(cloneDeep_1(defaultValue.value));
  var {
    value,
    initialValue,
    isDefault
  } = base$Q(props, context, dependencies, {
    value: {
      get() {
        return valueGet({
          parent,
          name,
          form$,
          dataPath,
          internalValue,
          defaultValue
        });
      },
      set(val) {
        if (!Array.isArray(val)) {
          val = [val];
        }
        val = val.map(v => {
          if (!isEmpty_1(v) && !(v instanceof Date) && valueDateFormat.value !== false) {
            checkDateFormat(valueDateFormat.value, v, moment);
          }
          return v && v instanceof Date && valueDateFormat.value !== false ? moment(v).format(valueDateFormat.value) : v;
        });
        return valueSet(val, {
          parent,
          name,
          form$,
          dataPath,
          internalValue
        });
      }
    }
  });

  // ============== COMPUTED ===============

  var model = computed(() => {
    return value.value.map(v => {
      return v instanceof Date || !v ? v : moment(v, valueDateFormat.value).toDate();
    });
  });
  return {
    value,
    model,
    initialValue,
    internalValue,
    isDefault
  };
};
var hidden$2 = text$3;

var base$P = function base(props, context, dependencies) {
  // ============== COMPUTED ===============

  /**
   * The null value of the element.
   *
   * @type {any}
   * @private
   */
  var nullValue = computed(() => {
    return null;
  });
  return {
    nullValue
  };
};
var array$1 = function array(props, context, dependencies) {
  // ============== COMPUTED ===============

  var nullValue = computed(() => {
    return [];
  });
  return {
    nullValue
  };
};
var boolean = function boolean(props, context, dependencies) {
  var {
    falseValue
  } = toRefs(props);

  // ============== COMPUTED ===============

  var nullValue = computed(() => {
    return falseValue.value;
  });
  return {
    nullValue
  };
};
var min = function min(props, context, dependencies) {
  var {
    min,
    default: default_
  } = toRefs(props);

  // ============== COMPUTED ===============

  var nullValue = computed(() => {
    return default_.value !== undefined && isArray_1(default_.value) ? default_.value.map(v => min.value) : min.value;
  });
  return {
    nullValue
  };
};
var object$5 = function object(props, context, dependencies) {
  // ============== COMPUTED ===============

  var nullValue = computed(() => {
    return {};
  });
  return {
    nullValue
  };
};
var location$2 = function location(props, context, dependencies) {
  // ============== COMPUTED ===============

  var nullValue = computed(() => {
    return {
      country: null,
      country_code: null,
      state: null,
      state_code: null,
      city: null,
      zip: null,
      address: null,
      formatted_address: null,
      lat: null,
      lng: null
    };
  });
  return {
    nullValue
  };
};
var multilingual$6 = function multilingual(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var languages = dependencies.languages;

  // ============== COMPUTED ===============

  var nullValue = computed(() => {
    var value = {};
    each(languages.value, code => {
      value[code] = null;
    });
    return value;
  });
  return {
    nullValue
  };
};
var generic = function generic(props, context, dependencies) {
  // ============== COMPUTED ===============

  var nullValue = computed(() => {
    return context.nullValue !== undefined ? context.nullValue : null;
  });
  return {
    nullValue
  };
};

var base$O = function base(props, context, dependencies) {
  var {
    name,
    floating,
    placeholder,
    label,
    fieldName
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var Label = dependencies.Label;

  // =============== INJECT ===============

  var config$ = inject('config$');

  // ============== COMPUTED ==============

  /**
   * The generic name of the element constructed from label / floating or element name.
   *
   * @type {string}
   * @private.
   */
  var genericName = computed(() => {
    var genericName;
    if (fieldName && fieldName.value) {
      genericName = localize(fieldName.value, config$.value, form$.value);
    } else if (label && label.value) {
      genericName = Label.value;
    } else if (floating && floating.value) {
      genericName = localize(floating.value, config$.value, form$.value);
    } else if (placeholder && placeholder.value && form$.value.options.floatPlaceholders) {
      genericName = localize(placeholder.value, config$.value, form$.value);
    } else {
      genericName = upperFirst_1(name.value).replace(/_|-/g, ' ');
    }
    return form$.value.$vueform.sanitize(genericName);
  });
  return {
    genericName
  };
};
var file$2 = function file(props, context, dependencies) {
  var {
    name,
    embed,
    label,
    fieldName
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var Label = dependencies.Label;
  var filename = dependencies.filename || /* istanbul ignore next: failsafe only */ref(null);

  // =============== INJECT ===============

  var config$ = inject('config$');

  // ============== COMPUTED ==============

  /**
   * The generic name of the element constructed from label / floating, element name or default file name if name is a number.
   *
   * @type {string}
   * @private.
   */
  var genericName = computed(() => {
    var genericName;
    if (embed.value && filename.value) {
      genericName = filename.value;
    } else if (fieldName && fieldName.value) {
      genericName = localize(fieldName.value, config$.value, form$.value);
    } else if (label.value) {
      genericName = Label.value;
    } else {
      genericName = /^\d+$/.test(name.value) ? form$.value.translations.vueform.elements.file.defaultName : upperFirst_1(name.value).replace(/_|-/g, ' ');
    }
    return form$.value.$vueform.sanitize(genericName);
  });
  return {
    genericName
  };
};

var base$N = function base(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var value = dependencies.value;
  var nullValue = dependencies.nullValue;

  // ============== COMPUTED ==============

  /**
   * Whether the element has no value filled in.
   *
   * @type {boolean}
   */
  var empty = computed(() => {
    return isEqual_1(value.value, nullValue.value) || [undefined, null, ''].indexOf(value.value) !== -1;
  });
  return {
    empty
  };
};
var multilingual$5 = function multilingual(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var value = dependencies.value;
  var nullValue = dependencies.nullValue;
  var language = dependencies.language;

  // ============== COMPUTED ==============

  var empty = computed(() => {
    return value.value[language.value] == nullValue.value[language.value] || value.value[language.value] === '';
  });
  return {
    empty
  };
};
var array = function array(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var value = dependencies.value;
  var nullValue = dependencies.nullValue;

  // ============== COMPUTED ==============

  var empty = computed(() => {
    return isEqual_1(value.value, nullValue.value) || [undefined, null, ''].indexOf(value.value) !== -1 || value.value.length == 0;
  });
  return {
    empty
  };
};

var base$M = function base(props, context, dependencies) {
  var {
    loading
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var pending = dependencies.pending;

  // ============== COMPUTED ==============

  /**
   * Whether the element is in loading state.
   *
   * @type {boolean}
   */
  var isLoading = computed(() => {
    return pending.value || loading.value;
  });
  return {
    isLoading
  };
};

var base$L = function base(props, context, dependencies) {
  var {
    floating,
    placeholder
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;

  // ============== COMPUTED ==============

  /**
   * Whether the element floating label.
   *
   * @type {boolean}
   */
  var hasFloating = computed(() => {
    return !!(!!floating.value || placeholder.value && form$.value.options.floatPlaceholders) && floating.value !== false;
  });
  return {
    hasFloating
  };
};

var base$K = function base(props, context, dependencies) {
  // ============ DEPENDENCIES =============

  var form$ = dependencies.form$;
  var el$ = dependencies.el$;
  var fire = dependencies.fire;
  var dirt = dependencies.dirt;
  var validate = dependencies.validate;
  var value = dependencies.value;

  // =============== METHODS ===============

  var initWatcher = () => {
    watch(value, (n, o) => {
      if (dataEquals(n, o)) {
        return;
      }
      fire('change', n, o, el$.value);

      /* istanbul ignore else */
      if (dirt) {
        dirt();
      }
      if (validate && form$.value.shouldValidateOnChange) {
        validate();
      }
    }, {
      immediate: false,
      deep: true
    });
  };
  return {
    initWatcher
  };
};
var multilingual$4 = function multilingual(props, context, dependencies) {
  // ============ DEPENDENCIES =============

  var form$ = dependencies.form$;
  var el$ = dependencies.el$;
  var fire = dependencies.fire;
  var dirt = dependencies.dirt;
  var value = dependencies.value;
  var language = dependencies.language;
  var validateLanguage = dependencies.validateLanguage;

  // =============== METHODS ===============

  var initWatcher = () => {
    watch(value, (n, o) => {
      if (dataEquals(n, o)) {
        return;
      }
      fire('change', n, o, el$.value);

      /* istanbul ignore else */
      if (dirt) {
        dirt();
      }
      if (form$.value.shouldValidateOnChange) {
        validateLanguage(language.value);
      }
    }, {
      immediate: false,
      deep: true
    });
  };
  return {
    initWatcher
  };
};
var list$2 = function list(props, context, dependencies) {
  // ============ DEPENDENCIES =============

  var form$ = dependencies.form$;
  var el$ = dependencies.el$;
  var fire = dependencies.fire;
  var dirt = dependencies.dirt;
  var validateValidators = dependencies.validateValidators;
  var value = dependencies.value;

  // =============== METHODS ===============

  var initWatcher = () => {
    watch(value, (n, o) => {
      if (dataEquals(n, o)) {
        return;
      }
      fire('change', n, o, el$.value);

      /* istanbul ignore else */
      if (dirt) {
        dirt();
      }

      /* istanbul ignore else */
      if (validateValidators && form$.value.shouldValidateOnChange) {
        validateValidators();
      }
    }, {
      immediate: false,
      deep: true
    });
  };
  return {
    initWatcher
  };
};
var object$4 = function object(props, context, dependencies) {
  // ============ DEPENDENCIES =============

  var {
    form$,
    fire,
    value,
    el$,
    dirt,
    validateValidators
  } = dependencies;

  // =============== METHODS ===============

  var initWatcher = () => {
    watch(value, (n, o) => {
      if (dataEquals(n, o)) {
        return;
      }
      fire('change', n, o, el$.value);

      /* istanbul ignore else */
      if (dirt) {
        dirt();
      }

      /* istanbul ignore else */
      if (validateValidators && form$.value.shouldValidateOnChange) {
        validateValidators();
      }
    }, {
      immediate: false,
      deep: true
    });
  };
  return {
    initWatcher
  };
};
var location$1 = function location(props, context, dependencies) {
  var {
    displayKey
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var form$ = dependencies.form$;
  var el$ = dependencies.el$;
  var fire = dependencies.fire;
  var dirt = dependencies.dirt;
  var validate = dependencies.validate;
  var value = dependencies.value;
  var input = dependencies.input;

  // =============== METHODS ===============

  var initWatcher = () => {
    watch(value, (n, o) => {
      if (dataEquals(n, o)) {
        return;
      }
      fire('change', n, o, el$.value);
      dirt();
      input.value.value = input.value && value.value && value.value[displayKey.value] !== undefined ? value.value[displayKey.value] : '';

      /* istanbul ignore else */
      if (validate && form$.value.shouldValidateOnChange) {
        validate();
      }
    }, {
      immediate: false,
      deep: true
    });
  };
  return {
    initWatcher
  };
};
var multifile$5 = list$2;
var group$4 = object$4;

var base$J = function base(props, context, dependencies) {
  var {
    provider: elementProvider,
    options,
    readonly
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var {
    form$,
    input,
    model,
    nullValue,
    messageBag,
    validate,
    el$,
    invalid,
    isDisabled,
    resetValidators,
    resetting,
    initValidation
  } = dependencies;

  // ================ DATA ================

  /**
   * The captcha provider instance.
   * @type {object|null}
   */
  var Provider = ref(null);

  // ============== COMPUTED ==============

  /**
   * Whether the captcha should verify.
   *
   * @type {boolean}
   */
  var shouldVerify = computed(() => {
    return !isDisabled.value && !readonly.value;
  });

  /**
   * The captcha provider name.
   *
   * @type {string}
   * @private
   */
  var provider = computed(() => {
    return elementProvider.value || form$.value.options.useProviders.captcha;
  });

  /**
   * The captcha options.
   *
   * @type {object}
   */
  var captchaOptions = computed(() => {
    return _objectSpread2$1(_objectSpread2$1({}, form$.value.options.providerOptions[provider.value]), options.value);
  });

  // =============== METHODS ==============

  /**
   * Inits captcha provider.
   *
   * @returns {void}
   */
  var initCaptcha = () => {
    model.value = nullValue.value;
    Provider.value = new form$.value.options.providers.captcha[provider.value](input.value, captchaOptions.value, el$.value);
  };

  /**
   * Destroys the captcha provider.
   *
   * @returns {void}
   */
  var destroyCaptcha = () => {
    resetValidators();
    Provider.value.reset();
    model.value = nullValue.value;
    Provider.value = null;
  };

  // ================ HOOKS ===============

  onMounted(() => {
    if (shouldVerify.value) {
      initCaptcha();
    }
  });

  // ============== WATCHERS ==============

  watch(shouldVerify, /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* (n, o) {
      if (!n) {
        destroyCaptcha();
      } else if (n) {
        yield nextTick();
        initCaptcha();
        initValidation();
      }
    });
    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }());
  return {
    Provider,
    captchaOptions,
    shouldVerify,
    initCaptcha,
    destroyCaptcha
  };
};

var base$I = function base(props, context, dependencies) {
  var {
    rules
  } = toRefs(props);
  var config$ = inject('config$');

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var path = dependencies.path;
  var el$ = dependencies.el$;

  // ================ DATA ================

  /**
   * Helper property used to store the element states.
   *
   * @type {object}
   * @default { dirty: false, validate: true }
   * @private
   */
  var state = ref({
    dirty: false,
    validated: true
  });

  /**
   * An array containing all the validators of the element.
   *
   * @type {array}
   * @default []
   * @private
   */
  var Validators = ref([]);

  /**
   * Instance of MessageBag service. Custom errors and messages [can be added](/docs/validating-elements#custom-errors-and-messages).
   *
   * @type {MessageBag}
   * @default MessageBag
   */
  var messageBag = ref({});

  /**
   * Instance of ValidatorFactory.
   *
   * @type {ValidatorFactory}
   * @default ValidatorFactory
   * @private
   */
  var validatorFactory = reactive({});

  /**
   * Whether the element is currently being resetet (no validation should happen).
   *
   *
   * @type {boolean}
   * @default false
   * @private
   */
  var resetting = ref(false);

  // ============== COMPUTED ===============

  /**
   * The element's validation rules.
   *
   * @type {string|array}
   * @private
   */
  var validationRules = computed(() => {
    return rules.value;
  });

  /**
   * Whether the element's value was modified.
   *
   * @type {boolean}
   */
  var dirty = computed(() => {
    return state.value.dirty;
  });

  /**
   * Whether the element was already validated at least once.
   *
   * @type {boolean}
   */
  var validated = computed(() => {
    return state.value.validated;
  });

  /**
   * Whether the element has any failing rules.
   *
   * @type {boolean}
   */
  var invalid = computed(() => {
    return some_1(Validators.value, {
      invalid: true
    });
  });

  /**
   * Whether the element has any async rules in progress.
   *
   * @type {boolean}
   */
  var pending = computed(() => {
    return some_1(Validators.value, {
      pending: true
    });
  });

  /**
   * Whether the element is `pending`.
   *
   * @type {boolean}
   */
  var busy = computed(() => {
    return pending.value;
  });

  /**
   * The list of errors of failing rules.
   *
   * @type {array}
   * @private
   */
  var validatorErrors = computed(() => {
    var errs = [];
    each(Validators.value, Validator => {
      if (Validator.failing) {
        errs.push(Validator.message);
      }
    });
    return errs;
  });

  /**
   * All the errors of `MessageBag`.
   *
   * @type {array}
   */
  var errors = computed(() => {
    return messageBag.value.errors;
  });

  /**
   * The first error of `MessageBag`.
   *
   * @type {string}
   */
  var error = computed(() => {
    return messageBag.value.error || null;
  });

  /**
   * Whether the element has errors.
   *
   * @type {boolean}
   */
  var isDanger = computed(() => {
    return error.value !== null;
  });

  /**
   * Whether the element has been filled in successfully.
   *
   * @type {boolean}
   */
  var isSuccess = computed(() => {
    return validationRules.value && validationRules.value.length > 0 && state.value.validated && !invalid.value || (!validationRules.value || !validationRules.value.length) && dirty.value;
  });

  /**
   * Whether the element is required (has required rule).
   * 
   * @type {boolean}
   */
  var isRequired = computed(() => {
    return Validators.value.some(Validator => {
      var _Validator$conditions;
      if (Validator.name !== 'required') {
        return;
      }
      if (!((_Validator$conditions = Validator.conditions) !== null && _Validator$conditions !== void 0 && _Validator$conditions.length)) {
        return true;
      }
      return Validator.conditions(form$.value, Validator, el$.value);
    });
  });

  /**
   * Whether the element should use a custom logic for checking if it is filled when validating.
   * 
   * @type {boolean}
   */
  var useCustomFilled = computed(() => {
    return false;
  });

  /**
   * Whether the element is filled is `useCustomFilled` is `true`.
   * 
   * @type {boolean}
   */
  var isFilled = computed(() => {
    return true;
  });

  // =============== METHODS ===============

  /**
   * Checks each validation rule for the element (async).
   *
   * @returns {Promise}
   */
  var validate = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* () {
      if (!validationRules.value) {
        resetting.value = false;
        return;
      }
      if (form$.value.validation === false) {
        resetting.value = false;
        return;
      }
      if (resetting.value) {
        resetting.value = false;
        return;
      }
      yield asyncForEach(Validators.value, /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator(function* (Validator) {
          yield Validator.validate();
        });
        return function (_x) {
          return _ref2.apply(this, arguments);
        };
      }());
      state.value.validated = true;
    });
    return function validate() {
      return _ref.apply(this, arguments);
    };
  }();

  /**
   * Sets the validators to default state.
   *
   * @returns {void}
   */
  var resetValidators = () => {
    each(Validators.value, Validator => {
      Validator.reset();
    });
    state.value.validated = !validationRules.value;
  };

  /**
   * Flag the element as dirty.
   *
   * @returns {void}
   * @private
   */
  var dirt = () => {
    state.value.dirty = true;
  };

  /**
   * Removes the element's `dirty` state.
   *
   * @returns {void}
   */
  var clean = () => {
    state.value.dirty = false;
  };

  /**
   * Clears the manually added messages from the [`messageBag`](#property-message-bag).
   *
   * @returns {void}
   */
  var clearMessages = () => {
    /* istanbul ignore else */
    if (messageBag.value) {
      messageBag.value.clear();
    }
  };

  /**
   * Initializes MessageBag service.
   *
   * @returns {void}
   * @private
   */
  var initMessageBag = () => {
    messageBag.value = new form$.value.$vueform.services.messageBag(validatorErrors);
  };

  /**
   * Initializes validators.
   *
   * @returns {void}
   * @private
   */
  var initValidation = () => {
    /* istanbul ignore else */
    if (!validationRules.value) {
      Validators.value = [];
      return;
    }

    // If the element has rules it does not
    // qualify as validated by default
    state.value.validated = false;
    validatorFactory.value = new form$.value.$vueform.services.validation.factory(path.value, form$.value, config$.value);
    Validators.value = [];
    each(validatorFactory.value.makeAll(validationRules.value), Validator => {
      Validators.value.push(Validator);
    });
  };

  /**
   * Re-initializes validators when rules have changed.
   *
   * @returns {void}
   */
  var reinitValidation = () => {
    initValidation();
  };
  return {
    state,
    Validators,
    messageBag,
    resetting,
    dirty,
    validated,
    invalid,
    pending,
    busy,
    errors,
    error,
    validationRules,
    isDanger,
    isSuccess,
    isRequired,
    useCustomFilled,
    isFilled,
    validate,
    dirt,
    clean,
    clearMessages,
    resetValidators,
    initMessageBag,
    initValidation,
    reinitValidation
  };
};
var text$2 = function text(props, context, dependencies) {
  var {
    state,
    Validators,
    messageBag,
    resetting,
    dirty,
    validated,
    invalid,
    pending,
    errors,
    error,
    validationRules,
    isDanger,
    isSuccess,
    isRequired,
    useCustomFilled,
    isFilled,
    validate,
    dirt,
    clean,
    clearMessages,
    resetValidators,
    initMessageBag,
    initValidation,
    reinitValidation
  } = base$I(props, context, dependencies);

  // ============== COMPUTED ===============

  /**
   * Whether the element has a validation rule with pending debounce.
   *
   * @type {boolean}
   */
  var debouncing = computed(() => {
    return some_1(Validators.value, {
      debouncing: true
    });
  });

  /**
   * Whether the element is `pending` or `debouncing`.
   *
   * @type {boolean}
   */
  var busy = computed(() => {
    return pending.value || debouncing.value;
  });
  return {
    state,
    Validators,
    messageBag,
    resetting,
    dirty,
    validated,
    invalid,
    pending,
    debouncing,
    busy,
    errors,
    error,
    validationRules,
    isDanger,
    isSuccess,
    isRequired,
    useCustomFilled,
    isFilled,
    validate,
    dirt,
    clean,
    clearMessages,
    resetValidators,
    initMessageBag,
    initValidation,
    reinitValidation
  };
};
var list$1 = function list(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var {
    state,
    Validators,
    messageBag,
    validationRules,
    dirt,
    initValidation,
    resetting,
    isRequired,
    useCustomFilled,
    isFilled
  } = base$I(props, context, dependencies);
  var form$ = dependencies.form$;
  var children$ = dependencies.children$;

  // ============== COMPUTED ==============

  /**
   * Whether the element's or any of its children's value was modified.
   *
   * @type {boolean}
   */
  var dirty = computed(() => {
    return some_1(children$.value, {
      available: true,
      dirty: true
    }) || state.value.dirty;
  });

  /**
   * Whether the element and all of its children was already validated at least once.
   *
   * @type {boolean}
   */
  var validated = computed(() => {
    return !some_1(children$.value, {
      available: true,
      validated: false
    }) && state.value.validated;
  });

  /**
   * Whether the element or any of its children has any failing rules.
   *
   * @type {boolean}
   */
  var invalid = computed(() => {
    return some_1(children$.value, {
      available: true,
      invalid: true
    }) || some_1(Validators.value, {
      invalid: true
    });
  });

  /**
   * Whether the element or any of its children has any async rules in progress.
   *
   * @type {boolean}
   */
  var pending = computed(() => {
    return some_1(children$.value, {
      available: true,
      pending: true
    }) || some_1(Validators.value, {
      pending: true
    });
  });

  /**
   * Whether the element or any of its children have a validation rule with pending debounce.
   *
   * @type {boolean}
   */
  var debouncing = computed(() => {
    return some_1(children$.value, {
      available: true,
      debouncing: true
    }) || some_1(Validators.value, {
      debouncing: true
    });
  });

  /**
   * Whether the element or any of its children is `pending` or `debouncing`.
   *
   * @type {boolean}
   */
  var busy = computed(() => {
    return some_1(children$.value, {
      available: true,
      busy: true
    }) || pending.value || debouncing.value;
  });
  var validatorErrors = computed(() => {
    var validatorErrors = [];
    each(Validators.value, Validator => {
      if (Validator.failing) {
        validatorErrors.push(Validator.message);
      }
    });
    return validatorErrors;
  });

  /**
   * The list of errors collected from children.
   *
   * @type {array}
   * @private
   */
  var childrenErrors = computed(() => {
    var childrenErrors = [];
    each(children$.value, element$ => {
      if (!element$.available || element$.isStatic) {
        return;
      }
      each(element$.errors, error => {
        childrenErrors.push(error);
      });
    });
    return childrenErrors;
  });

  /**
   * The `validatorErrors` concatenated with `childrenErrors`.
   *
   * @type {array}
   * @private
   */
  var baseErrors = computed(() => {
    return validatorErrors.value.concat(childrenErrors.value);
  });
  var errors = computed(() => {
    return messageBag.value.errors;
  });
  var error = computed(() => {
    return head_1(validatorErrors.value);
  });

  // =============== METHODS ==============

  /**
   * Checks each validation rule for the element and validates children (async).
   *
   * @returns {Promise}
   */
  var validate = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator(function* () {
      if (resetting.value) {
        resetting.value = false;
        return;
      }
      yield validateValidators();
      yield validateChildren();
    });
    return function validate() {
      return _ref3.apply(this, arguments);
    };
  }();

  /**
   * Checks each validation rule for the element (async).
   *
   * @returns {Promise}
   */
  var validateValidators = /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator(function* () {
      if (resetting.value) {
        resetting.value = false;
        return;
      }
      if (form$.value.validation === false) {
        return;
      }
      yield asyncForEach(Validators.value, /*#__PURE__*/function () {
        var _ref5 = _asyncToGenerator(function* (Validator) {
          yield Validator.validate();
        });
        return function (_x2) {
          return _ref5.apply(this, arguments);
        };
      }());
      state.value.validated = true;
    });
    return function validateValidators() {
      return _ref4.apply(this, arguments);
    };
  }();

  /**
   * Validates every child (async).
   *
   * @returns {Promise}
   */
  var validateChildren = /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator(function* () {
      if (form$.value.validation === false) {
        return;
      }
      yield asyncForEach(children$.value, /*#__PURE__*/function () {
        var _ref7 = _asyncToGenerator(function* (element$) {
          /* istanbul ignore else */
          if (!element$.isStatic) {
            yield element$.validate();
          }
        });
        return function (_x3) {
          return _ref7.apply(this, arguments);
        };
      }());
    });
    return function validateChildren() {
      return _ref6.apply(this, arguments);
    };
  }();
  var clean = () => {
    each(children$.value, element$ => {
      /* istanbul ignore next: checked for console errors, but return can not be checked */
      if (element$.isStatic) {
        return;
      }
      element$.clean();
    });
    state.value.dirty = false;
  };
  var clearMessages = () => {
    /* istanbul ignore else */
    if (messageBag.value) {
      messageBag.value.clear();
    }
    each(children$.value, element$ => {
      /* istanbul ignore else */
      if (element$.isStatic) {
        return;
      }
      element$.clearMessages();
    });
  };
  var resetValidators = () => {
    each(children$.value, element$ => {
      /* istanbul ignore next: checked for console errors, but return can not be checked */
      if (element$.isStatic) {
        return;
      }
      element$.resetValidators();
    });
    each(Validators.value, Validator => {
      Validator.reset();
    });
    state.value.validated = !validationRules.value;
  };
  var initMessageBag = () => {
    messageBag.value = new form$.value.$vueform.services.messageBag(baseErrors);
  };
  var reinitValidation = () => {
    initValidation();
    each(children$.value, element$ => {
      /* istanbul ignore next: checked for console errors, but return can not be checked */
      if (element$.isStatic) {
        return;
      }
      element$.reinitValidation();
    });
  };
  return {
    state,
    Validators,
    messageBag,
    resetting,
    dirty,
    validated,
    invalid,
    pending,
    debouncing,
    busy,
    isRequired,
    useCustomFilled,
    isFilled,
    validatorErrors,
    childrenErrors,
    errors,
    error,
    validationRules,
    validate,
    validateValidators,
    validateChildren,
    dirt,
    clean,
    clearMessages,
    resetValidators,
    initMessageBag,
    initValidation,
    reinitValidation
  };
};
var grid = function grid(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var {
    state,
    Validators,
    messageBag,
    resetting,
    dirty,
    validated,
    invalid,
    pending,
    debouncing,
    busy,
    isRequired,
    useCustomFilled,
    isFilled,
    validatorErrors,
    childrenErrors,
    errors,
    validationRules,
    validate,
    validateValidators,
    validateChildren,
    dirt,
    clean,
    clearMessages,
    resetValidators,
    initMessageBag,
    initValidation,
    reinitValidation
  } = list$1(props, context, dependencies);
  var {
    form$,
    children$,
    isTableView
  } = dependencies;

  // ============== COMPUTED ==============

  var error = computed(() => {
    return isTableView.value ? head_1(messageBag.value.errors) : head_1(validatorErrors.value);
  });
  return {
    state,
    Validators,
    messageBag,
    resetting,
    dirty,
    validated,
    invalid,
    pending,
    debouncing,
    busy,
    isRequired,
    useCustomFilled,
    isFilled,
    validatorErrors,
    childrenErrors,
    errors,
    error,
    validationRules,
    validate,
    validateValidators,
    validateChildren,
    dirt,
    clean,
    clearMessages,
    resetValidators,
    initMessageBag,
    initValidation,
    reinitValidation
  };
};
var multilingual$3 = function multilingual(props, context, dependencies) {
  var {
    rules
  } = toRefs(props);
  var config$ = inject('config$');

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var el$ = dependencies.el$;
  var path = dependencies.path;
  var languages = dependencies.languages;
  var language = dependencies.language;
  var value = dependencies.value;
  var {
    messageBag,
    clearMessages,
    resetting,
    useCustomFilled,
    isFilled
  } = text$2(props, context, dependencies);

  // ================ DATA ================

  var state = ref({
    dirty: {},
    validated: {}
  });
  var Validators = ref({});

  // ============== COMPUTED ===============

  var validationRules = computed(() => {
    var ruleList = {};
    if (!rules.value) {
      return ruleList;
    }
    each(languages.value, lang => {
      ruleList[lang] = isPlainObject_1(rules.value) ? rules.value[lang] || null : rules.value;
    });
    return ruleList;
  });

  /**
   * Whether the element's value has been modified in any language.
   *
   * @type {boolean}
   */
  var dirty = computed(() => {
    return some_1(state.value.dirty, val => {
      return val === true;
    });
  });

  /**
   * Whether all the languages have already been validated at least once.
   *
   * @type {boolean}
   */
  var validated = computed(() => {
    return !some_1(state.value.validated, val => {
      return val === false;
    });
  });

  /**
   * Whether the element has failing rules in any language.
   *
   * @type {boolean}
   */
  var invalid = computed(() => {
    var invalid = false;
    each(Validators.value, Validators => {
      if (some_1(Validators, {
        invalid: true
      })) {
        invalid = true;
      }
    });
    return invalid;
  });

  /**
   * Whether the element has any async rules in progress in any language.
   *
   * @type {boolean}
   */
  var pending = computed(() => {
    var pending = false;
    each(Validators.value, Validators => {
      if (some_1(Validators, {
        pending: true
      })) {
        pending = true;
      }
    });
    return pending;
  });

  /**
   * Whether the element has a validation rule with pending debounce in any language.
   *
   * @type {boolean}
   */
  var debouncing = computed(() => {
    var debouncing = false;
    each(Validators.value, Validators => {
      if (some_1(Validators, {
        debouncing: true
      })) {
        debouncing = true;
      }
    });
    return debouncing;
  });

  /**
   * Whether the element is `pending` or `debouncing` in any language.
   *
   * @type {boolean}
   */
  var busy = computed(() => {
    return pending.value || debouncing.value;
  });
  var validatorErrors = computed(() => {
    var errors = [];
    each(Validators.value, (Validators, language) => {
      each(Validators, Validator => {
        if (Validator.failing) {
          errors.push(Validator.message + ' (' + language + ')');
        }
      });
    });
    return errors;
  });
  var errors = computed(() => {
    return messageBag.value.errors;
  });
  var error = computed(() => {
    var error = null;
    each(Validators.value[language.value], Validator => {
      if (error !== null) {
        return false;
      }
      if (Validator.failing) {
        error = Validator.message;
      }
    });
    var errors = messageBag.value.prepends ? messageBag.value.prepends.errors : [];
    if (error !== null) {
      errors = concat_1(errors, [error]);
    }
    errors = concat_1(errors, messageBag.value.appends ? messageBag.value.appends.errors : []);
    return head_1(errors);
  });

  /**
   * Whether the field has errors.
   *
   * @type {boolean}
   */
  var isDanger = computed(() => {
    return error.value !== null && error.value !== undefined;
  });

  /**
   * Whether the field has been filled in successfully.
   *
   * @type {boolean}
   */
  var isSuccess = computed(() => {
    return validationRules.value[language.value] && validationRules.value[language.value].length > 0 && state.value.validated[language.value] && !some_1(Validators.value[language.value], {
      invalid: true
    }) || (!validationRules.value[language.value] || !validationRules.value[language.value].length) && state.value.dirty[language.value];
  });
  var isRequired = computed(() => {
    var _Validators$value;
    return (_Validators$value = Validators.value) === null || _Validators$value === void 0 || (_Validators$value = _Validators$value[language.value]) === null || _Validators$value === void 0 ? void 0 : _Validators$value.some(Validator => {
      var _Validator$conditions2;
      if (Validator.name !== 'required') {
        return;
      }
      if (!((_Validator$conditions2 = Validator.conditions) !== null && _Validator$conditions2 !== void 0 && _Validator$conditions2.length)) {
        return true;
      }
      return Validator.conditions(form$.value, Validator, el$.value);
    });
  });

  // =============== METHODS ===============

  /**
   * Checks each validation rule for the element in every language (async).
   *
   * @returns {Promise}
   */
  var validate = /*#__PURE__*/function () {
    var _ref8 = _asyncToGenerator(function* () {
      if (resetting.value) {
        resetting.value = false;
        return;
      }
      yield asyncForEach(languages.value, /*#__PURE__*/function () {
        var _ref9 = _asyncToGenerator(function* (lang) {
          yield validateLanguage(lang);
        });
        return function (_x4) {
          return _ref9.apply(this, arguments);
        };
      }());
    });
    return function validate() {
      return _ref8.apply(this, arguments);
    };
  }();

  /**
   * Checks each validation rule for the element in a specific language (async).
   *
   * @param {string} lang the language to check (defaults to currently selected language)
   * @returns {Promise}
   */
  var validateLanguage = /*#__PURE__*/function () {
    var _ref10 = _asyncToGenerator(function* () {
      var lang = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : language.value;
      if (form$.value.validation === false) {
        return;
      }
      if (!Validators.value[lang]) {
        return;
      }
      yield asyncForEach(Validators.value[lang], /*#__PURE__*/function () {
        var _ref11 = _asyncToGenerator(function* (Validator) {
          yield Validator.validate(value.value[lang]);
        });
        return function (_x5) {
          return _ref11.apply(this, arguments);
        };
      }());
      state.value.validated[lang] = true;
    });
    return function validateLanguage() {
      return _ref10.apply(this, arguments);
    };
  }();
  var resetValidators = () => {
    each(languages.value, lang => {
      each(Validators.value[lang], Validator => {
        Validator.reset();
      });
      each(validationRules.value, (r, lang) => {
        state.value.validated[lang] = r.length > 0 ? false : true; // @todo:adam missing null check
      });
    });
  };
  var dirt = () => {
    state.value.dirty[language.value] = true;
  };
  var clean = () => {
    state.value.dirty[language.value] = false;
  };

  /**
   * Inits the default `state` object.
   *
   * @returns {void}
   * @private
   */
  var initState = () => {
    var dirty = {};
    var validated = {};
    each(languages.value, lang => {
      dirty[lang] = false;
    });
    each(languages.value, lang => {
      validated[lang] = true;
    });
    state.value = {
      dirty,
      validated
    };
  };
  var initMessageBag = () => {
    messageBag.value = new form$.value.$vueform.services.messageBag(validatorErrors);
  };
  var initValidation = () => {
    /* istanbul ignore next: can not be null or false */
    if (!validationRules.value) {
      return;
    }

    // If the element has rules it does not
    // qualify as validated by default
    each(validationRules.value, (r, lang) => {
      state.value.validated[lang] = r !== null && r.length > 0 ? false : true;
    });
    var factory = new form$.value.$vueform.services.validation.factory(path.value, form$.value, config$.value);
    Validators.value = {};
    each(validationRules.value, (languageRules, lang) => {
      if (languageRules === null) {
        return;
      }

      /* istanbul ignore else */
      if (!Validators.value[lang]) {
        Validators.value = Object.assign({}, Validators.value, {
          [lang]: []
        });
      }
      each(factory.makeAll(languageRules), Validator => {
        Validators.value[lang].push(Validator);
      });
    });
  };
  var reinitValidation = () => {
    initValidation();
  };
  return {
    state,
    Validators,
    messageBag,
    resetting,
    dirty,
    validated,
    invalid,
    pending,
    debouncing,
    busy,
    errors,
    error,
    validationRules,
    isDanger,
    isSuccess,
    isRequired,
    useCustomFilled,
    isFilled,
    validate,
    validateLanguage,
    dirt,
    clean,
    clearMessages,
    resetValidators,
    initState,
    initMessageBag,
    initValidation,
    reinitValidation
  };
};
var slider$1 = function slider(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var value = dependencies.value;
  var {
    state,
    Validators,
    messageBag,
    resetting,
    dirty,
    validated,
    invalid,
    pending,
    busy,
    isRequired,
    useCustomFilled,
    isFilled,
    errors,
    error,
    validationRules,
    dirt,
    clean,
    clearMessages,
    resetValidators,
    initMessageBag,
    initValidation,
    reinitValidation
  } = base$I(props, context, dependencies);

  // =============== METHODS ==============

  var validate = /*#__PURE__*/function () {
    var _ref12 = _asyncToGenerator(function* () {
      if (!validationRules.value) {
        return;
      }
      if (resetting.value) {
        resetting.value = false;
        return;
      }
      if (isArray_1(value.value)) {
        // going through each value of the slider
        // and validate them all for the same field
        yield asyncForEach(value.value, /*#__PURE__*/function () {
          var _ref13 = _asyncToGenerator(function* (val) {
            yield asyncForEach(Validators.value, /*#__PURE__*/function () {
              var _ref14 = _asyncToGenerator(function* (Validator) {
                yield Validator.validate(val);
              });
              return function (_x7) {
                return _ref14.apply(this, arguments);
              };
            }());
            if (invalid.value) {
              return false;
            }
          });
          return function (_x6) {
            return _ref13.apply(this, arguments);
          };
        }());
      } else {
        yield asyncForEach(Validators.value, /*#__PURE__*/function () {
          var _ref15 = _asyncToGenerator(function* (Validator) {
            yield Validator.validate(value.value);
          });
          return function (_x8) {
            return _ref15.apply(this, arguments);
          };
        }());
      }
      state.value.validated = true;
    });
    return function validate() {
      return _ref12.apply(this, arguments);
    };
  }();
  return {
    state,
    Validators,
    messageBag,
    resetting,
    dirty,
    validated,
    invalid,
    pending,
    busy,
    isRequired,
    useCustomFilled,
    isFilled,
    errors,
    error,
    validationRules,
    validate,
    dirt,
    clean,
    clearMessages,
    resetValidators,
    initMessageBag,
    initValidation,
    reinitValidation
  };
};
var file$1 = function file(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var value = dependencies.value;
  var uploading = dependencies.uploading;
  var removing = dependencies.removing;
  var {
    state,
    Validators,
    messageBag,
    resetting,
    dirty,
    validated,
    invalid,
    pending,
    isRequired,
    useCustomFilled,
    isFilled,
    errors,
    error,
    validationRules,
    dirt,
    clean,
    clearMessages,
    resetValidators,
    initMessageBag,
    initValidation,
    reinitValidation
  } = base$I(props, context, dependencies);

  // ============== COMPUTED ==============

  /**
   * Whether the element is `pending`, `debouncing`, `uploading` or `removing`.
   *
   * @type {boolean}
   */
  var busy = computed(() => {
    return pending.value || uploading.value || removing.value;
  });

  // =============== METHODS ==============

  /**
   * Checks each validation rule for the element (async). File element will only validate for `min`, `max`, `between`, `size`, `mimetypes`, `mimes`, `dimensions`, `file`, `image`, `gt`, `gte`, `lt` and `lte` rules and only before the temporary files are uploaded.
   *
   * @returns {Promise}
   */
  var validate = /*#__PURE__*/function () {
    var _ref16 = _asyncToGenerator(function* () {
      if (!validationRules.value) {
        return;
      }
      if (form$.value.validation === false) {
        return;
      }
      if (resetting.value) {
        resetting.value = false;
        return;
      }
      var restricted = ['min', 'max', 'between', 'size', 'mimetypes', 'mimes', 'dimensions', 'file', 'image', 'gt', 'gte', 'lt', 'lte'];
      yield asyncForEach(Validators.value, /*#__PURE__*/function () {
        var _ref17 = _asyncToGenerator(function* (Validator) {
          if (!(value.value instanceof File) && !!value.value && restricted.indexOf(Validator.name) !== -1) {
            return;
          }
          yield Validator.validate();
        });
        return function (_x9) {
          return _ref17.apply(this, arguments);
        };
      }());
      state.value.validated = true;
    });
    return function validate() {
      return _ref16.apply(this, arguments);
    };
  }();
  return {
    state,
    Validators,
    messageBag,
    resetting,
    dirty,
    validated,
    invalid,
    pending,
    busy,
    isRequired,
    useCustomFilled,
    isFilled,
    errors,
    error,
    validationRules,
    validate,
    dirt,
    clean,
    clearMessages,
    resetValidators,
    initMessageBag,
    initValidation,
    reinitValidation
  };
};
var location = function location(props, context, dependencies) {
  var {
    displayKey
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var value = dependencies.value;
  var {
    state,
    Validators,
    messageBag,
    resetting,
    dirty,
    validated,
    invalid,
    pending,
    debouncing,
    busy,
    isRequired,
    useCustomFilled,
    isFilled,
    errors,
    error,
    validationRules,
    isSuccess,
    isDanger,
    dirt,
    clean,
    clearMessages,
    resetValidators,
    initMessageBag,
    initValidation,
    reinitValidation
  } = text$2(props, context, dependencies);

  // =============== METHODS ==============

  /**
   * Checks each validation rule for the element on [`displayKey`](#option-display-key) property of the location object (async).
   *
   * @returns {Promise}
   */
  var validate = /*#__PURE__*/function () {
    var _ref18 = _asyncToGenerator(function* () {
      if (!validationRules.value) {
        return;
      }
      if (form$.value.validation === false) {
        return;
      }
      if (resetting.value) {
        resetting.value = false;
        return;
      }
      yield asyncForEach(Validators.value, /*#__PURE__*/function () {
        var _ref19 = _asyncToGenerator(function* (Validator) {
          yield Validator.validate(value.value[displayKey.value]);
        });
        return function (_x10) {
          return _ref19.apply(this, arguments);
        };
      }());
      state.value.validated = true;
    });
    return function validate() {
      return _ref18.apply(this, arguments);
    };
  }();
  return {
    state,
    Validators,
    messageBag,
    resetting,
    dirty,
    validated,
    invalid,
    pending,
    debouncing,
    busy,
    isRequired,
    useCustomFilled,
    isFilled,
    errors,
    error,
    validationRules,
    isSuccess,
    isDanger,
    validate,
    dirt,
    clean,
    clearMessages,
    resetValidators,
    initMessageBag,
    initValidation,
    reinitValidation
  };
};
var matrix$3 = function matrix(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var {
    value,
    dataType
  } = dependencies;
  var {
    state,
    Validators,
    messageBag,
    resetting,
    dirty,
    validated,
    invalid,
    pending,
    debouncing,
    busy,
    isRequired,
    validatorErrors,
    childrenErrors,
    errors,
    validationRules,
    validate,
    validateValidators,
    validateChildren,
    dirt,
    clean,
    clearMessages,
    resetValidators,
    initMessageBag,
    initValidation,
    reinitValidation
  } = object$3(props, context, dependencies);

  // ============== COMPUTED ==============

  var error = computed(() => {
    var _errors$value;
    return (_errors$value = errors.value) === null || _errors$value === void 0 ? void 0 : _errors$value[0];
  });
  var useCustomFilled = computed(() => {
    return true;
  });
  var isFilled = computed(() => {
    switch (dataType.value) {
      case 'assoc':
        return Object.values(value.value).every(v => v !== null);
      case 'array':
        return Object.values(value.value).every(v => v.length);
      case 'object':
        return Object.values(value.value).every(v => Object.values(v).every(sv => {
          if (Array.isArray(sv)) {
            return sv.length;
          } else if (sv instanceof File) {
            return sv.name !== '';
          } else if (typeof sv === 'string') {
            return sv.trim() !== '';
          } else {
            return sv !== undefined && sv !== null;
          }
        }));
    }
  });
  return {
    state,
    Validators,
    messageBag,
    resetting,
    dirty,
    validated,
    invalid,
    pending,
    debouncing,
    busy,
    isRequired,
    useCustomFilled,
    isFilled,
    validatorErrors,
    childrenErrors,
    errors,
    error,
    validationRules,
    validate,
    validateValidators,
    validateChildren,
    dirt,
    clean,
    clearMessages,
    resetValidators,
    initMessageBag,
    initValidation,
    reinitValidation
  };
};
var group$3 = list$1;
var object$3 = list$1;

var base$H = function base(props, context, dependencies) {
  var {
    default: default_,
    name
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var {
    nullValue,
    form$,
    parent
  } = dependencies;

  // ============== COMPUTED ===============

  /**
   * The default value of the element.
   *
   * @type {any}
   * @private
   */
  var defaultValue = computed(() => {
    var parentDefaultValue;
    if (parent && parent.value && parent.value.isMatrixType) {
      var row = parent.value.resolvedRows[getRowKey(name.value)];
      var col = parent.value.resolvedColumns[getColKey(name.value)];
      var rowModel = parent.value.defaultValue[row.value];
      switch (parent.value.dataType) {
        case 'assoc':
          parentDefaultValue = rowModel === col.value ? true : null;
          break;
        case 'array':
          parentDefaultValue = Array.isArray(rowModel) && rowModel.includes(col.value);
          break;
        default:
          parentDefaultValue = rowModel === null || rowModel === void 0 ? void 0 : rowModel[col.value];
          break;
      }
    } else if (parent && parent.value) {
      var _parent$value$default;
      parentDefaultValue = (_parent$value$default = parent.value.defaultValue) === null || _parent$value$default === void 0 ? void 0 : _parent$value$default[name.value];
    } else if (form$.value.options.default[name.value] !== undefined) {
      parentDefaultValue = form$.value.options.default[name.value];
    }
    if (parentDefaultValue !== undefined) {
      return parentDefaultValue instanceof File ? new File([parentDefaultValue], parentDefaultValue.name, parentDefaultValue) : cloneDeep_1(parentDefaultValue);
    }
    if (default_.value !== undefined) {
      return default_.value instanceof File ? new File([default_.value], default_.value.name, default_.value) : cloneDeep_1(default_.value);
    }
    return cloneDeep_1(nullValue.value);
  });
  return {
    defaultValue
  };
};
var text$1 = function text(props, context, dependencies) {
  var {
    default: default_,
    name
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var nullValue = dependencies.nullValue;
  var form$ = dependencies.form$;
  var parent = dependencies.parent;

  // =============== INJECT ===============

  var config$ = inject('config$');

  // ============== COMPUTED ===============

  /**
   * The default value of the element.
   *
   * @type {any}
   * @private
   */
  var defaultValue = computed(() => {
    var parentDefaultValue;
    if (parent && parent.value && parent.value.isMatrixType) {
      var row = parent.value.resolvedRows[getRowKey(name.value)];
      var col = parent.value.resolvedColumns[getColKey(name.value)];
      var rowModel = parent.value.defaultValue[row.value];
      switch (parent.value.dataType) {
        case 'assoc':
          parentDefaultValue = rowModel === col.value ? true : null;
          break;
        case 'array':
          parentDefaultValue = Array.isArray(rowModel) && rowModel.includes(col.value);
          break;
        default:
          parentDefaultValue = rowModel === null || rowModel === void 0 ? void 0 : rowModel[col.value];
          break;
      }
    } else if (parent && parent.value) {
      parentDefaultValue = parent.value.defaultValue[name.value];
    } else if (form$.value.options.default[name.value] !== undefined) {
      parentDefaultValue = form$.value.options.default[name.value];
    }
    if (parentDefaultValue !== undefined) {
      return parentDefaultValue instanceof File ? new File([parentDefaultValue], parentDefaultValue.name, parentDefaultValue) : isPlainObject_1(parentDefaultValue) ? localize(cloneDeep_1(parentDefaultValue), config$.value, form$.value) : cloneDeep_1(parentDefaultValue);
    }

    /* istanbul ignore else */
    if (default_.value !== undefined) {
      /* istanbul ignore next: text can not have File as default */
      return default_.value instanceof File ? new File([default_.value], default_.value.name, default_.value) : isPlainObject_1(default_.value) ? localize(cloneDeep_1(default_.value), config$.value, form$.value) : cloneDeep_1(default_.value);
    }

    /* istanbul ignore next: text will never fall into this case, because `default_.value` is never undefined but null */
    return cloneDeep_1(nullValue.value);
  });
  return {
    defaultValue
  };
};
var object$2 = function object(props, context, dependencies) {
  var {
    default: default_,
    name
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var nullValue = dependencies.nullValue;
  var form$ = dependencies.form$;
  var parent = dependencies.parent;

  // ============== COMPUTED ===============

  var defaultValue = computed(() => {
    var parentDefaultValue;
    if (parent && parent.value) {
      parentDefaultValue = parent.value.defaultValue[name.value];
    } else if (form$.value.options.default[name.value]) {
      parentDefaultValue = form$.value.options.default[name.value];
    }
    if (parentDefaultValue !== undefined) {
      return cloneDeep_1(merge_1({}, default_.value || /* istanbul ignore next: `default_.value` will never be undefined, because it is a hardwired `{}` */nullValue.value, parentDefaultValue));
    }
    if (Object.keys(default_.value).length > 0) {
      return cloneDeep_1(default_.value);
    }
    return cloneDeep_1(nullValue.value);
  });
  return {
    defaultValue
  };
};
var matrix$2 = function matrix(props, context, dependencies) {
  var {
    name,
    default: default_
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var {
    nullValue,
    form$,
    parent,
    hasDynamicRows,
    computedRows,
    resolvedRows,
    resolvedColumns,
    rowsCount,
    dataType,
    el$
  } = dependencies;

  // ============== COMPUTED ===============

  var defaultValue = computed(() => {
    var parentDefaultValue;
    if (parent && parent.value) {
      parentDefaultValue = parent.value.defaultValue[name.value];
    } else if (form$.value.options.default[name.value]) {
      parentDefaultValue = form$.value.options.default[name.value];
    }
    var defaultValue = parentDefaultValue || cloneDeep_1(default_.value);
    if (Object.keys(defaultValue).length) {
      return defaultValue;
    }
    resolvedRows.value.forEach((row, r) => {
      resolvedColumns.value.forEach((col, c) => {
        var _defaultValue$row$val;
        switch (dataType.value) {
          case 'assoc':
            defaultValue[row.value] = defaultValue[row.value] === col.value ? col.value : null;
            break;
          case 'array':
            defaultValue[row.value] = [...(defaultValue[row.value] || []), ...(defaultValue[row.value] && defaultValue[row.value].indexOf(col.value) !== -1 ? [col.value] : [])];
            break;
          default:
            defaultValue[row.value] = _objectSpread2$1(_objectSpread2$1({}, defaultValue[row.value] || {}), {}, {
              [col.value]: ((_defaultValue$row$val = defaultValue[row.value]) === null || _defaultValue$row$val === void 0 ? void 0 : _defaultValue$row$val[col.value]) || undefined
            });
        }
      });
    });
    return defaultValue;
  });
  return {
    defaultValue
  };
};
var group$2 = function group(props, context, dependencies) {
  var {
    default: default_
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var form$ = dependencies.form$;
  var parent = dependencies.parent;

  // ============== COMPUTED ===============

  var defaultValue = computed(() => {
    var parentDefaultValue = {};
    if (parent && parent.value) {
      parentDefaultValue = parent.value.defaultValue;
    } else if (form$.value.options.default) {
      //@todo:adam
      parentDefaultValue = form$.value.options.default;
    }
    return cloneDeep_1(merge_1({}, default_.value, parentDefaultValue));
  });
  return {
    defaultValue
  };
};
var multilingual$2 = function multilingual(props, context, dependencies) {
  var {
    default: default_,
    name
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var nullValue = dependencies.nullValue;
  var form$ = dependencies.form$;
  var parent = dependencies.parent;

  // ============== COMPUTED ===============

  var defaultValue = computed(() => {
    var parentDefaultValue;
    if (parent && parent.value) {
      parentDefaultValue = parent.value.defaultValue[name.value];
    } else if (form$.value.options.default[name.value]) {
      parentDefaultValue = form$.value.options.default[name.value];
    }
    if (parentDefaultValue !== undefined) {
      return cloneDeep_1(Object.assign({}, clone_1(nullValue.value), parentDefaultValue));
    }
    if (default_.value === undefined) {
      return clone_1(nullValue.value);
    }
    var def = clone_1(default_.value);
    if (!isPlainObject_1(def)) {
      var tempDefault = {};
      each(nullValue.value, (v, language) => {
        tempDefault[language] = def;
      });
      def = tempDefault;
    }
    return Object.assign({}, clone_1(nullValue.value), def);
  });
  return {
    defaultValue
  };
};
var hidden$1 = text$1;

var base$G = function base(props, context, dependencies) {
  var {
    readonly
  } = toRefs(props);
  var {
    el$,
    form$,
    path
  } = dependencies;

  // ============== COMPUTED ==============

  /**
   * Whether the element is readonly.
   *
   * @type {boolean}
   */
  var isReadonly = computed(() => {
    if (typeof readonly.value === 'function') {
      return readonly.value(el$.value, form$.value);
    }
    if (Array.isArray(readonly.value)) {
      return readonly.value.every(condition => {
        return form$.value.$vueform.services.condition.check(condition, path.value, form$.value, el$.value);
      });
    }
    if (typeof readonly.value === 'object' && readonly.value && readonly.value.value !== undefined) {
      return readonly.value.value;
    }
    return readonly.value;
  });
  return {
    isReadonly
  };
};

/**
 * The base implementation of `_.sortBy` which uses `comparer` to define the
 * sort order of `array` and replaces criteria objects with their corresponding
 * values.
 *
 * @private
 * @param {Array} array The array to sort.
 * @param {Function} comparer The function to define sort order.
 * @returns {Array} Returns `array`.
 */

function baseSortBy$1(array, comparer) {
  var length = array.length;

  array.sort(comparer);
  while (length--) {
    array[length] = array[length].value;
  }
  return array;
}

var _baseSortBy = baseSortBy$1;

var isSymbol = isSymbol_1;

/**
 * Compares values to sort them in ascending order.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {number} Returns the sort order indicator for `value`.
 */
function compareAscending$1(value, other) {
  if (value !== other) {
    var valIsDefined = value !== undefined,
        valIsNull = value === null,
        valIsReflexive = value === value,
        valIsSymbol = isSymbol(value);

    var othIsDefined = other !== undefined,
        othIsNull = other === null,
        othIsReflexive = other === other,
        othIsSymbol = isSymbol(other);

    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
        (valIsNull && othIsDefined && othIsReflexive) ||
        (!valIsDefined && othIsReflexive) ||
        !valIsReflexive) {
      return 1;
    }
    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
        (othIsNull && valIsDefined && valIsReflexive) ||
        (!othIsDefined && valIsReflexive) ||
        !othIsReflexive) {
      return -1;
    }
  }
  return 0;
}

var _compareAscending = compareAscending$1;

var compareAscending = _compareAscending;

/**
 * Used by `_.orderBy` to compare multiple properties of a value to another
 * and stable sort them.
 *
 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
 * specify an order of "desc" for descending or "asc" for ascending sort order
 * of corresponding values.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {boolean[]|string[]} orders The order to sort by for each property.
 * @returns {number} Returns the sort order indicator for `object`.
 */
function compareMultiple$1(object, other, orders) {
  var index = -1,
      objCriteria = object.criteria,
      othCriteria = other.criteria,
      length = objCriteria.length,
      ordersLength = orders.length;

  while (++index < length) {
    var result = compareAscending(objCriteria[index], othCriteria[index]);
    if (result) {
      if (index >= ordersLength) {
        return result;
      }
      var order = orders[index];
      return result * (order == 'desc' ? -1 : 1);
    }
  }
  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
  // that causes it, under certain circumstances, to provide the same value for
  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
  // for more details.
  //
  // This also ensures a stable sort in V8 and other engines.
  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
  return object.index - other.index;
}

var _compareMultiple = compareMultiple$1;

var arrayMap = _arrayMap,
    baseGet = _baseGet,
    baseIteratee = _baseIteratee,
    baseMap = _baseMap,
    baseSortBy = _baseSortBy,
    baseUnary = _baseUnary,
    compareMultiple = _compareMultiple,
    identity = identity_1,
    isArray = isArray_1;

/**
 * The base implementation of `_.orderBy` without param guards.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
 * @param {string[]} orders The sort orders of `iteratees`.
 * @returns {Array} Returns the new sorted array.
 */
function baseOrderBy$1(collection, iteratees, orders) {
  if (iteratees.length) {
    iteratees = arrayMap(iteratees, function(iteratee) {
      if (isArray(iteratee)) {
        return function(value) {
          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
        }
      }
      return iteratee;
    });
  } else {
    iteratees = [identity];
  }

  var index = -1;
  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));

  var result = baseMap(collection, function(value, key, collection) {
    var criteria = arrayMap(iteratees, function(iteratee) {
      return iteratee(value);
    });
    return { 'criteria': criteria, 'index': ++index, 'value': value };
  });

  return baseSortBy(result, function(object, other) {
    return compareMultiple(object, other, orders);
  });
}

var _baseOrderBy = baseOrderBy$1;

var baseFlatten = _baseFlatten,
    baseOrderBy = _baseOrderBy,
    baseRest = _baseRest,
    isIterateeCall = _isIterateeCall;

/**
 * Creates an array of elements, sorted in ascending order by the results of
 * running each element in a collection thru each iteratee. This method
 * performs a stable sort, that is, it preserves the original sort order of
 * equal elements. The iteratees are invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {...(Function|Function[])} [iteratees=[_.identity]]
 *  The iteratees to sort by.
 * @returns {Array} Returns the new sorted array.
 * @example
 *
 * var users = [
 *   { 'user': 'fred',   'age': 48 },
 *   { 'user': 'barney', 'age': 36 },
 *   { 'user': 'fred',   'age': 30 },
 *   { 'user': 'barney', 'age': 34 }
 * ];
 *
 * _.sortBy(users, [function(o) { return o.user; }]);
 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
 *
 * _.sortBy(users, ['user', 'age']);
 * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
 */
var sortBy = baseRest(function(collection, iteratees) {
  if (collection == null) {
    return [];
  }
  var length = iteratees.length;
  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
    iteratees = [];
  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
    iteratees = [iteratees[0]];
  }
  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
});

var sortBy_1 = sortBy;

var base$F = function base(props, context, dependencies) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var {
    submit,
    formatData,
    formatLoad,
    name
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var form$ = dependencies.form$;
  var available = dependencies.available;
  var value = dependencies.value;
  var resetValidators = dependencies.resetValidators;
  var defaultValue = dependencies.defaultValue;
  var nullValue = dependencies.nullValue;
  var resetting = dependencies.resetting;
  var isDefault = dependencies.isDefault;
  var fire = dependencies.fire;
  var el$ = dependencies.el$;

  // =============== PRIVATE ===============

  /**
   * Sets the value of the element.
   *
   *
   * @param {any} val the value to be set
   * @returns {void}
   * @private
   */
  var setValue = val => {
    if (options.setValue) {
      return options.setValue(val);
    }
    value.value = val;
  };

  // ============== COMPUTED ===============

  /**
   * The value of the element in `{[name]: value}` value format. This gets merged with the parent component's data.
   *
   * @type {object}
   */
  var data = computed(() => {
    return {
      [name.value]: value.value
    };
  });

  /**
   * Same as `data` property except that it only includes the element's value if [`submit`](#option-submit) is not disabled and [`available`](#property-available) is `true` (has no [`conditions`](#option-conditions) or they are fulfilled).
   *
   * @type {object}
   */
  var requestData = computed(() => {
    if (!available.value || !submit.value) {
      return {};
    }
    return formatData.value ? formatData.value(name.value, value.value, form$.value) : {
      [name.value]: value.value
    };
  });

  // =============== METHODS ===============

  /**
   * Loads value to the element using optional [`formatLoad`](#option-format-load) formatter. This is the method that gets called for each element when loading data to the form with `format: true`.
   *
   * @param {any} value* the value to be loaded
   * @param {boolean} format whether the loaded value should be formatted with [`formatLoad`](#option-format-load) before setting the value of the element (default: `false`)
   * @returns {void}
   */
  var load = function load(val) {
    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    setValue(format && formatLoad.value ? formatLoad.value(val, form$.value) : val);
  };

  /**
   * Updates the value of the element similarly to [`load`](#method-load), only that it can\'t format data.
   *
   * @param {any} value* the value to be set
   * @returns {void}
   */
  var update = val => {
    setValue(val);
  };

  /**
   * Clears the element's value.
   *
   * @returns {void}
   */
  var clear = () => {
    setValue(cloneDeep_1(nullValue.value));
    fire("clear", el$.value);
  };

  /**
   * Resets the element's value to [`default`](#option-default) (or empty if `default` is not provided). Also resets all the validation state for the element.
   *
   * @returns {void}
   */
  var reset = () => {
    if (!isDefault.value) {
      resetting.value = true;
    }
    setValue(cloneDeep_1(defaultValue.value));
    resetValidators();
    fire("reset", el$.value);
  };

  /**
   * Prepares the element.
   *
   * @returns {Promise}
   * @private
   */
  /* istanbul ignore next:@todo:adam missing implementation, but used in code */
  var prepare = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* () {});
    return function prepare() {
      return _ref.apply(this, arguments);
    };
  }();
  return {
    data,
    requestData,
    load,
    update,
    clear,
    reset,
    prepare
  };
};
var text = function text(props, context, dependencies) {
  var {
    submit,
    formatData,
    name
  } = toRefs(props);
  var {
    load,
    update,
    clear,
    reset,
    prepare
  } = base$F(props, context, dependencies);

  // ============ DEPENDENCIES =============

  var {
    form$,
    available,
    value,
    shouldForceNumbers,
    stringToNumber
  } = dependencies;

  // =============== COMPUTED ==============

  var data = computed(() => {
    var v = value.value;
    if (shouldForceNumbers()) {
      v = stringToNumber(value.value);
    }
    return {
      [name.value]: v
    };
  });
  var requestData = computed(() => {
    if (!available.value || !submit.value) {
      return {};
    }
    var v = value.value;
    if (shouldForceNumbers()) {
      v = stringToNumber(value.value);
    }
    return formatData.value ? formatData.value(name.value, v, form$.value) : {
      [name.value]: v
    };
  });
  return {
    data,
    requestData,
    load,
    update,
    clear,
    reset,
    prepare
  };
};
var textarea = function textarea(props, context, dependencies) {
  var {
    data,
    requestData,
    load: baseLoad,
    update: baseUpdate,
    clear: baseClear,
    reset: baseReset,
    prepare
  } = base$F(props, context, dependencies);

  // ============ DEPENDENCIES =============

  var {
    autosize,
    fire,
    el$
  } = dependencies;

  // =============== METHODS ===============

  var load = function load(val) {
    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    baseLoad(val, format);
    nextTick(() => {
      autosize();
    });
  };
  var update = val => {
    baseUpdate(val);
    nextTick(() => {
      autosize();
    });
  };
  var clear = () => {
    baseClear();
    nextTick(() => {
      autosize();
    });
    fire("clear", el$.value);
  };
  var reset = () => {
    baseReset();
    nextTick(() => {
      autosize();
    });
    fire("reset", el$.value);
  };
  return {
    data,
    requestData,
    load,
    update,
    clear,
    reset,
    prepare
  };
};
var select$3 = function select(props, context, dependencies) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var {
    resolveOnLoad,
    items
  } = toRefs(props);
  var {
    data,
    requestData,
    load,
    update,
    clear,
    prepare
  } = base$F(props, context, dependencies);

  // ============ DEPENDENCIES =============

  var value = dependencies.value;
  var resetValidators = dependencies.resetValidators;
  var defaultValue = dependencies.defaultValue;
  var updateItems = dependencies.updateItems;
  var resetting = dependencies.resetting;
  var isDefault = dependencies.isDefault;
  var fire = dependencies.fire;
  var el$ = dependencies.el$;

  // =============== PRIVATE ===============

  var setValue = val => {
    if (options.setValue) {
      return options.setValue(val);
    }
    value.value = val;
  };

  // =============== METHODS ===============

  var reset = () => {
    if (!isDefault.value) {
      resetting.value = true;
    }
    setValue(cloneDeep_1(defaultValue.value));
    resetValidators();
    if (typeof items.value === "string" && resolveOnLoad.value !== false) {
      updateItems();
    }
    fire("reset", el$.value);
  };
  return {
    data,
    requestData,
    load,
    update,
    clear,
    reset,
    prepare
  };
};
var captcha = function captcha(props, context, dependencies) {
  var {
    data,
    requestData,
    load,
    update,
    clear: clearBase,
    reset: resetBase,
    prepare
  } = base$F(props, context, dependencies);

  // ============ DEPENDENCIES =============

  var {
    Provider,
    fire,
    el$
  } = dependencies;

  // =============== METHODS ===============

  var clear = () => {
    clearBase();
    if (!Provider.value) {
      return;
    }
    Provider.value.reset();
    fire("clear", el$.value);
  };
  var reset = () => {
    resetBase();
    if (!Provider.value) {
      return;
    }
    Provider.value.reset();
    fire("reset", el$.value);
  };
  return {
    data,
    requestData,
    load,
    update,
    clear,
    reset,
    prepare
  };
};
var object$1 = function object(props, context, dependencies) {
  var {
    name,
    formatLoad,
    formatData,
    submit
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var form$ = dependencies.form$;
  var available = dependencies.available;
  var children$ = dependencies.children$;
  var children$Array = dependencies.children$Array;
  var resetting = dependencies.resetting;
  var isDefault = dependencies.isDefault;
  var fire = dependencies.fire;
  var el$ = dependencies.el$;

  // ============== COMPUTED ===============

  var data = computed(() => {
    var data = {};
    each(children$.value, element$ => {
      if (element$.isStatic) {
        return;
      }
      data = Object.assign({}, data, element$.data);
    });
    return {
      [name.value]: data
    };
  });
  var requestData = computed(() => {
    if (!available.value || !submit.value) {
      return {};
    }
    var requestData = {};
    each(children$.value, element$ => {
      if (element$.isStatic) {
        return;
      }
      requestData = Object.assign({}, requestData, element$.requestData);
    });
    return formatData.value ? formatData.value(name.value, requestData, form$.value) : {
      [name.value]: requestData
    };
  });

  // =============== METHODS ===============

  var load = function load(val) {
    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var formatted = format && formatLoad.value ? formatLoad.value(val, form$.value) : val;
    each(children$.value, element$ => {
      if (element$.isStatic) {
        return;
      }
      if (!element$.flat && formatted[element$.name] === undefined) {
        element$.clear();
        return;
      }
      element$.load(element$.flat ? formatted : formatted[element$.name], format);
    });
  };
  var update = val => {
    each(children$.value, element$ => {
      if (element$.isStatic) {
        return;
      }
      if (val[element$.name] === undefined && !element$.flat) {
        return;
      }
      element$.update(element$.flat ? val : val[element$.name]);
    });
  };
  var clear = () => {
    each(children$.value, element$ => {
      if (element$.isStatic) {
        return;
      }
      element$.clear();
    });
    fire("clear", el$.value);
  };
  var reset = () => {
    if (!isDefault.value) {
      resetting.value = true;
    }
    each(children$.value, element$ => {
      if (element$.isStatic) {
        return;
      }
      element$.reset();
    });
    fire("reset", el$.value);
  };
  var prepare = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(function* () {
      yield asyncForEach(children$Array.value, /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator(function* (e$) {
          if (e$.prepare) {
            yield e$.prepare();
          }
        });
        return function (_x) {
          return _ref3.apply(this, arguments);
        };
      }());
    });
    return function prepare() {
      return _ref2.apply(this, arguments);
    };
  }();
  return {
    data,
    requestData,
    load,
    update,
    clear,
    reset,
    prepare
  };
};
var group$1 = function group(props, context, dependencies) {
  var {
    name,
    formatData,
    submit
  } = toRefs(props);
  var {
    load,
    update,
    clear,
    reset,
    prepare
  } = object$1(props, context, dependencies);

  // ============ DEPENDENCIES =============

  var form$ = dependencies.form$;
  var children$ = dependencies.children$;
  var available = dependencies.available;
  dependencies.value;

  // ============== COMPUTED ===============

  /**
   * The value of child elements in object. This gets merged with the parent component's data.
   *
   * @type {object}
   */
  var data = computed(() => {
    var data = {};
    each(children$.value, element$ => {
      if (element$.isStatic) {
        return;
      }
      data = Object.assign({}, data, element$.data);
    });
    return data;
  });
  var requestData = computed(() => {
    if (!available.value || !submit.value) {
      return {};
    }
    var requestData = {};
    each(children$.value, element$ => {
      if (element$.isStatic) {
        return;
      }
      requestData = Object.assign({}, requestData, element$.requestData);
    });
    return formatData.value ? formatData.value(name.value, requestData, form$.value) : requestData;
  });
  return {
    data,
    requestData,
    load,
    update,
    clear,
    reset,
    prepare
  };
};
var list = function list(props, context, dependencies, options) {
  var {
    name,
    storeOrder,
    formatLoad,
    formatData,
    order,
    submit,
    initial,
    default: default_
  } = toRefs(props);
  var {
    update,
    clear,
    data
  } = base$F(props, context, dependencies);

  // ============ DEPENDENCIES =============

  var el$ = dependencies.el$;
  var form$ = dependencies.form$;
  var children$ = dependencies.children$;
  var children$Array = dependencies.children$Array;
  var available = dependencies.available;
  var isDisabled = dependencies.isDisabled;
  var value = dependencies.value;
  var orderByName = dependencies.orderByName;
  var refreshOrderStore = dependencies.refreshOrderStore;
  var dataPath = dependencies.dataPath;
  var parent = dependencies.parent;
  var nullValue = dependencies.nullValue;
  var defaultValue = dependencies.defaultValue;
  var fire = dependencies.fire;
  var resetValidators = dependencies.resetValidators;
  var resetting = dependencies.resetting;
  var isDefault = dependencies.isDefault;

  // ================ DATA =================

  var initialValue = ref(get_1(form$.value.model, dataPath.value));

  // ============== COMPUTED ===============

  /**
   * Default value of the parent
   *
   * @type {any}
   * @private
   */
  var parentDefaultValue = computed(() => {
    return parent && parent.value ? parent.value.defaultValue[name.value] : form$.value.options.default[name.value];
  });
  var requestData = computed(() => {
    if (!available.value || !submit.value) {
      return {};
    }
    var requestData = [];
    each(children$.value, element$ => {
      var val = element$.requestData[element$.name];
      if (val !== undefined) {
        requestData.push(val);
      }
    });
    return formatData.value ? formatData.value(name.value, requestData, form$.value) : {
      [name.value]: requestData
    };
  });

  /**
   * Number of children.
   *
   * @type {number}
   * @private
   */
  var length = computed(() => {
    return Object.keys(value.value || /* istanbul ignore next: failsafe only */{}).length;
  });

  // =============== METHODS ===============

  /**
   * Appends a new item.
   *
   * @param {any} value value of the appended element (optional)
   * @returns {number} the index of the appended item
   */
  var add = function add() {
    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
    var focus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var newValue = storeOrder.value ? Object.assign({}, val || {}, {
      [storeOrder.value]: val ? val[storeOrder.value] : undefined
    }) : val;
    value.value = refreshOrderStore(value.value.concat([newValue]));

    // value.value = refreshOrderStore(value.value)

    var index = value.value.length - 1;
    fire("add", index, newValue, value.value, el$.value);
    if (focus) {
      nextTick(() => {
        children$Array.value[children$Array.value.length - 1].focus();
      });
    }
    return index;
  };

  /**
   * Removes an items by its index.
   *
   *
   * @param {number} index* index of items to be removed
   * @returns {void}
   */
  var remove = index => {
    value.value = value.value.filter((v, i) => i !== index);
    refreshOrderStore(value.value);
    fire("remove", index, value.value, el$.value);
  };
  var load = /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator(function* (val) {
      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var values = sortValue(format && formatLoad.value ? formatLoad.value(val, form$.value) : val);
      clear();
      yield nextTick();
      for (var i = 0; i < values.length; i++) {
        add();
      }
      yield nextTick();
      each(children$.value, (child$, i) => {
        child$.load(values[i], format);
      });
    });
    return function load(_x2) {
      return _ref4.apply(this, arguments);
    };
  }();
  var reset = () => {
    if (!isDefault.value) {
      resetting.value = true;
    }
    value.value = cloneDeep_1(defaultValue.value);
    resetValidators();
    if (!value.value.length && initial.value > 0) {
      for (var i = 0; i < initial.value; i++) {
        add();
      }

      // NextTick is no longer required as validation
      // happens with async/await anyway in children
      // nextTick(() => {
      children$Array.value.forEach(child$ => {
        child$.reset();
      });
      // })
    }
    nextTick(() => {
      refreshOrderStore(value.value);
    });
    fire("reset", el$.value);
  };
  var prepare = /*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator(function* () {
      yield asyncForEach(children$Array.value, /*#__PURE__*/function () {
        var _ref6 = _asyncToGenerator(function* (e$) {
          if (e$.prepare) {
            yield e$.prepare();
          }
        });
        return function (_x3) {
          return _ref6.apply(this, arguments);
        };
      }());
    });
    return function prepare() {
      return _ref5.apply(this, arguments);
    };
  }();

  /**
   * Sorts value when `order` and `orderByName` is defined.
   *
   * @param {array} value value to be sorted
   * @returns {array}
   * @private
   */
  var sortValue = val => {
    if (!order.value && !orderByName.value || !val) {
      return val;
    }
    var desc = order.value && typeof order.value === "string" && order.value.toUpperCase() == "DESC";

    /* istanbul ignore else */
    if (orderByName.value) {
      val = desc ? sortBy_1(val, orderByName.value).reverse() : sortBy_1(val, orderByName.value);
    } else if (order.value) {
      val = desc ? val.sort().reverse() : val.sort();
    }
    return val;
  };

  /**
   * Handles the `add` event.
   *
   * @returns {void}
   * @private
   */
  var handleAdd = () => {
    if (isDisabled.value) {
      return;
    }
    add(undefined, true);
  };

  /**
   * Handles the `remove` event.
   *
   * @param {number} index* index of child to be removed
   * @returns {void}
   * @private
   */
  var handleRemove = index => {
    if (isDisabled.value) {
      return;
    }
    remove(index);
  };

  // ================ HOOKS ===============

  if (initialValue.value === undefined && parentDefaultValue.value === undefined && default_.value === undefined) {
    if (initial.value > 0) {
      for (var i = 0; i < initial.value; i++) {
        add();
      }
    } else {
      value.value = nullValue.value;
    }
  } else if (initialValue.value === undefined) {
    value.value = defaultValue.value;
  }
  return {
    requestData,
    data,
    length,
    add,
    remove,
    load,
    update,
    clear,
    reset,
    handleAdd,
    handleRemove,
    prepare
  };
};
var date$2 = function date(props, context, dependencies) {
  var {
    formatLoad
  } = toRefs(props);
  var {
    data,
    requestData,
    update,
    clear,
    reset,
    prepare
  } = base$F(props, context, dependencies);

  // ============ DEPENDENCIES =============

  var form$ = dependencies.form$;
  var value = dependencies.value;
  var loadDateFormat = dependencies.loadDateFormat;
  var moment = form$.value.$vueform.services.moment;

  // =============== METHODS ===============

  var load = function load(val) {
    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var formatted = format && formatLoad.value ? formatLoad.value(val, form$.value) : val;
    checkDateFormat(loadDateFormat.value, formatted, moment);
    value.value = formatted instanceof Date || !formatted ? formatted : moment(formatted, loadDateFormat.value).toDate();
  };
  return {
    data,
    requestData,
    load,
    update,
    clear,
    reset,
    prepare
  };
};
var dates$3 = function dates(props, context, dependencies) {
  var {
    formatLoad
  } = toRefs(props);
  var {
    data,
    requestData,
    update,
    clear,
    reset,
    prepare
  } = base$F(props, context, dependencies);

  // ============ DEPENDENCIES =============

  var form$ = dependencies.form$;
  var value = dependencies.value;
  var loadDateFormat = dependencies.loadDateFormat;
  var moment = form$.value.$vueform.services.moment;

  // =============== METHODS ===============

  var load = function load(val) {
    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var formatted = format && formatLoad.value ? formatLoad.value(val, form$.value) : val;
    value.value = map_1(formatted, v => {
      checkDateFormat(loadDateFormat.value, v, moment);
      return v instanceof Date ? v : moment(v, loadDateFormat.value).toDate();
    });
  };
  return {
    data,
    requestData,
    load,
    update,
    clear,
    reset,
    prepare
  };
};
var multilingual$1 = function multilingual(props, context, dependencies) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var {
    formatLoad
  } = toRefs(props);
  var {
    data,
    requestData,
    clear,
    reset,
    prepare
  } = base$F(props, context, dependencies, options);

  // ============ DEPENDENCIES =============

  var form$ = dependencies.form$;
  var value = dependencies.value;
  var language = dependencies.language;
  var nullValue = dependencies.nullValue;

  // =============== PRIVATE ===============

  var setValue = val => {
    if (options.setValue) {
      return options.setValue(val);
    }
    value.value = val;
  };

  // =============== METHODS ===============

  var load = function load(val) {
    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var formatted = format && formatLoad.value ? formatLoad.value(val, form$.value) : val;
    if (!isPlainObject_1(formatted)) {
      throw new Error("Multilingual element requires an object to load");
    }
    setValue(Object.assign({}, clone_1(nullValue.value), formatted));
  };
  var update = val => {
    var updateValue = val;
    if (!isPlainObject_1(updateValue)) {
      updateValue = {
        [language.value]: val
      };
    }
    setValue(Object.assign({}, value.value, updateValue));
  };
  return {
    data,
    requestData,
    load,
    update,
    clear,
    reset,
    prepare
  };
};
var editor = function editor(props, context, dependencies) {
  var {
    data,
    requestData,
    load,
    update,
    clear,
    reset,
    prepare
  } = base$F(props, context, dependencies, {
    setValue: val => {
      value.value = val;
      nextTick(() => {
        var _input$value;
        (_input$value = input.value) === null || _input$value === void 0 || _input$value.update(val);
      });
    }
  });

  // ============ DEPENDENCIES =============

  var input = dependencies.input;
  var value = dependencies.value;
  return {
    data,
    requestData,
    load,
    update,
    clear,
    reset,
    prepare
  };
};
var teditor = function teditor(props, context, dependencies) {
  var {
    data,
    requestData,
    load,
    update,
    clear,
    reset,
    prepare
  } = multilingual$1(props, context, dependencies, {
    setValue: val => {
      value.value = val;
      nextTick(() => {
        input.value.update(val[language.value]);
      });
    }
  });

  // ============ DEPENDENCIES =============

  var input = dependencies.input;
  var model = dependencies.model;
  var value = dependencies.value;
  var language = dependencies.language;

  // ============== WATCHERS ==============

  watch(language, () => {
    input.value.update(model.value);
  });
  return {
    data,
    requestData,
    load,
    update,
    clear,
    reset,
    prepare
  };
};
var file = function file(props, context, dependencies) {
  var {
    load,
    update,
    clear,
    reset,
    prepare
  } = base$F(props, context, dependencies);
  var {
    submit,
    formatData,
    name
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var form$ = dependencies.form$;
  var available = dependencies.available;
  var value = dependencies.value;

  // ============== COMPUTED ===============

  var data = computed(() => {
    var _v;
    var v = value.value;
    if (typeof v === "object" && (_v = v) !== null && _v !== void 0 && _v.__file__) {
      v = v instanceof File ? v : _objectSpread2$1({}, v);
      delete v.__file__;
    }
    return {
      [name.value]: v
    };
  });
  var requestData = computed(() => {
    var _v2;
    if (!available.value || !submit.value) {
      return {};
    }
    var v = value.value;
    if (typeof v === "object" && (_v2 = v) !== null && _v2 !== void 0 && _v2.__file__) {
      v = v instanceof File ? v : _objectSpread2$1({}, v);
      delete v.__file__;
    }
    return formatData.value ? formatData.value(name.value, v, form$.value) : {
      [name.value]: v
    };
  });
  return {
    data,
    requestData,
    load,
    update,
    clear,
    reset,
    prepare
  };
};
var multifile$4 = function multifile(props, context, dependencies) {
  var {
    length,
    add,
    remove,
    load,
    update,
    clear,
    reset,
    handleAdd,
    handleRemove,
    prepare
  } = list(props, context, dependencies);
  var {
    submit,
    formatData,
    name
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var form$ = dependencies.form$;
  var available = dependencies.available;
  var value = dependencies.value;
  var children$ = dependencies.children$;

  // ============== COMPUTED ===============

  var data = computed(() => {
    var val = value.value;
    val = val.map(file => {
      if (typeof file === "object" && file !== null && file !== void 0 && file.__file__) {
        var v = file instanceof File ? file : _objectSpread2$1({}, file);
        delete v.__file__;
        return v;
      }
      return file;
    });
    return {
      [name.value]: val
    };
  });
  var requestData = computed(() => {
    if (!available.value || !submit.value) {
      return {};
    }
    var requestData = [];
    each(children$.value, element$ => {
      var val = element$.requestData[element$.name];

      /* istanbul ignore next: failsafe only */
      if (val !== undefined) {
        var _val;
        if (typeof val === "object" && (_val = val) !== null && _val !== void 0 && _val.__file__) {
          var v = file instanceof File ? file : _objectSpread2$1({}, file);
          delete v.__file__;
          val = v;
        }
        requestData.push(val);
      }
    });
    return formatData.value ? formatData.value(name.value, requestData, form$.value) : {
      [name.value]: requestData
    };
  });
  return {
    requestData,
    data,
    length,
    add,
    remove,
    load,
    update,
    clear,
    reset,
    handleAdd,
    handleRemove,
    prepare
  };
};
var signature = function signature(props, context, dependencies) {
  var {
    data,
    requestData,
    load,
    update,
    clear: clearBase,
    reset: resetBase
  } = base$F(props, context, dependencies);

  // ============ DEPENDENCIES =============

  var {
    mode,
    clearSignature,
    typingToImage,
    drawingToImage,
    uploaded,
    setDefaultMode,
    setDefaultFont,
    setDefaultColor,
    available,
    fire,
    el$
  } = dependencies;

  // ============== COMPUTED ===============

  var clear = () => {
    clearBase();
    clearSignature();
    fire("clear", el$.value);
  };
  var reset = () => {
    clearSignature();
    setDefaultMode(true);
    setDefaultFont(true);
    setDefaultColor();
    resetBase();
    fire("reset", el$.value);
  };
  var prepare = /*#__PURE__*/function () {
    var _ref7 = _asyncToGenerator(function* () {
      if (uploaded.value || !available.value) {
        return;
      }
      if (mode.value === "type") {
        yield typingToImage();
      }
      if (mode.value === "draw") {
        yield drawingToImage();
      }
    });
    return function prepare() {
      return _ref7.apply(this, arguments);
    };
  }();
  return {
    data,
    requestData,
    load,
    update,
    clear,
    reset,
    prepare
  };
};
var matrix$1 = function matrix(props, context, dependencies) {
  var {
    name,
    rows,
    formatLoad
  } = toRefs(props);
  var {
    clear: baseClear,
    reset: baseReset,
    prepare
  } = object$1(props, context, dependencies);

  // ============ DEPENDENCIES =============

  var {
    el$,
    form$,
    children$,
    resolvedRows,
    resolvedColumns,
    dataType,
    defaultValue,
    value,
    computedRows,
    rowsCount,
    hasDynamicRows,
    fire,
    grid,
    resolveComponentName
  } = dependencies;

  // ============== COMPUTED ===============

  var data = computed(() => {
    return {
      [name.value]: transformData()
    };
  });
  var requestData = computed(() => {
    return {
      [name.value]: transformData(true)
    };
  });

  // =============== METHODS ===============

  var load = function load(val) {
    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var formatted = format && formatLoad.value ? formatLoad.value(val, form$.value) : val;
    setData(formatted, "load");
  };
  var update = val => {
    setData(val, "update");
  };
  var clear = () => {
    baseClear();
    if (hasDynamicRows.value) {
      rowsCount.value = rows.value;
    }
    fire("clear", el$.value);
  };
  var reset = () => {
    baseReset();
    if (hasDynamicRows.value) {
      rowsCount.value = rows.value;
    }
    if (grid.value) {
      grid.value.scrollTop = 0;
      grid.value.scrollLeft = 0;
    }
    fire("reset", el$.value);
  };
  var add = () => {
    var oldValue = _objectSpread2$1({}, value.value);
    rowsCount.value++;
    nextTick(() => {
      fire("add", rowsCount.value - 1, value.value, oldValue, el$.value);
    });
  };
  var remove = i => {
    var oldValue = _objectSpread2$1({}, value.value);
    var newValue = _objectSpread2$1({}, value.value);
    delete newValue[i];
    value.value = Object.values(newValue).reduce((prev, curr, i) => _objectSpread2$1(_objectSpread2$1({}, prev), {}, {
      [i]: curr
    }), {});
    rowsCount.value--;
    fire("remove", i, value.value, oldValue, el$.value);
  };
  var handleAdd = () => {
    add();
  };
  var handleRemove = i => {
    remove(i);
  };
  var transformData = function transformData() {
    var skipUnavailable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var data = {};
    resolvedRows.value.forEach((row, r) => {
      if (!row.available && skipUnavailable) {
        return;
      }
      var rowValue = dataType.value === "object" ? {} : dataType.value === "array" ? [] : null;
      resolvedColumns.value.forEach((column, c) => {
        var _children$$value$reso;
        if (!column.available && skipUnavailable) {
          return;
        }
        var cellValue = (_children$$value$reso = children$.value[resolveComponentName(r, c)]) === null || _children$$value$reso === void 0 ? void 0 : _children$$value$reso.value;
        switch (dataType.value) {
          case "array":
            if (cellValue) {
              rowValue = [...(rowValue || []), column.value];
            }
            break;
          case "assoc":
            if (cellValue) {
              rowValue = column.value;
            }
            break;
          default:
            rowValue = _objectSpread2$1(_objectSpread2$1({}, rowValue || {}), {}, {
              [column.value]: cellValue
            });
        }
      });
      data[row.value] = rowValue;
    });
    if (hasDynamicRows.value) {
      data = Object.values(data);
    }
    return data;
  };
  var setData = /*#__PURE__*/function () {
    var _ref8 = _asyncToGenerator(function* (val, action) {
      if (hasDynamicRows.value) {
        rowsCount.value = Object.keys(val).length;
        yield nextTick();
      }
      el$.value.resolvedRows.forEach((row, r) => {
        el$.value.resolvedColumns.forEach((column, c) => {
          var rowValue = val[row.value] || {};
          var cell$ = children$.value[resolveComponentName(r, c)];
          switch (dataType.value) {
            case "assoc":
              cell$[action](column.value === rowValue);
              break;
            case "array":
              cell$[action](rowValue.indexOf(column.value) !== -1);
              break;
            default:
              cell$[action](rowValue[column.value]);
              break;
          }
        });
      });
    });
    return function setData(_x4, _x5) {
      return _ref8.apply(this, arguments);
    };
  }();
  watch(computedRows, (n, o) => {
    var oldLength = typeof o === "number" ? o : Object.keys(o).length;
    var newLength = typeof n === "number" ? n : Object.keys(n).length;
    var dir = oldLength > newLength ? "decrease" : "increase";
    var diff = dir === "increase" ? newLength - oldLength : oldLength - newLength;
    var nextIndex = newLength - 1;
    var lastIndex = oldLength - 1;
    var newValue = _objectSpread2$1({}, value.value);
    if (dir === "increase") {
      switch (dataType.value) {
        case "assoc":
        case "array":
          for (var i = 0; i < diff; i++) {
            newValue[nextIndex + i] = cloneDeep_1(defaultValue.value[nextIndex + i]);
          }
          break;
      }
    } else {
      for (var _i = 0; _i < diff; _i++) {
        if (newValue[lastIndex - _i] !== undefined) {
          delete newValue[lastIndex - _i];
        }
      }
    }
    value.value = newValue;
  }, {
    flush: "post"
  });
  return {
    data,
    requestData,
    load,
    update,
    clear,
    reset,
    prepare,
    handleAdd,
    handleRemove,
    add,
    remove
  };
};
var multiselect$3 = select$3;
var tags$3 = select$3;
var hidden = text;

var HasChange = {
  props: {
    onChange: {
      required: false,
      type: [Function],
      default: null,
      private: true
    }
  }
};

var HasData = {
  props: {
    formatData: {
      required: false,
      type: [Function],
      default: null
    },
    formatLoad: {
      required: false,
      type: [Function],
      default: null
    },
    submit: {
      required: false,
      type: [Boolean],
      default: true
    }
  }
};

var HasValidation = {
  props: {
    rules: {
      required: false,
      type: [Array, String, Object],
      default: null
    },
    messages: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    fieldName: {
      required: false,
      type: [String, Object],
      '@default': 'name|label'
    },
    displayErrors: {
      required: false,
      type: [Boolean],
      default: true
    }
  }
};

var CaptchaElement = {
  name: 'CaptchaElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'captcha',
      private: true
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    default: {
      required: false,
      type: [String],
      default: null
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    readonly: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    rules: {
      required: false,
      type: [Array, String, Object],
      default: ['captcha']
    },
    size: {
      required: false,
      type: [String],
      default: undefined,
      private: true
    },
    fieldName: {
      required: false,
      type: [String],
      '@default': 'name|label',
      private: true
    },
    provider: {
      required: false,
      type: [String],
      default: null,
      '@default': 'config.useProviders.captcha'
    },
    options: {
      required: false,
      type: [Object],
      default: () => ({})
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$R, base$T, base$P, base$_, base$L, base$1i, base$U, base$X, base$G, base$H, base$1a, base$I, base$M, base$Q, base$J, base$N, captcha, base$15, base$O, captcha$1, base$12, base$1g, base$14, base$11, base$K, base$Z];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var base$E = function base(props, context, dependencies) {
  var {
    text
  } = toRefs(props);

  // =============== INJECT ===============

  var config$ = inject('config$');
  var form$ = inject('form$');

  // ============== COMPUTED ==============

  /**
   * The localized text of the element.
   *
   * @type {string}
   *
   */
  var Text = computed(() => {
    return form$.value.$vueform.sanitize(localize(text.value, config$.value, form$.value) || '');
  });
  return {
    Text
  };
};

var base$D = function base(props, context, dependencies) {
  var {
    trueValue,
    falseValue
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var update = dependencies.update;

  // =============== METHODS ==============

  /**
   * Sets the toggle to `on` ([`trueValue`](#option-true-value)).
   *
   * @returns {void}
   */
  var check = () => {
    update(trueValue.value);
  };

  /**
   * Sets the toggle to `off` ([`falseValue`](#option-false-value)).
   *
   * @returns {void}
   */
  var uncheck = () => {
    update(falseValue.value);
  };
  return {
    check,
    uncheck
  };
};
var checkbox = function checkbox(props, context, dependencies) {
  var {
    trueValue,
    falseValue
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var update = dependencies.update;

  // =============== METHODS ==============

  /**
   * Checks the checkbox.
   *
   * @returns {void}
   */
  var check = () => {
    update(trueValue.value);
  };

  /**
   * Unchecks the checkbox.
   *
   * @returns {void}
   */
  var uncheck = () => {
    update(falseValue.value);
  };
  return {
    check,
    uncheck
  };
};

var CheckboxElement = {
  name: 'CheckboxElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'checkbox',
      private: true
    },
    default: {
      required: false,
      type: [String, Boolean, Number],
      default: undefined // falseValue
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    text: {
      required: false,
      type: [String, Object],
      localized: true,
      default: null
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    trueValue: {
      required: false,
      type: [Boolean, String, Number],
      default: true
    },
    falseValue: {
      required: false,
      type: [Boolean, String, Number],
      default: false
    },
    align: {
      required: false,
      type: [String],
      default: undefined
    },
    standalone: {
      required: false,
      type: [Boolean],
      default: false
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$R, base$T, boolean, base$_, base$1i, base$U, base$X, base$H, base$1a, base$I, base$Q, base$F, base$15, base$O, base$13, base$12, base$1g, base$14, base$11, checkbox, checkbox$1, base$K, base$Z, base$E];
    context.slots = ['default', 'label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var base$C = function base(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var value = dependencies.value;
  var resolvedOptions = dependencies.resolvedOptions;

  // =============== METHODS ==============

  /**
   * Toggle's a checkbox's value.
   *
   * @param {string|number} value* value to toggle
   * @returns {void}
   */
  var toggle = val => {
    if (value.value.indexOf(String(val)) === -1 && value.value.indexOf(Number(val)) === -1) {
      check(val);
    } else {
      uncheck(val);
    }
  };

  /**
   * Checks one or more checkboxes.
   *
   * @param {array|string|number} values* value(s) to check
   * @returns {void}
   */
  var check = values => {
    if (!isArray_1(values)) {
      values = [values];
    }
    var items = clone_1(value.value);
    each(values, item => {
      /* istanbul ignore else */
      if (items.indexOf(String(item)) === -1 && items.indexOf(Number(item)) === -1) {
        items.push(item);
      }
    });
    value.value = items;
  };

  /**
   * Unchecks one or more checkboxes.
   *
   * @param {array|string|number} values* value(s) to check
   * @returns {void}
   */
  var uncheck = values => {
    if (!isArray_1(values)) {
      values = [values];
    }
    var items = clone_1(value.value);
    each(values, item => {
      var index = items.indexOf(String(item));

      /* istanbul ignore else */
      if (index === -1) {
        index = items.indexOf(Number(item));
      }

      /* istanbul ignore else */
      if (index !== -1) {
        items.splice(index, 1);
      }
    });
    value.value = items;
  };

  /**
   * Checks all checkboxes.
   *
   * @returns {void}
   */
  var checkAll = () => {
    check(resolvedOptions.value.map(o => o.value));
  };

  /**
   * Unchecks all checkboxes.
   *
   * @returns {void}
   */
  var uncheckAll = () => {
    uncheck(resolvedOptions.value.map(o => o.value));
  };
  return {
    toggle,
    check,
    uncheck,
    checkAll,
    uncheckAll
  };
};

var base$B = function base(props, context, dependencies) {
  var {
    items,
    valueProp,
    labelProp,
    dataKey,
    searchParam,
    clearOnRefetch,
    object
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var isNative = dependencies.isNative;
  var disable = dependencies.disable;
  var enable = dependencies.enable;
  var input = dependencies.input;
  var value = dependencies.value;
  var nullValue = dependencies.nullValue;
  var path = dependencies.path;
  var el$ = dependencies.el$;
  var form$ = dependencies.form$;

  // =============== INJECT ===============

  var config$ = inject('config$');

  // ================ DATA ================

  /**
   * Contains the fetched items when using async `items`.
   *
   * @type {array|object}
   * @default null
   * @private
   */
  var options = ref(null);

  /**
   * Stores watchers for fields from which dynamic values for endpoints are retrieved.
   * 
   * @type {array}
   * @default []
   * @private
   */
  var watchers = ref([]);

  // ============== COMPUTED ==============

  /**
   * Contains the resolved options.
   *
   * @type {array}
   */
  var resolvedOptions = computed(() => {
    if (!isNative.value) {
      return options.value;
    }
    var nativeItems = [];
    each(options.value, (item, key) => {
      if ([null, undefined].indexOf(item) !== -1) {
        return;
      }
      var resolvedItem = {};
      if (Array.isArray(options.value) && typeof item === 'object') {
        if (item[valueProp.value] === undefined) {
          console.warn('You must define `value` property for each option when using an array of objects options for select element');
        }
        resolvedItem = {
          value: item[valueProp.value],
          label: item[labelProp.value]
        };
        if (item.disabled !== undefined) {
          resolvedItem.disabled = item.disabled;
        }
      } else if (Array.isArray(options.value)) {
        resolvedItem = {
          value: item,
          label: item
        };
      } else {
        resolvedItem = {
          value: key,
          label: item
        };
      }
      nativeItems.push(resolvedItem);
    });
    return nativeItems.map(o => {
      return _objectSpread2$1(_objectSpread2$1({}, o), {}, {
        label: form$.value.$vueform.sanitize(localize(o.label, config$.value, form$.value))
      });
    });
  });

  // =============== METHODS ==============

  /**
   * Fetches & updates select options when using `async` options. Receives [`el$`](#property-el) as first param.
   *
   * @param {boolean} disable* whether the input field should be disabled while fetching options
   * @returns {Promise}
   */
  var updateItems = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* () {
      var shouldDisable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      if (!isNative.value) {
        var _input$value;
        // Refresh async function in case it
        // contains variables that have changed
        if (typeof items.value === 'string') {
          options.value = createAsyncOptionsFromUrl();
        }
        yield (_input$value = input.value) === null || _input$value === void 0 ? void 0 : _input$value.resolveOptions();
        return;
      }
      if (shouldDisable) {
        disable();
      }
      if (typeof items.value === 'string') {
        yield resolveOptionsFromUrl();
      } else if (typeof items.value === 'function') {
        yield resolveOptionsFromFunction();
      } else {
        options.value = items.value;
      }
      if (shouldDisable) {
        enable();
      }
    });
    return function updateItems() {
      return _ref.apply(this, arguments);
    };
  }();

  /**
   * Resolves options from url.
   *
   * @returns {Promise}
   * @private
   */
  var resolveOptionsFromUrl = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(function* () {
      try {
        var _yield$form$$value$$v;
        var url = yield resolveUrlAndSetWatchers(items.value, updateItems);
        var optionList = ((_yield$form$$value$$v = yield form$.value.$vueform.services.axios.get(url)) === null || _yield$form$$value$$v === void 0 ? void 0 : _yield$form$$value$$v.data) || [];
        if (dataKey && dataKey.value && Object.keys(optionList).length) {
          optionList = get_1(optionList, dataKey.value) || [];
        }
        options.value = optionList;
      } catch (e) {
        options.value = [];
        console.warn("Couldn't resolve items from ".concat(items.value), e);
      } finally {
        var _resolvedOptions$valu;
        cleanupValue(((_resolvedOptions$valu = resolvedOptions.value) === null || _resolvedOptions$valu === void 0 ? void 0 : _resolvedOptions$valu.map(o => o.value)) || []);
      }
    });
    return function resolveOptionsFromUrl() {
      return _ref2.apply(this, arguments);
    };
  }();

  /**
   * Creates an async function returning options from url.
   *
   * @returns {function}
   * @private
   */
  var createAsyncOptionsFromUrl = () => {
    return /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator(function* (query) {
        var url = yield resolveUrlAndSetWatchers(items.value, updateItems);
        var optionList;
        try {
          var _yield$form$$value$$v2;
          optionList = ((_yield$form$$value$$v2 = yield form$.value.$vueform.services.axios.get("".concat(url).concat(url.match(/\?/) ? '&' : '?').concat(searchParam.value, "=").concat(query || ''))) === null || _yield$form$$value$$v2 === void 0 ? void 0 : _yield$form$$value$$v2.data) || [];
          if (dataKey && dataKey.value && Object.keys(optionList).length) {
            optionList = get_1(optionList, dataKey.value) || [];
          }
        } catch (e) {
          console.error(e);
        } finally {
          setTimeout(() => {
            var _input$value2;
            cleanupValue(((_input$value2 = input.value) === null || _input$value2 === void 0 || (_input$value2 = _input$value2.eo) === null || _input$value2 === void 0 ? void 0 : _input$value2.map(o => o[valueProp.value])) || []);
          }, 0);
        }
        return optionList;
      });
      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }();
  };

  /**
   * Resolves options from function.
   *
   * @returns {Promise}
   * @private
   */
  var resolveOptionsFromFunction = /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator(function* () {
      try {
        options.value = (yield items.value(el$.value)) || [];
      } catch (e) {
        options.value = [];
        console.warn("Couldn't resolve items from async function", e);
      }
    });
    return function resolveOptionsFromFunction() {
      return _ref4.apply(this, arguments);
    };
  }();

  /**
   * Resolves items.
   *
   * @returns {Promise}
   * @private
   */
  var resolveOptions = /*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator(function* (n, o) {
      if (typeof items.value === 'function' && isNative.value) {
        yield resolveOptionsFromFunction();
      } else if (!isEqual_1(n, o) || n === undefined && o === undefined) {
        if (typeof items.value === 'string' && isNative.value) {
          yield resolveOptionsFromUrl();
        } else if (typeof items.value === 'string' && !isNative.value) {
          options.value = createAsyncOptionsFromUrl();
        } else {
          options.value = items.value;
        }
      }
    });
    return function resolveOptions(_x2, _x3) {
      return _ref5.apply(this, arguments);
    };
  }();

  /**
   * Removes any value that is not among the newly fetches option list after async resolve.
   * 
   * @returns {void}
   * @param {array} values* the list of option values
   * @private
   */
  var cleanupValue = values => {
    if (clearOnRefetch.value) {
      value.value = cloneDeep_1(nullValue.value);
      return;
    }
    if (!Array.isArray(nullValue.value) && value.value && values.indexOf(object.value ? value.value[valueProp.value] : value.value) === -1) {
      value.value = cloneDeep_1(nullValue.value);
    } else if (Array.isArray(nullValue.value) && value.value.length) {
      value.value = value.value.filter(v => {
        return values.indexOf(v) !== -1;
      });
    }
  };

  /**
   * Resolves the endpoint url with field values and sets watchers for those fields.
   * 
   * @returns {Promise}
   * @param {string} url* the base url potentially containing variable names
   * @param {function} updateItems* the method that triggers item updates
   * @private
   */
  var resolveUrlAndSetWatchers = /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator(function* (url, updateItems) {
      var regex = /{([^}]+)}/g;
      var resolvedUrl = url;
      if (url.match(regex)) {
        yield nextTick();
        watchers.value.forEach(unwatch => unwatch());
        var match;
        var _loop = function* _loop() {
          var _match$1$match;
          var defaultValue = ((_match$1$match = match[1].match(/\|'([^']+)/)) === null || _match$1$match === void 0 ? void 0 : _match$1$match[1]) || '';
          var elPath = replaceWildcards(match[1].match(/^([^|]+)/)[1], path.value);
          var el$ = form$.value.el$(elPath);
          var elValue = typeof (el$ === null || el$ === void 0 ? void 0 : el$.value) !== 'undefined' && el$.value !== null && typeof el$.value === 'object' ? JSON.stringify(el$.value) : typeof (el$ === null || el$ === void 0 ? void 0 : el$.value) !== 'undefined' && el$.value !== null ? el$.value : defaultValue;
          resolvedUrl = resolvedUrl.replace(match[0], encodeURIComponent(elValue));
          watchers.value.push(watch(computed(() => el$ === null || el$ === void 0 ? void 0 : el$.value), () => {
            updateItems();
          }));
        };
        while ((match = regex.exec(url)) !== null) {
          yield* _loop();
        }
      }
      return resolvedUrl;
    });
    return function resolveUrlAndSetWatchers(_x4, _x5) {
      return _ref6.apply(this, arguments);
    };
  }();
  return {
    resolveOptions,
    resolvedOptions,
    updateItems,
    watchers,
    cleanupValue,
    resolveUrlAndSetWatchers
  };
};
var select$2 = function select(props, context, dependencies) {
  var {
    items
  } = toRefs(props);
  var {
    resolveOptions,
    resolvedOptions,
    updateItems,
    watchers,
    cleanupValue,
    resolveUrlAndSetWatchers
  } = base$B(props, context, dependencies);

  // ================ HOOKS ===============

  resolveOptions();
  watch(items, resolveOptions);
  return {
    resolveOptions,
    resolvedOptions,
    updateItems,
    watchers,
    cleanupValue,
    resolveUrlAndSetWatchers
  };
};
var checkboxgroup = function checkboxgroup(props, context, dependencies) {
  var {
    items
  } = toRefs(props);
  var {
    watchers,
    cleanupValue,
    resolveUrlAndSetWatchers
  } = base$B(props, context, dependencies);

  // ============ DEPENDENCIES ============

  var disableAll = dependencies.disableAll;
  var enableAll = dependencies.enableAll;
  var el$ = dependencies.el$;
  var form$ = dependencies.form$;

  // =============== INJECT ===============

  var config$ = inject('config$');

  // ================ DATA ================

  /**
   * Contains the fetched items when using async `items`.
   *
   * @type {array|object}
   * @default null
   * @private
   */
  var options = ref(null);

  // ============== COMPUTED ==============

  /**
   * Contains the available items. If [`items`](#option-items) are async this contains the resolved items.
   *
   * @type {array}
   */
  var resolvedOptions = computed(() => {
    var resolvedOptions = [];
    each(options.value, (item, key) => {
      if ([null, undefined].indexOf(item) !== -1) {
        return;
      }

      // [{a:1},{b:2}]
      if (Array.isArray(options.value) && typeof item === 'object') {
        if (item.value === undefined) {
          console.warn('You must define `value` property for each item when using an array of objects options');
        }
        resolvedOptions.push(item);
      }

      // ['a', 'b']
      else if (Array.isArray(options.value)) {
        resolvedOptions.push({
          value: item,
          label: item
        });
      }

      // {a:{label:1},b:{label:2}}
      else if (typeof item === 'object') {
        resolvedOptions.push(_objectSpread2$1(_objectSpread2$1({}, item), {}, {
          value: key
        }));
      }

      // {a:1,b:2}
      else {
        resolvedOptions.push({
          label: item,
          value: key
        });
      }
    });
    return resolvedOptions.map(o => {
      return _objectSpread2$1(_objectSpread2$1({}, o), {}, {
        label: form$.value.$vueform.sanitize(localize(o.label, config$.value, form$.value))
      });
    });
  });

  // =============== METHODS ==============

  /**
   * Fetches & updates items when using `async` items.
   *
   * @param {boolean} disable* whether the input field should be disabled while fetching options
   * @returns {Promise}
   */
  var updateItems = /*#__PURE__*/function () {
    var _ref7 = _asyncToGenerator(function* () {
      var shouldDisable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      if (shouldDisable) {
        disableAll();
      }
      if (typeof items.value === 'string') {
        yield resolveOptionsFromUrl();
      } else {
        yield resolveOptionsFromFunction();
      }
      if (shouldDisable) {
        enableAll();
      }
    });
    return function updateItems() {
      return _ref7.apply(this, arguments);
    };
  }();

  /**
   * Resolves options from url.
   *
   * @returns {Promise}
   * @private
   */
  var resolveOptionsFromUrl = /*#__PURE__*/function () {
    var _ref8 = _asyncToGenerator(function* () {
      try {
        var _yield$form$$value$$v3, _resolvedOptions$valu2;
        var url = yield resolveUrlAndSetWatchers(items.value, updateItems);
        options.value = ((_yield$form$$value$$v3 = yield form$.value.$vueform.services.axios.get(url)) === null || _yield$form$$value$$v3 === void 0 ? void 0 : _yield$form$$value$$v3.data) || [];
        cleanupValue(((_resolvedOptions$valu2 = resolvedOptions.value) === null || _resolvedOptions$valu2 === void 0 ? void 0 : _resolvedOptions$valu2.map(o => o.value)) || []);
      } catch (e) {
        options.value = [];
        console.warn("Couldn't resolve items from ".concat(items.value), e);
      }
    });
    return function resolveOptionsFromUrl() {
      return _ref8.apply(this, arguments);
    };
  }();

  /**
   * Resolves options from function. Receives [`el$`](#property-el) as first param.
   *
   * @returns {Promise}
   * @private
   */
  var resolveOptionsFromFunction = /*#__PURE__*/function () {
    var _ref9 = _asyncToGenerator(function* () {
      try {
        options.value = (yield items.value(el$.value)) || [];
      } catch (e) {
        options.value = [];
        console.warn("Couldn't resolve items from async function", e);
      }
    });
    return function resolveOptionsFromFunction() {
      return _ref9.apply(this, arguments);
    };
  }();

  /**
   * Resolves items.
   *
   * @returns {Promise}
   * @private
   */
  var resolveOptions = /*#__PURE__*/function () {
    var _ref10 = _asyncToGenerator(function* () {
      if (typeof items.value === 'function') {
        yield resolveOptionsFromFunction();
      } else if (typeof items.value === 'string') {
        yield resolveOptionsFromUrl();
      } else {
        options.value = items.value;
      }
    });
    return function resolveOptions() {
      return _ref10.apply(this, arguments);
    };
  }();

  // ================ HOOKS ===============

  resolveOptions();
  watch(items, resolveOptions);
  return {
    resolveOptions,
    resolvedOptions,
    updateItems,
    watchers,
    cleanupValue,
    resolveUrlAndSetWatchers
  };
};
var radiogroup = checkboxgroup;
var multiselect$2 = select$2;
var tags$2 = select$2;

var CheckboxgroupElement = {
  name: 'CheckboxgroupElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'checkboxgroup',
      private: true
    },
    default: {
      required: false,
      type: [Array],
      default: () => []
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    items: {
      required: false,
      type: [Object, Array, Function, String],
      localized: true,
      default: () => ({})
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    disables: {
      required: false,
      type: [Array],
      default: () => []
    },
    clearOnRefetch: {
      type: [Boolean],
      required: false,
      default: true
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$T, array$1, base$_, base$1i, checkboxgroup$1, checkboxgroup$3, base$H, base$Q, checkboxgroup, base$1a, base$I, base$C, base$F, base$15, base$O, base$14, base$13, base$12, base$1g, base$11, checkboxgroup$2, base$K, base$Z];
    context.slots = ['checkbox', 'label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var base$A = function base(props, context, dependencies) {
  var {
    addons,
    slots
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var el$ = dependencies.el$;
  var form$ = dependencies.form$;

  // ============== COMPUTED ==============

  var hasAddonBefore = computed(() => {
    var _el$$value$$slots, _el$$value$$scopedSlo;
    return !!(addons.value.before || (_el$$value$$slots = el$.value.$slots) !== null && _el$$value$$slots !== void 0 && _el$$value$$slots['addon-before'] || (/* istanbul ignore next */form$.value.$vueform.vueVersion === 2 && (_el$$value$$scopedSlo = el$.value.$scopedSlots) !== null && _el$$value$$scopedSlo !== void 0 && _el$$value$$scopedSlo['addon-before']) || slots.value['addon-before']);
  });
  var hasAddonAfter = computed(() => {
    var _el$$value$$slots2, _el$$value$$scopedSlo2;
    return !!(addons.value.after || (_el$$value$$slots2 = el$.value.$slots) !== null && _el$$value$$slots2 !== void 0 && _el$$value$$slots2['addon-after'] || (/* istanbul ignore next */form$.value.$vueform.vueVersion === 2 && (_el$$value$$scopedSlo2 = el$.value.$scopedSlots) !== null && _el$$value$$scopedSlo2 !== void 0 && _el$$value$$scopedSlo2['addon-after']) || slots.value['addon-after']);
  });
  return {
    hasAddonBefore,
    hasAddonAfter
  };
};

var base$z = function base(props, context, dependencies) {
  var {
    displayFormat,
    valueFormat,
    loadFormat,
    date,
    time,
    seconds,
    hour24
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var form$ = dependencies.form$;

  // =============== PRIVATE ===============

  /**
   * The default date format type.
   *
   * @type {string}
   * @private
   */
  var defaultFormat = computed(() => {
    var format;
    if (date.value && time.value && seconds.value && hour24.value) {
      format = 'datetimeSeconds24';
    } else if (date.value && time.value && seconds.value && !hour24.value) {
      format = 'datetimeSeconds12';
    } else if (date.value && time.value && !seconds.value && hour24.value) {
      format = 'datetime24';
    } else if (date.value && time.value && !seconds.value && !hour24.value) {
      format = 'datetime12';
    } else if (!date.value && time.value && seconds.value && hour24.value) {
      format = 'timeSeconds24';
    } else if (!date.value && time.value && seconds.value && !hour24.value) {
      format = 'timeSeconds12';
    } else if (!date.value && time.value && !seconds.value && hour24.value) {
      format = 'time24';
    } else if (!date.value && time.value && !seconds.value && !hour24.value) {
      format = 'time12';
    } else {
      format = 'date';
    }
    return format;
  });

  /**
   * The default date format for display.
   *
   * @type {string}
   * @private
   */
  var defaultDisplayFormat = computed(() => {
    return form$.value.translations.vueform.dateFormats[defaultFormat.value];
  });

  /**
   * The default date format for value & load.
   *
   * @type {string}
   * @private
   */
  var defaultDataFormat = computed(() => {
    var dataDateFormats = {
      datetimeSeconds24: 'YYYY-MM-DD HH:mm:ss',
      datetimeSeconds12: 'YYYY-MM-DD hh:mm:ss a',
      datetime24: 'YYYY-MM-DD HH:mm',
      datetime12: 'YYYY-MM-DD hh:mm a',
      timeSeconds24: 'HH:mm:ss',
      timeSeconds12: 'hh:mm:ss a',
      time24: 'HH:mm',
      time12: 'hh:mm a',
      date: 'YYYY-MM-DD'
    };
    return dataDateFormats[defaultFormat.value];
  });

  // ============== COMPUTED ===============

  /**
   * The display date format.
   *
   * @type {string}
   * @private
   */
  var displayDateFormat = computed(() => {
    return displayFormat.value !== null ? displayFormat.value : defaultDisplayFormat.value;
  });

  /**
   * The format of date value.
   *
   * @type {string}
   * @private
   */
  var valueDateFormat = computed(() => {
    return valueFormat.value !== null || valueFormat.value === false ? valueFormat.value : defaultDataFormat.value;
  });

  /**
   * The date format of the data the element being loaded with.
   *
   * @type {string}
   * @private
   */
  var loadDateFormat = computed(() => {
    return loadFormat.value !== null ? loadFormat.value : defaultDataFormat.value;
  });
  return {
    displayDateFormat,
    valueDateFormat,
    loadDateFormat
  };
};
var dates$2 = function dates(props, context, dependencies) {
  var {
    displayFormat,
    valueFormat,
    loadFormat
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var form$ = dependencies.form$;

  // =============== PRIVATE ===============

  var defaultFormat = computed(() => {
    return form$.value.translations.vueform.dateFormats.date;
  });

  // ============== COMPUTED ===============

  var displayDateFormat = computed(() => {
    return displayFormat.value !== null ? displayFormat.value : defaultFormat.value;
  });
  var valueDateFormat = computed(() => {
    return valueFormat.value !== null || valueFormat.value === false ? valueFormat.value : defaultFormat.value;
  });
  var loadDateFormat = computed(() => {
    return loadFormat.value !== null ? loadFormat.value : defaultFormat.value;
  });
  return {
    displayDateFormat,
    valueDateFormat,
    loadDateFormat
  };
};

var base$y = function base(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var value = dependencies.value;

  // =============== METHODS ==============

  /**
   * Handles `change` event.
   *
   * @param {string} val* value of the element
   * @returns {void}
   * @private
   */
  var handleChange = val => {
    value.value = val;
  };
  return {
    handleChange
  };
};

var base$x = function base(props, context, dependencies) {
  var {
    placeholder
  } = toRefs(props);
  var {
    el$
  } = dependencies;

  // =============== INJECT ===============

  var config$ = inject('config$');
  var form$ = inject('form$');

  // ============== COMPUTED ==============

  /**
   * The localized placeholder of the element.
   *
   * @type {string}
   *
   */
  var Placeholder = computed(() => {
    var _form$$value$options$;
    var Placeholder = localize(placeholder.value, config$.value, form$.value);
    if (el$.value.isRequired && ((_form$$value$options$ = form$.value.options.showRequired) === null || _form$$value$options$ === void 0 ? void 0 : _form$$value$options$.indexOf('placeholder')) !== -1) {
      Placeholder += '*';
    }
    return Placeholder;
  });
  return {
    Placeholder
  };
};

var date$1 = function date(props, context, dependencies) {
  var {
    disables,
    min,
    max,
    extendOptions,
    readonly,
    hour24,
    seconds,
    date,
    time
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var isDisabled = dependencies.isDisabled;
  var displayDateFormat = dependencies.displayDateFormat;
  var valueDateFormat = dependencies.valueDateFormat;
  var form$ = dependencies.form$;
  var moment = form$.value.$vueform.services.moment;

  // ============== COMPUTED ==============

  /**
   * List of dates to disable.
   *
   * @type {array}
   * @private
   */
  var disabledDates = computed(() => {
    /* istanbul ignore next: failsafe only */
    if (disables.value === undefined) {
      return [];
    }
    return map_1(disables.value, disabledDate => {
      checkDateFormat(valueDateFormat.value, disabledDate, moment);
      return disabledDate instanceof Date ? disabledDate : moment(disabledDate, valueDateFormat.value, true).toDate();
    });
  });

  /**
   * Earliest selectable date. Can be a string in `[loadFormat](#load-format)` or a Date object.
   *
   * @type {string|Date}
   * @private
   */
  var minDate = computed(() => {
    if (!min.value) {
      return null;
    }
    checkDateFormat(valueDateFormat.value, min.value, moment);
    return min.value instanceof Date ? min.value : moment(min.value, valueDateFormat.value, true).toDate();
  });

  /**
   * Latest selectable date. Can be a string in `[loadFormat](#load-format)` or a Date object.
   *
   * @type {string|Date}
   * @private
   */
  var maxDate = computed(() => {
    if (!max.value) {
      return null;
    }
    checkDateFormat(valueDateFormat.value, max.value, moment);
    return max.value instanceof Date ? max.value : moment(max.value, valueDateFormat.value, true).toDate();
  });

  /**
   * Default options for date selector.
   *
   * @type {object}
   * @private
   */
  var defaultOptions = computed(() => {
    return {
      dateFormat: displayDateFormat.value,
      minDate: minDate.value,
      maxDate: maxDate.value,
      disable: disabledDates.value,
      clickOpens: !isDisabled.value && !readonly.value,
      time_24hr: hour24.value,
      enableTime: time.value,
      enableSeconds: seconds.value,
      noCalendar: !date.value
    };
  });

  /**
   * Options for date selector. Can be extended via [`extend-options`](#option-extend-options) with [flatpickr options](https://flatpickr.js.org/options/).
   *
   * @type {object}
   */
  var fieldOptions = computed(() => {
    return Object.assign({}, defaultOptions.value, extendOptions.value || /* istanbul ignore next */{});
  });

  /**
   * Whether date selector has `date` enabled.
   *
   * @type {boolean}
   * @private
   */
  var hasDate = computed(() => {
    return true;
  });

  /**
   * Whether date selector has `time` enabled.
   *
   * @type {boolean}
   * @private
   */
  var hasTime = computed(() => {
    return false;
  });
  return {
    minDate,
    maxDate,
    disabledDates,
    fieldOptions,
    hasDate,
    hasTime
  };
};
var dates$1 = function dates(props, context, dependencies) {
  var {
    mode,
    extendOptions,
    readonly
  } = toRefs(props);
  var {
    minDate,
    maxDate,
    disabledDates
  } = date$1(props, context, dependencies);

  // ============ DEPENDENCIES ============

  var isDisabled = dependencies.isDisabled;
  var displayDateFormat = dependencies.displayDateFormat;

  // ============== COMPUTED ==============

  var defaultOptions = computed(() => {
    return {
      mode: mode.value,
      dateFormat: displayDateFormat.value,
      minDate: minDate.value,
      maxDate: maxDate.value,
      disable: disabledDates.value,
      clickOpens: !isDisabled.value && !readonly.value
    };
  });
  var fieldOptions = computed(() => {
    return Object.assign({}, defaultOptions.value, extendOptions.value || /* istanbul ignore next */{});
  });
  var hasDate = computed(() => {
    return true;
  });
  var hasTime = computed(() => {
    return false;
  });
  return {
    minDate,
    maxDate,
    disabledDates,
    fieldOptions,
    hasDate,
    hasTime
  };
};
var select$1 = function select(props, context, dependencies) {
  var {
    native,
    extendOptions,
    labelProp,
    trackBy,
    valueProp,
    search,
    limit,
    noOptionsText,
    noResultsText,
    caret,
    object,
    delay,
    minChars,
    resolveOnLoad,
    filterResults,
    clearOnSearch,
    canDeselect,
    canClear,
    openDirection,
    strict,
    closeOnSelect,
    closeOnDeselect,
    autocomplete,
    groups,
    groupLabel,
    groupOptions,
    groupHideEmpty,
    inputType,
    create,
    appendNewOption,
    addOptionOn,
    appendTo,
    appendToBody,
    allowAbsent
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var isLoading = dependencies.isLoading;

  // =============== INJECT ===============

  var config$ = inject('config$');

  // ============== COMPUTED ==============

  /**
   * Whether native select should be used.
   *
   * @type {string}
   */
  var isNative = computed(() => {
    return native.value && !search.value;
  });

  /**
   * Default options for non-native select input.
   *
   * @type {object}
   * @private
   */
  var defaultOptions = computed(() => {
    return {
      mode: 'single',
      searchable: search.value || create.value,
      noOptionsText: form$.value.$vueform.sanitize(noOptionsText.value || form$.value.translations.vueform.multiselect.noOptions),
      noResultsText: form$.value.$vueform.sanitize(noResultsText.value || form$.value.translations.vueform.multiselect.noResults),
      locale: Object.keys(config$.value.i18n.locales).length > 1 ? config$.value.i18n.locale : null,
      //@todo:adam can not be localized on form level
      fallbackLocale: config$.value.i18n.fallbackLocale,
      label: labelProp.value,
      trackBy: trackBy.value,
      valueProp: valueProp.value,
      limit: limit.value,
      caret: caret.value,
      loading: isLoading.value,
      object: object.value,
      delay: delay.value,
      minChars: minChars.value,
      resolveOnLoad: resolveOnLoad.value,
      filterResults: filterResults.value,
      clearOnSearch: clearOnSearch.value,
      canDeselect: canDeselect.value,
      canClear: canClear.value,
      openDirection: openDirection.value,
      strict: strict.value,
      closeOnSelect: closeOnSelect.value,
      closeOnDeselect: closeOnDeselect.value,
      autocomplete: autocomplete.value,
      groups: groups.value,
      groupLabel: groupLabel.value,
      groupOptions: groupOptions.value,
      groupHideEmpty: groupHideEmpty.value,
      inputType: inputType.value,
      createOption: create.value,
      appendNewOption: appendNewOption.value,
      addOptionOn: addOptionOn.value,
      appendTo: appendTo.value,
      appendToBody: appendToBody.value,
      allowAbsent: allowAbsent.value
    };
  });

  /**
   * Options for non-native select input. Can be extended via [`extend-options`](#option-extend-options) with [@vueform/multiselect options](https://github.com/vueform/multiselect#basic-props).
   *
   * @type {object}
   */
  var fieldOptions = computed(() => {
    return Object.assign({}, defaultOptions.value, extendOptions.value || /* istanbul ignore next */{});
  });
  return {
    fieldOptions,
    isNative
  };
};
var multiselect$1 = function multiselect(props, context, dependencies) {
  var {
    native,
    extendOptions,
    labelProp,
    trackBy,
    valueProp,
    search,
    limit,
    noOptionsText,
    noResultsText,
    caret,
    object,
    delay,
    minChars,
    resolveOnLoad,
    filterResults,
    clearOnSearch,
    clearOnSelect,
    canClear,
    max,
    openDirection,
    strict,
    closeOnSelect,
    closeOnDeselect,
    autocomplete,
    groups,
    groupLabel,
    groupOptions,
    groupHideEmpty,
    groupSelect,
    inputType,
    hideSelected,
    multipleLabel,
    multipleLabelMultiple,
    multipleLabelSingle,
    create,
    appendNewOption,
    addOptionOn,
    appendTo,
    appendToBody,
    allowAbsent
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var isLoading = dependencies.isLoading;

  // =============== INJECT ===============

  var config$ = inject('config$');

  // ============== COMPUTED ==============

  /**
   * Whether native multiselect should be used.
   *
   * @type {string}
   */
  var isNative = computed(() => {
    return native.value && !search.value;
  });

  /**
   * Default options for non-native multiselect input.
   *
   * @type {object}
   * @private
   */
  var defaultOptions = computed(() => {
    return {
      mode: 'multiple',
      searchable: search.value || create.value,
      noOptionsText: form$.value.$vueform.sanitize(noOptionsText.value || form$.value.translations.vueform.multiselect.noOptions),
      noResultsText: form$.value.$vueform.sanitize(noResultsText.value || form$.value.translations.vueform.multiselect.noResults),
      multipleLabel: typeof multipleLabel.value === 'function' ? (val, select$) => form$.value.$vueform.sanitize(multipleLabel.value(val, select$)) : (val, select$) => {
        return form$.value.$vueform.sanitize(val && val.length > 1 ? multipleLabelMultiple.value ? multipleLabelMultiple.value.replace(':x:', val.length) : form$.value.__(form$.value.translations.vueform.multiselect.multipleLabelMore, {
          options: val.length
        }) : multipleLabelSingle.value || form$.value.translations.vueform.multiselect.multipleLabelOne);
      },
      locale: Object.keys(config$.value.i18n.locales).length > 1 ? config$.value.i18n.locale : null,
      //@todo:adam can not be localized on form level
      fallbackLocale: config$.value.i18n.fallbackLocale,
      label: labelProp.value,
      trackBy: trackBy.value,
      valueProp: valueProp.value,
      limit: limit.value,
      caret: caret.value,
      loading: isLoading.value,
      object: object.value,
      delay: delay.value,
      minChars: minChars.value,
      resolveOnLoad: resolveOnLoad.value,
      filterResults: filterResults.value,
      clearOnSearch: clearOnSearch.value,
      clearOnSelect: clearOnSelect.value,
      canClear: canClear.value,
      max: max.value,
      openDirection: openDirection.value,
      strict: strict.value,
      closeOnSelect: closeOnSelect.value,
      closeOnDeselect: closeOnDeselect.value,
      autocomplete: autocomplete.value,
      groups: groups.value,
      groupLabel: groupLabel.value,
      groupOptions: groupOptions.value,
      groupHideEmpty: groupHideEmpty.value,
      groupSelect: groupSelect.value,
      inputType: inputType.value,
      hideSelected: hideSelected.value,
      createOption: create.value,
      appendNewOption: appendNewOption.value,
      addOptionOn: addOptionOn.value,
      appendTo: appendTo.value,
      appendToBody: appendToBody.value,
      allowAbsent: allowAbsent.value
    };
  });

  /**
   * Options for non-native multiselect input. Can be extended via [`extend-options`](#option-extend-options) with [@vueform/multiselect options](https://github.com/vueform/multiselect#basic-props).
   *
   * @type {object}
   */
  var fieldOptions = computed(() => {
    return Object.assign({}, defaultOptions.value, extendOptions.value || /* istanbul ignore next */{});
  });
  return {
    fieldOptions,
    isNative
  };
};
var tags$1 = function tags(props, context, dependencies) {
  var {
    extendOptions,
    labelProp,
    trackBy,
    valueProp,
    search,
    limit,
    noOptionsText,
    noResultsText,
    caret,
    object,
    delay,
    minChars,
    resolveOnLoad,
    filterResults,
    clearOnSearch,
    clearOnSelect,
    canClear,
    max,
    showOptions,
    openDirection,
    strict,
    closeOnSelect,
    closeOnDeselect,
    autocomplete,
    groups,
    groupLabel,
    groupOptions,
    groupHideEmpty,
    groupSelect,
    inputType,
    hideSelected,
    create,
    appendNewOption,
    addOptionOn,
    breakTags,
    appendTo,
    appendToBody,
    allowAbsent
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var isLoading = dependencies.isLoading;

  // =============== INJECT ===============

  var config$ = inject('config$');

  // ================ DATA ================

  /**
   * Technical prop to be able to use the same template for tags as for select.
   *
   * @type {boolean}
   * @default false
   * @private
   */
  var native = ref(false);

  // ============== COMPUTED ==============

  /**
   * Technical prop to be able to use the same template for tags as for select.
   *
   * @type {boolean}
   * @private
   */
  var isNative = computed(() => {
    return false;
  });

  /**
   * Default options for tags input.
   *
   * @type {object}
   * @private
   */
  var defaultOptions = computed(() => {
    return {
      mode: 'tags',
      searchable: search.value || create.value,
      noOptionsText: form$.value.$vueform.sanitize(noOptionsText.value || form$.value.translations.vueform.multiselect.noOptions),
      noResultsText: form$.value.$vueform.sanitize(noResultsText.value || form$.value.translations.vueform.multiselect.noResults),
      locale: Object.keys(config$.value.i18n.locales).length > 1 ? config$.value.i18n.locale : null,
      //@todo:adam can not be localized on form level
      fallbackLocale: config$.value.i18n.fallbackLocale,
      label: labelProp.value,
      trackBy: trackBy.value,
      valueProp: valueProp.value,
      limit: limit.value,
      caret: caret.value,
      loading: isLoading.value,
      object: object.value,
      delay: delay.value,
      minChars: minChars.value,
      resolveOnLoad: resolveOnLoad.value,
      filterResults: filterResults.value,
      clearOnSearch: clearOnSearch.value,
      clearOnSelect: clearOnSelect.value,
      canClear: canClear.value,
      max: max.value,
      showOptions: showOptions.value,
      openDirection: openDirection.value,
      strict: strict.value,
      closeOnSelect: closeOnSelect.value,
      closeOnDeselect: closeOnDeselect.value,
      autocomplete: autocomplete.value,
      groups: groups.value,
      groupLabel: groupLabel.value,
      groupOptions: groupOptions.value,
      groupHideEmpty: groupHideEmpty.value,
      groupSelect: groupSelect.value,
      inputType: inputType.value,
      hideSelected: hideSelected.value,
      createOption: create.value,
      appendNewOption: appendNewOption.value,
      addOptionOn: addOptionOn.value,
      breakTags: breakTags.value,
      appendTo: appendTo.value,
      appendToBody: appendToBody.value,
      allowAbsent: allowAbsent.value
    };
  });

  /**
   * Options for tags input. Can be extended via [`extend-options`](#option-extend-options) with [@vueform/multiselect options](https://github.com/vueform/multiselect#basic-props).
   *
   * @type {object}
   */
  var fieldOptions = computed(() => {
    return Object.assign({}, defaultOptions.value, extendOptions.value || /* istanbul ignore next */{});
  });
  return {
    native,
    fieldOptions,
    isNative
  };
};
var slider = function slider(props, context, dependencies) {
  var {
    min,
    max,
    step,
    tooltips,
    merge,
    format,
    orientation,
    direction,
    extendOptions,
    showTooltip,
    tooltipPosition,
    lazy
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var isDisabled = dependencies.isDisabled;
  dependencies.labelId;

  // ============== COMPUTED ==============

  /**
   * Default options for slider input.
   *
   * @type {object}
   * @private
   */
  var defaultOptions = computed(() => {
    return {
      min: min.value,
      max: max.value,
      step: step.value,
      tooltips: tooltips.value,
      merge: merge.value,
      format: format.value,
      orientation: orientation.value,
      direction: direction.value,
      disabled: isDisabled.value,
      showTooltip: showTooltip.value,
      tooltipPosition: tooltipPosition.value,
      lazy: lazy.value
    };
  });

  /**
   * Options for slider input. Can be extended via [`extend-options`](#option-extend-options) with [@vueform/slider options](https://github.com/vueform/slider#basic-props).
   *
   * @type {object}
   */
  var fieldOptions = computed(() => {
    return Object.assign({}, defaultOptions.value, extendOptions.value || /* istanbul ignore next */{});
  });
  return {
    fieldOptions
  };
};
var toggle = function toggle(props, context, dependencies) {
  var {
    labels,
    extendOptions,
    trueValue,
    falseValue
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var isDisabled = dependencies.isDisabled;
  var form$ = dependencies.form$;

  // =============== INJECT ===============

  var config$ = inject('config$');

  // ============== COMPUTED ==============

  /**
   * Default options toggle input.
   *
   * @type {object}
   * @private
   */
  var defaultOptions = computed(() => {
    return {
      disabled: isDisabled.value,
      offLabel: labels.value ? localize(labels.value.off, config$.value, form$.value) || '' : /* istanbul ignore next: default is hardcoded {}, will never fall there */'',
      onLabel: labels.value ? localize(labels.value.on, config$.value, form$.value) || '' : /* istanbul ignore next: default is hardcoded {}, will never fall there */'',
      trueValue: trueValue.value,
      falseValue: falseValue.value
    };
  });

  /**
   * Options for toggle input. Can be extended via [`extend-options`](#option-extend-options) with [@vueform/toggle options](https://github.com/vueform/toggle#basic-props).
   *
   * @type {object}
   */
  var fieldOptions = computed(() => {
    return Object.assign({}, defaultOptions.value, extendOptions.value || /* istanbul ignore next */{});
  });
  return {
    fieldOptions
  };
};

var base$w = function base(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var input = dependencies.input;

  // ================ DATA ================

  /**
   * Whether the element is focused.
   *
   * @type {boolean}
   */
  var focused = ref(false);

  // =============== HOOKS ================

  onMounted(() => {
    if (input && input.value && input.value.addEventListener) {
      input.value.addEventListener('focus', () => {
        focused.value = true;
      });
      input.value.addEventListener('blur', () => {
        focused.value = false;
      });
    }
  });
  return {
    focused
  };
};
var date = function date(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var input = dependencies.input;

  // ================ DATA ================

  /**
   * Whether the element is focused.
   *
   * @type {boolean}
   */
  var focused = ref(false);

  // =============== HOOKS ================

  onMounted(() => {
    input.value.input.addEventListener('focus', () => {
      focused.value = true;
    });
    input.value.input.addEventListener('blur', () => {
      focused.value = false;
    });
  });
  return {
    focused
  };
};
var select = function select(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var input = dependencies.input;
  var isNative = dependencies.isNative;

  // ================ DATA ================

  /**
   * Whether the element is focused.
   *
   * @type {boolean}
   */
  var focused = ref(false);

  // =============== HOOKS ================

  onMounted(() => {
    if (isNative.value) {
      input.value.addEventListener('focus', () => {
        focused.value = true;
      });
      input.value.addEventListener('blur', () => {
        focused.value = false;
      });
    } else {
      watch(computed(() => {
        var _input$value;
        return (_input$value = input.value) === null || _input$value === void 0 ? void 0 : _input$value.isActive;
      }), active => {
        focused.value = active;
      });
    }
  });
  return {
    focused
  };
};
var dates = date;
var multiselect = select;
var tags = select;

var DateElement = {
  name: 'DateElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'date',
      private: true
    },
    default: {
      required: false,
      type: [String, Date],
      default: null
    },
    addons: {
      required: false,
      type: [Object],
      localized: true,
      default: () => ({})
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    floating: {
      required: false,
      type: [String, Boolean, Object],
      localized: true,
      default: null
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    displayFormat: {
      required: false,
      type: [String],
      default: null,
      '@default': 'locale.vueform.dateFormats.*'
    },
    valueFormat: {
      required: false,
      type: [String, Boolean],
      default: null,
      '@default': 'locale.vueform.dateFormats.*'
    },
    loadFormat: {
      required: false,
      type: [String],
      default: null,
      '@default': 'locale.vueform.dateFormats.*'
    },
    date: {
      required: false,
      type: [Boolean],
      default: true
    },
    time: {
      required: false,
      type: [Boolean],
      default: false
    },
    seconds: {
      required: false,
      type: [Boolean],
      default: false
    },
    hour24: {
      required: false,
      type: [Boolean],
      default: true
    },
    min: {
      required: false,
      type: [String, Date],
      default: null
    },
    max: {
      required: false,
      type: [String, Date],
      default: null
    },
    disables: {
      required: false,
      type: [Array],
      default: () => []
    },
    extendOptions: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    placeholder: {
      required: false,
      type: [String, Object],
      localized: true,
      default: null
    },
    readonly: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    autocomplete: {
      required: false,
      type: [String, Number],
      default: null
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$R, base$T, base$P, base$_, base$L, base$1i, base$U, base$X, base$G, base$A, base$z, date$1, base$H, base$1a, base$I, date$3, base$N, date$2, base$15, base$O, base$13, base$12, base$1g, base$14, base$11, base$y, date, base$W, base$K, base$Z, base$x];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after', 'addon-before', 'addon-after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var DatesElement = {
  name: 'DatesElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'dates',
      private: true
    },
    default: {
      required: false,
      type: [Array],
      default: () => []
    },
    addons: {
      required: false,
      type: [Object],
      localized: true,
      default: () => ({})
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    floating: {
      required: false,
      type: [String, Boolean, Object],
      localized: true,
      default: null
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    displayFormat: {
      required: false,
      type: [String],
      default: null
    },
    valueFormat: {
      required: false,
      type: [String, Boolean],
      default: null
    },
    loadFormat: {
      required: false,
      type: [String, Boolean],
      default: null
    },
    mode: {
      required: false,
      type: [String],
      default: 'multiple'
    },
    min: {
      required: false,
      type: [String, Date],
      default: null
    },
    max: {
      required: false,
      type: [String, Date],
      default: null
    },
    disables: {
      required: false,
      type: [Array],
      default: () => []
    },
    extendOptions: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    placeholder: {
      required: false,
      type: [String, Object],
      localized: true,
      default: null
    },
    readonly: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    autocomplete: {
      required: false,
      type: [String, Number],
      default: null
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$R, base$T, array$1, base$_, base$L, base$1i, dates$5, base$X, base$G, base$A, dates$2, dates$1, base$H, dates$4, base$1a, base$I, base$N, dates$3, base$15, base$O, base$13, base$12, base$1g, base$14, base$11, base$y, dates, base$W, base$K, base$Z, base$x];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after', 'addon-before', 'addon-after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var base$v = function base(props, context, dependencies) {
  var {
    embed,
    auto,
    methods,
    urls,
    uploadTempEndpoint,
    removeTempEndpoint,
    removeEndpoint,
    url,
    previewUrl,
    params,
    softRemove,
    view
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var value = dependencies.value;
  var isDisabled = dependencies.isDisabled;
  var validate = dependencies.validate;
  var invalid = dependencies.invalid;
  var path = dependencies.path;
  var axios = dependencies.axios;
  var request = dependencies.request;
  var uploading = dependencies.uploading;
  var input = dependencies.input;
  var update = dependencies.update;
  var fire = dependencies.fire;
  dependencies.isImageType;
  var removing = dependencies.removing;
  var handleError = dependencies.handleError;
  var el$ = dependencies.el$;

  // ================ DATA ================

  /**
   * Whether the file uploader has any errors.
   *
   * @type {boolean}
   * @default false
   */
  var hasUploadError = ref(false);

  /**
   * The percentage of progress when the file is being temporarily uploaded (0-100).
   *
   * @type {number}
   * @default 0
   */
  var progress = ref(0);

  /**
   * If the form is submitted and the file is not uploaded yet, the element will enter into `preparing` state and upload the temporary file before submitting the form.
   *
   * @type {boolean}
   * @default false
   */
  var preparing = ref(false);

  // ============== COMPUTED ==============

  /**
   * The HTTP request endpoints.
   *
   * @type {object}
   * @private
   */
  var endpoints = computed(() => {
    var configEndpoints = form$.value.$vueform.config.endpoints;
    var propEndpoints = {
      uploadTempFile: uploadTempEndpoint.value,
      removeTempFile: removeTempEndpoint.value,
      removeFile: removeEndpoint.value
    };
    var endpoints = {};
    Object.keys(propEndpoints).forEach(name => {
      var endpoint = configEndpoints[name];
      if (endpoint === false) {
        endpoint = f => f;
      }
      if (urls.value[name]) {
        endpoint = {
          url: urls.value[name],
          method: 'POST'
        };
      }
      if (methods.value[name] && typeof endpoint === 'object') {
        endpoint.method = methods.value[name];
      }
      if (typeof propEndpoints[name] === 'string') {
        if (configEndpoints[propEndpoints[name]] !== undefined) {
          endpoint = configEndpoints[propEndpoints[name]];
        } else {
          endpoint.url = propEndpoints[name];
        }
      }
      if (propEndpoints[name] === false) {
        endpoint = f => f;
      }
      if (typeof propEndpoints[name] === 'function') {
        endpoint = propEndpoints[name];
      }
      if (typeof propEndpoints[name] === 'object') {
        endpoint = {
          url: propEndpoints[name].url || propEndpoints[name].endpoint || configEndpoints[name].url,
          method: propEndpoints[name].method || configEndpoints[name].method
        };
      }
      endpoints[name] = endpoint;
    });
    return endpoints;
  });

  /**
   * URL to file using the [`url`](#url) option without including the filename. If `url` is not defined it will default to `'/'`.
   *
   * @type {string|boolean}
   * @private
   */
  var fileUrl = computed(() => {
    /* istanbul ignore next: will never be undefined, hardcoded `/`, failsafe only */
    if (url.value === undefined) {
      return '/';
    }
    if (url.value === false) {
      return '';
    }
    var fileUrl = url.value;
    if (!fileUrl.match(/\/$/)) {
      fileUrl += '/';
    }
    if (!fileUrl.match(/^(http|file)/) && !fileUrl.match(/^\//)) {
      fileUrl = '/' + fileUrl;
    }
    return fileUrl;
  });

  /**
   * URL to file preview image using the [`previewUrl`](#option-preview-url) option without including the filename. If `previewUrl` is not defined it will default to [`url`](#option-url).
   *
   * @type {string}
   * @private
   */
  /* istanbul ignore next: private computed, can not cover but tested */
  var filePreviewUrl = computed(() => {
    /* istanbul ignore else */
    if (previewUrl.value === undefined) {
      return fileUrl.value;
    }
    var filePreviewUrl = previewUrl.value;
    if (!filePreviewUrl.match(/\/$/)) {
      filePreviewUrl += '/';
    }
    if (!filePreviewUrl.match(/^http/) && !filePreviewUrl.match(/^\//)) {
      filePreviewUrl = '/' + filePreviewUrl;
    }
    return filePreviewUrl;
  });

  /**
   * The stage the file is at:
   *
   * * `0`: file not selected
   * * `1`: file selected
   * * `2`: file temporarily uploaded
   * * `3`: file permanently uploaded
   *
   * @type {number}
   */
  var stage = computed(() => {
    if (value.value === null) {
      return 0; // file not selected
    }
    if (value.value instanceof File) {
      return 1; // file selected
    }
    if (isObject_1(value.value) && value.value.tmp !== undefined) {
      return 2; // temp uploaded
    }
    if (isString_1(value.value)) {
      return 3; // file uploaded
    }
    return -1;
  });

  /**
   * The original or stored name of the file.
   *
   * @type {string}
   */
  var filename = computed(() => {
    switch (stage.value) {
      case 1:
        return value.value.name;
      case 2:
        return value.value.originalName;
      case 3:
        return value.value;
      default:
        return null;
    }
  });

  /**
   * The clickable link of the uploaded file.
   *
   * @type {string}
   */
  var link = computed(() => {
    if (!uploaded.value) {
      return;
    }
    return fileUrl.value + filename.value;
  });

  /**
   * The preview link of the uploaded file.
   *
   * @type {string}
   */
  /* istanbul ignore next: private computed, can not cover but tested */
  var previewLink = computed(() => {
    if (!uploaded.value) {
      return;
    }
    return filePreviewUrl.value + filename.value;
  });

  /**
   * The preview of the file when [`view`](#view) is `image` or `gallery`. Equals to the `link` if the file is already uploaded and `base64` if only selected or temporarily uploaded.
   *
   * @type {string}
   */
  var preview = computed(() => {
    var _value$value;
    if (view.value === 'file') {
      return null;
    }
    return uploaded.value ? previewLink.value : value.value instanceof File ? URL.createObjectURL(value.value) : ((_value$value = value.value) === null || _value$value === void 0 ? void 0 : _value$value.__file__) instanceof File ? URL.createObjectURL(value.value.__file__) : null;
  });

  /**
   * Whether the file is permanently uploaded.
   *
   * @type {boolean}
   */
  var uploaded = computed(() => {
    return stage.value === 3;
  });

  /**
   * Whether the file can be removed.
   *
   * @type {boolean}
   */
  var canRemove = computed(() => {
    return stage.value > 0 && !uploading.value && !isDisabled.value && !preparing.value && !removing.value;
  });

  /**
   * Whether temporary file can be uploaded.
   *
   * @type {boolean}
   */
  var canUploadTemp = computed(() => {
    return stage.value === 1 && !auto.value && !uploading.value && !isDisabled.value;
  });

  /**
   * Whether file can be selected.
   *
   * @type {boolean}
   */
  var canSelect = computed(() => {
    return !embed.value && stage.value == 0;
  });

  // =============== METHODS ==============

  /**
   * Upload temporary file (async).
   *
   * @returns {Promise}
   */
  var uploadTemp = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* () {
      if (stage.value !== 1) {
        throw new Error('No file is selected');
      }
      yield validate();
      if (invalid.value) {
        return;
      }
      request.value = axios.value.CancelToken.source();
      try {
        var data = _getFormData(Object.assign({}, params.value, {
          file: value.value,
          formKey: form$.value.options.formKey,
          path: path.value
        }));
        hasUploadError.value = false;
        var response;
        if (typeof endpoints.value.uploadTempFile === 'function') {
          response = yield endpoints.value.uploadTempFile(value.value, el$.value);
        } else {
          var method = endpoints.value.uploadTempFile.method.toLowerCase();
          response = yield axios.value.request({
            url: endpoints.value.uploadTempFile.url,
            method,
            [method === 'get' ? 'params' : 'data']: data,
            onUploadProgress: e => {
              progress.value = Math.round(e.loaded * 100 / e.total);
            },
            cancelToken: request.value.token
          });
          response = response.data;
        }
        if (response && typeof response === 'object') {
          response.__file__ = value.value;
        }
        update(response);
      } catch (error) {
        progress.value = 0;
        if (!axios.value.isCancel(error)) {
          hasUploadError.value = true;
          handleError(error);
        }
        throw new Error(error);
      } finally {
        request.value = null;
      }
    });
    return function uploadTemp() {
      return _ref.apply(this, arguments);
    };
  }();

  /**
   * Removes file (async):
   *
   * * in stage `1`: sets the value to `null`
   * * in stage `2`: submits a request to `removeTemp` endpoint (if [`softRemove: false`](#option-soft-remove)) and sets the value to `null`
   * * in stage `3`: submits a request to `remove` endpoint (if [`softRemove: false`](#option-soft-remove)) and sets the value to `null`
   *
   * @returns {Promise}
   */
  var remove = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(function* () {
      removing.value = true;
      hasUploadError.value = false;
      try {
        if (stage.value === 3 && !softRemove.value) {
          if (!confirm(form$.value.translations.vueform.elements.file.removeConfirm)) {
            return false;
          }
          if (typeof endpoints.value.removeFile === 'function') {
            yield endpoints.value.removeFile(value.value, el$.value);
          } else {
            var method = endpoints.value.removeFile.method.toLowerCase();
            yield axios.value.request({
              method,
              url: endpoints.value.removeFile.url,
              [method === 'get' ? 'params' : 'data']: Object.assign({}, params.value, {
                file: value.value,
                formKey: form$.value.options.formKey,
                path: path.value
              })
            });
          }
        } else if (stage.value === 2 && !softRemove.value) {
          if (typeof endpoints.value.removeTempFile === 'function') {
            yield endpoints.value.removeTempFile(value.value, el$.value);
          } else {
            var _method = endpoints.value.removeTempFile.method.toLowerCase();
            yield axios.value.request({
              method: _method,
              url: endpoints.value.removeTempFile.url,
              [_method === 'get' ? 'params' : 'data']: Object.assign({}, params.value, {
                file: value.value.tmp,
                formKey: form$.value.options.formKey,
                path: path.value
              })
            });
          }
        }
      } catch (error) {
        handleError(error);
        return;
      } finally {
        removing.value = false;
      }
      update(null);
      progress.value = 0;
      fire('remove');
    });
    return function remove() {
      return _ref2.apply(this, arguments);
    };
  }();

  /**
   * Prepare the element for submitting the form (async). It will upload temp file if it hasn't been uploaded yet and halts the submit process until it is done without any errors.
   *
   * @returns {Promise}
   * @private
   */
  var prepare = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator(function* () {
      // In selected state
      if (stage.value === 1) {
        preparing.value = true;
        try {
          yield uploadTemp();
        } finally {
          preparing.value = false;
        }
      }
    });
    return function prepare() {
      return _ref3.apply(this, arguments);
    };
  }();

  /**
   * Handles `change` event.
   *
   * @param {Event} e* event object
   * @returns {Promise}
   * @private
   */
  var handleChange = /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator(function* (e) {
      //@todo:adam handleChange has to be async and await uploadTemp() and input.value.value should be before update because otherwise it may not exist
      var file = e.target.files[0];
      input.value.value = '';
      update(file || null);
      if (auto.value) {
        yield uploadTemp();
      }
      if (form$.value.shouldValidateOnChange) {
        validate();
      }
    });
    return function handleChange(_x) {
      return _ref4.apply(this, arguments);
    };
  }();

  /**
   * Handles file select button `click` event.
   *
   * @returns {void}
   * @private
   */
  var handleClick = () => {
    if (isDisabled.value) {
      return;
    }
    input.value.click();
  };

  /**
   * Handles `uploadTemp` event.
   *
   * @returns {void}
   * @private
   */
  var handleUploadTemp = () => {
    uploadTemp();
  };

  /**
   * Handles `remove` event.
   *
   * @returns {void}
   * @private
   */
  var handleRemove = () => {
    remove();
  };

  /**
   * Handles `abort` event.
   *
   * @returns {void}
   * @private
   */
  var handleAbort = () => {
    if (request.value === null) {
      return;
    }
    request.value.cancel();
  };
  if (value.value instanceof File && auto.value) {
    nextTick(() => {
      uploadTemp();
    });
  }
  return {
    hasUploadError,
    progress,
    preparing,
    endpoints,
    fileUrl,
    stage,
    filename,
    link,
    preview,
    uploaded,
    canRemove,
    canUploadTemp,
    canSelect,
    uploadTemp,
    remove,
    prepare,
    handleChange,
    handleClick,
    handleUploadTemp,
    handleRemove,
    handleAbort
  };
};

var base$u = function base(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;

  // ================ DATA ================

  /**
   * The axios request when temp is being uploaded.
   *
   * @type {object}
   * @private
   */
  var request = ref(null);

  /**
   * The form's axios instance.
   *
   * @type {object}
   * @private
   */
  var axios = ref(null);

  // ============== COMPUTED ==============

  /**
   * Whether a temp file is currently being uploaded.
   *
   * @type {boolean}
   * @private
   */
  var uploading = computed(() => {
    return request.value !== null;
  });

  // =============== HOOKS ================

  onMounted(() => {
    axios.value = form$.value.$vueform.services.axios;
  });
  return {
    request,
    axios,
    uploading
  };
};

function checkFileType(file, accept) {
  if (!accept) {
    return true;
  }
  if (!isArray_1(accept)) {
    accept = accept.split(',');
    each(accept, (one, i) => {
      accept[i] = one.trim();
    });
  }
  return some_1(accept, a => {
    var universal = a.match(/^([^\/]+)\/\*$/);
    if (universal) {
      return !!new RegExp("^".concat(universal[1], "/")).exec(file.type);
    } else if (a == file.type) {
      return true;
    } else if (a == ".".concat(file.name.split('.').pop())) {
      return true;
    }
    return false;
  });
}

var base$t = function base(props, context, dependencies) {
  var {
    accept,
    auto
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var update = dependencies.update;
  var isDisabled = dependencies.isDisabled;
  var uploadTemp = dependencies.uploadTemp;

  // ============== COMPUTED ==============

  /**
   * Whether `drop` is enabled and browser supports dragging.
   *
   * @type {boolean}
   * @private
   */
  var canDrop = computed(() => {
    var div = document.createElement('div');
    return ('draggable' in div || (/* istanbul ignore next: failsafe only, can not influence div from outside */'ondragstart' in div && 'ondrop' in div)) && 'FormData' in window && 'FileReader' in window;
  });

  // =============== METHODS ==============

  /**
   * Handles the `drop` event.
   *
   * @param {Event} e* event object
   * @returns {void}
   * @private
   */
  var handleDrop = e => {
    if (isDisabled.value) {
      return;
    }
    var file = e.dataTransfer.files[0];
    if (!checkFileType(file, accept.value)) {
      return;
    }
    update(file || /* istanbul ignore next: failsafe only */null);
    if (auto.value) {
      uploadTemp();
    }
    file.value = null;
  };
  return {
    canDrop,
    handleDrop
  };
};
var multifile$3 = function multifile(props, context, dependencies) {
  var {
    accept
  } = toRefs(props);
  var {
    canDrop
  } = base$t(props, context, dependencies);

  // ============ DEPENDENCIES =============

  var add = dependencies.add;
  var isDisabled = dependencies.isDisabled;
  var isObject = dependencies.isObject;
  var storeFileName = dependencies.storeFileName;

  // =============== METHODS ==============

  var handleDrop = e => {
    if (!e.dataTransfer || !e.dataTransfer.files || e.dataTransfer.files.length == 0 || isDisabled.value) {
      return;
    }
    each(e.dataTransfer.files, file => {
      if (!checkFileType(file, accept.value)) {
        return;
      }
      add(isObject.value ? {
        [storeFileName.value]: file
      } : file);
    });
  };
  return {
    canDrop,
    handleDrop
  };
};

var base$s = function base(props, context, dependencies) {
  // ================ DATA ================

  /**
   * Whether async file removing request is in progress.
   *
   * @type {boolean}
   */
  var removing = ref(false);
  return {
    removing
  };
};

var base$r = function base(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var fire = dependencies.fire;
  dependencies.listeners;

  // =============== METHODS ==============

  /**
   * Handles `error` event.
   *
   * @param {Error} error* the error object containing `response` property
   * @returns {void}
   * @private
   */
  var handleError = error => {
    fire('error', error);
  };
  return {
    handleError
  };
};

var FileElement = {
  name: 'FileElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'remove', 'error', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'file',
      private: true
    },
    default: {
      required: false,
      type: [String, Object],
      default: null
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    onRemove: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onError: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    view: {
      type: [String],
      required: false,
      default: 'file'
    },
    drop: {
      required: false,
      type: [Boolean],
      default: false
    },
    accept: {
      required: false,
      type: [String, Array],
      default: null
    },
    clickable: {
      required: false,
      type: [Boolean],
      default: true
    },
    url: {
      required: false,
      type: [String, Boolean],
      default: '/'
    },
    previewUrl: {
      required: false,
      type: [String],
      default: undefined
    },
    auto: {
      required: false,
      type: [Boolean],
      default: true
    },
    urls: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    methods: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    uploadTempEndpoint: {
      required: false,
      type: [Object, String, Function, Boolean, Promise],
      default: undefined,
      '@default': 'config.endpoints.uploadTempFile'
    },
    removeTempEndpoint: {
      required: false,
      type: [Object, String, Function, Boolean, Promise],
      default: undefined,
      '@default': 'config.endpoints.removeTempFile'
    },
    removeEndpoint: {
      required: false,
      type: [Object, String, Function, Boolean, Promise],
      default: undefined,
      '@default': 'config.endpoints.removeFile'
    },
    params: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    softRemove: {
      required: false,
      type: [Boolean],
      default: false
    },
    embed: {
      type: [Boolean],
      required: false,
      default: false,
      private: true
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$R, base$T, base$P, base$s, base$_, base$1i, file$3, base$X, base$u, base$H, base$1a, base$Q, file$1, base$N, file, base$r, base$v, base$t, base$15, file$2, base$13, base$12, base$1g, base$14, base$11, file$4, base$K, base$Z];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var base$q = function base(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var model = dependencies.model;

  // =============== METHODS ==============

  /**
   * Handles `input` event.
   *
   * @param {Event} e* event object
   * @returns {void}
   * @private
   */
  var handleInput = e => {
    model.value = e.target.value;
  };
  return {
    handleInput
  };
};
var phone$1 = function phone(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var {
    model,
    input,
    el$
  } = dependencies;

  // ============== COMPUTED ==============

  /**
   * Handles `input` event.
   *
   * @param {Event} e* event object
   * @returns {void}
   * @private
   */
  var handleInput = e => {
    if (el$.value.maskPluginInstalled) {
      model.value = e.target.value;
      return;
    }
    var startsWithPlus = e.target.value.startsWith('+');
    var value = e.target.value.substr(startsWithPlus ? 1 : 0);
    var numbers = value.match(/\d+/g) || [];
    if (numbers.length || startsWithPlus) {
      value = '+';
    }
    value += numbers.join('');
    input.value.value = value;
    model.value = value;
  };
  return {
    handleInput
  };
};

var GenericElement = {
  register: false,
  name: 'GenericElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: '',
      private: true
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    default: {
      required: false,
      type: [String, Number, Object],
      default: undefined
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$R, base$T, generic, base$_, base$1i, base$U, base$X, text$1, base$1a, text$2, base$Q, base$N, base$F, base$15, base$O, base$13, base$12, base$1g, base$14, base$11, base$q, base$w, base$W, base$K, base$Z];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var walkCells = (grid, callback) => {
  var occupied = [];
  grid.forEach((cols, rowIndex) => {
    occupied[rowIndex] = occupied[rowIndex] || [];
    var paddedColIndex = 0;
    cols.forEach((cell, colIndex) => {
      while (occupied[rowIndex][paddedColIndex]) {
        paddedColIndex++;
      }
      var field = null;
      var colspan = 1;
      var rowspan = 1;
      if (Array.isArray(cell)) {
        field = cell[0] === undefined ? null : cell[0];
        colspan = cell[1] || 1;
        rowspan = cell[2] || 1;
      }
      var rowStart = rowIndex;
      var colStart = paddedColIndex;
      var rowEnd = rowIndex + rowspan - 1;
      var colEnd = paddedColIndex + colspan - 1;
      callback({
        cell,
        field,
        rowspan,
        colspan,
        rowIndex,
        colIndex,
        paddedColIndex,
        rowStart,
        colStart,
        rowEnd,
        colEnd
      });

      // Mark all affected cells as occupied
      for (var r = rowIndex; r <= rowEnd; r++) {
        occupied[r] = occupied[r] || [];
        for (var c = paddedColIndex; c <= colEnd; c++) {
          occupied[r][c] = true;
        }
      }
      paddedColIndex += colspan;
    });
  });
};

var base$p = function base(props, context, dependencies) {
  var {
    grid,
    align: alignProp,
    valign: valignProp,
    presets,
    cols,
    rows,
    name,
    widths,
    minWidth,
    maxWidth
  } = toRefs(props);
  var {
    el$,
    form$,
    path
  } = dependencies;
  inject('config$');

  // ============== COMPUTED ==============

  /**
   * The list of cells that should be displayed in the grid.
   *
   * @type {array}
   */
  var cells = computed(() => {
    resolvedRows.value;
    var cells = [];
    walkCells(resolvedRows.value, _ref => {
      var {
        field,
        colspan,
        rowspan,
        colIndex,
        rowIndex,
        rowStart,
        colStart,
        rowEnd,
        colEnd
      } = _ref;
      cells.push(_objectSpread2$1(_objectSpread2$1({}, field), {}, {
        col: colIndex,
        row: rowIndex,
        colStart,
        rowStart,
        colEnd,
        rowEnd,
        style: colspan > 1 || rowspan > 1 ? {
          'grid-area': "".concat(rowStart + 1, " / ").concat(colStart + 1, " / ").concat(rowEnd + 2, " / ").concat(colEnd + 2)
        } : {}
      }));
    });
    return cells;
  });

  /**
   * The cells that should be displayed in a row format.
   *
   * @type {array}
   */
  var resolvedRows = computed(() => {
    var resolvedRows = [];
    var rows = grid.value || [];
    if (!rows || !rows.length) {
      rows = [...Array(rows.value)].map(r => [...Array(cols.value)].map(c => null));
    }
    rows = rows.map(cols => cols.map(cell => Array.isArray(cell) ? cell : [cell]));
    rows.forEach((cols, r) => {
      var resolvedCols = [];
      cols.forEach((_ref2, c) => {
        var [content, colspan, rowspan, align, valign, attrs] = _ref2;
        var col = {
          content: form$.value.$vueform.sanitize(content),
          colspan: colspan || 1,
          rowspan: rowspan || 1,
          align: align || alignProp.value,
          valign: valign || valignProp.value,
          attrs: attrs || {},
          row: r,
          col: c,
          slot: "cell_".concat(r, "_").concat(c)
        };
        if (content && typeof content === 'object') {
          col = _objectSpread2$1(_objectSpread2$1({}, col), {}, {
            component: "".concat(upperFirst_1(camelCase_1(content.type)), "Element"),
            name: content.name || resolveComponentName(r, c),
            schema: _objectSpread2$1(_objectSpread2$1({}, content), {}, {
              presets: presets.value
            })
          });
        }
        resolvedCols.push([col, col.colspan, col.rowspan, col.align]);
      });
      resolvedRows.push(resolvedCols);
    });
    return resolvedRows;
  });

  /**
   * The `style` properties that should be added to the grid's DOM element.
   *
   * @type {object}
   */
  var gridStyle = computed(() => {
    var colWidths = [];
    for (var c = 0; c < parseInt(cols.value); c++) {
      var width = widths.value[c];
      colWidths.push(typeof width === 'number' || /\d$/.test(width) ? "".concat(width, "px") : width || '1fr');
    }
    return {
      'grid-template-columns': colWidths.join(' '),
      'grid-template-rows': "repeat(".concat(rows.value, ", auto)"),
      'min-width': typeof minWidth.value === 'number' ? "".concat(minWidth.value, "px") : minWidth.value,
      'max-width': typeof maxWidth.value === 'number' ? maxWidth.value > 0 ? "".concat(maxWidth.value, "px") : undefined : maxWidth.value
    };
  });

  /**
   * Whether the element width should be fitted to the columns, because each columns have strictly specified widths in non-grid relative values.
   *
   * @type {boolean}
   */
  var fitWidth = computed(() => {
    if (widths.value.length < cols.value) {
      return false;
    }
    var units = ['cm', 'mm', 'in', 'px', 'pt', 'pc', 'em', 'ex', 'ch', 'rem', 'vw', 'vh', 'vmin', 'vmax'];
    return widths.value.slice(0, cols.value).every(width => typeof width === 'number' || width && units.some(unit => width.endsWith(unit)) || /\d$/.test(width));
  });

  /**
   * Whether the element is in table view (has `grid-table` preset).
   *
   * @type {boolean}
   */
  var isTableView = computed(() => {
    return presets.value.includes('grid-table');
  });

  // ============== METHODS ===============

  /**
   * Resolves the cell component name based on row and column index.
   *
   * @returns {string}
   * @param {number} rowIndex* the index of the row
   * @param {number} colIndex* the index of the column
   */
  var resolveComponentName = (rowIndex, colIndex) => {
    return "".concat(name.value, "_").concat(rowIndex, "_").concat(colIndex);
  };
  return {
    cells,
    fitWidth,
    isTableView,
    gridStyle,
    resolvedRows,
    resolveComponentName
  };
};

var base$o = function base(props, context, dependencies) {
  // ================ DATA ================

  /**
   * List of child element components.
   *
   * @type {array}
   * @default [array]
   * @private
   */
  var children$Array = ref([]);

  // ============== COMPUTED ==============

  /**
   * Child element components.
   *
   * @type {object}
   */
  var children$ = computed(() => {
    var children$ = {};
    children$Array.value.forEach(e$ => {
      children$[e$.name] = e$;
    });
    return children$;
  });

  // =============== METHODS ==============

  return {
    children$Array,
    children$
  };
};
var object = function object(props, context, dependencies) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var schemaName = options.schemaName || 'schema';
  var {
    [schemaName]: schema
  } = toRefs(props);
  var {
    children$Array,
    children$
  } = base$o();

  // ============== COMPUTED ==============

  /**
   * Schema of child elements.
   *
   * @type {object}
   * @private
   */
  var children = computed(() => {
    return schema.value;
  });

  // Resort children$Array when children
  // order changes or a child is removed
  /* istanbul ignore else */
  if (schema) {
    watch(schema, newValue => {
      var newChildren$Array = [];
      each(newValue, (child, name) => {
        var child$ = children$Array.value[children$Array.value.map(e$ => normalize(e$.name)).indexOf(normalize(name))];
        if (child$) {
          newChildren$Array.push(child$);
        }
      });
      children$Array.value = newChildren$Array;
    }, {
      flush: 'post',
      deep: true
    });
  }
  return {
    children,
    children$Array,
    children$
  };
};
var group = object;

var GridElement = {
  name: 'GridElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'group',
      private: true
    },
    default: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    cols: {
      required: false,
      type: [Number],
      default: 1
    },
    rows: {
      required: false,
      type: [Number],
      default: 1
    },
    grid: {
      required: false,
      type: [Array],
      default: () => []
    },
    align: {
      required: false,
      type: [String],
      default: 'left'
    },
    valign: {
      required: false,
      type: [String],
      default: 'baseline'
    },
    widths: {
      required: false,
      type: [Array],
      default: () => []
    },
    minWidth: {
      required: false,
      type: [String, Number],
      default: 0
    },
    maxWidth: {
      required: false,
      type: [String, Number],
      default: -1
    },
    scrollable: {
      required: false,
      type: [Boolean],
      default: false
    },
    colHeader: {
      required: false,
      type: [Boolean],
      default: false
    },
    rowHeader: {
      required: false,
      type: [Boolean],
      default: false
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, group$6, base$_, object$5, base$1i, grid$1, group, group$2, base$15, base$p, grid, group$5, base$18, group$8, base$13, base$12, base$1g, base$14, base$11, group$1, base$W, group$4, base$Z];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var GroupElement = {
  name: 'GroupElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'group',
      private: true
    },
    default: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    schema: {
      required: false,
      type: [Object],
      default: () => ({})
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, group$6, base$_, object$5, base$1i, group$7, group, group$2, base$15, group$3, group$5, base$18, group$8, base$13, base$12, base$1g, base$14, base$11, group$1, base$W, group$4, base$Z];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var base$n = function base(props, context, dependencies) {
  var {
    forceNumbers
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var {
    form$
  } = dependencies;

  // =============== INJECT ===============

  var config$ = inject('config$');

  // =============== METHODS ===============

  /**
   * Whether the value should be converted to number/float.
   *
   * @returns {boolean}
   * @private
   */
  var shouldForceNumbers = () => {
    return forceNumbers.value || config$.value.config.forceNumbers && form$.value.options.forceNumbers !== false && forceNumbers.value !== false || form$.value.options.forceNumbers && forceNumbers.value !== false;
  };

  /**
   * Converts string value to number or float.
   *
   * @param {any} str* the string to be converted
   * @returns {number|float|string}
   * @private
   */
  var stringToNumber = str => {
    var v = str;
    if (typeof str === 'string') {
      if (/^[-]?\d+([\.,]\d+)?$/.test(str)) {
        v = parseFloat(str.replace(',', '.'));
      } else if (/^[-]?\d+$/.test(str)) {
        v = parseInt(str, 10);
      }
    }
    return v;
  };
  return {
    shouldForceNumbers,
    stringToNumber
  };
};

var HiddenElement = {
  name: 'HiddenElement',
  mixins: [BaseElement, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'hidden',
      private: true
    },
    default: {
      required: false,
      type: [String, Number, Object],
      default: null
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    meta: {
      required: false,
      type: [Boolean],
      default: false
    },
    forceNumbers: {
      required: false,
      type: [Boolean],
      default: null
    },
    expression: {
      required: false,
      type: [String, Object],
      default: undefined,
      localized: true
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$R, base$T, base$P, base$O, base$_, base$12, base$1i, base$U, hidden$1, base$1a, base$I, base$n, hidden$2, base$N, hidden, base$K, base$Z];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

/**!
 * Sortable 1.15.6
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof(obj);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}

var version = "1.15.6";

function userAgent(pattern) {
  if (typeof window !== 'undefined' && window.navigator) {
    return !! /*@__PURE__*/navigator.userAgent.match(pattern);
  }
}
var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
var Edge = userAgent(/Edge/i);
var FireFox = userAgent(/firefox/i);
var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
var IOS = userAgent(/iP(ad|od|hone)/i);
var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);

var captureMode = {
  capture: false,
  passive: false
};
function on(el, event, fn) {
  el.addEventListener(event, fn, !IE11OrLess && captureMode);
}
function off(el, event, fn) {
  el.removeEventListener(event, fn, !IE11OrLess && captureMode);
}
function matches( /**HTMLElement*/el, /**String*/selector) {
  if (!selector) return;
  selector[0] === '>' && (selector = selector.substring(1));
  if (el) {
    try {
      if (el.matches) {
        return el.matches(selector);
      } else if (el.msMatchesSelector) {
        return el.msMatchesSelector(selector);
      } else if (el.webkitMatchesSelector) {
        return el.webkitMatchesSelector(selector);
      }
    } catch (_) {
      return false;
    }
  }
  return false;
}
function getParentOrHost(el) {
  return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
}
function closest( /**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx, includeCTX) {
  if (el) {
    ctx = ctx || document;
    do {
      if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
        return el;
      }
      if (el === ctx) break;
      /* jshint boss:true */
    } while (el = getParentOrHost(el));
  }
  return null;
}
var R_SPACE = /\s+/g;
function toggleClass(el, name, state) {
  if (el && name) {
    if (el.classList) {
      el.classList[state ? 'add' : 'remove'](name);
    } else {
      var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
      el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
    }
  }
}
function css(el, prop, val) {
  var style = el && el.style;
  if (style) {
    if (val === void 0) {
      if (document.defaultView && document.defaultView.getComputedStyle) {
        val = document.defaultView.getComputedStyle(el, '');
      } else if (el.currentStyle) {
        val = el.currentStyle;
      }
      return prop === void 0 ? val : val[prop];
    } else {
      if (!(prop in style) && prop.indexOf('webkit') === -1) {
        prop = '-webkit-' + prop;
      }
      style[prop] = val + (typeof val === 'string' ? '' : 'px');
    }
  }
}
function matrix(el, selfOnly) {
  var appliedTransforms = '';
  if (typeof el === 'string') {
    appliedTransforms = el;
  } else {
    do {
      var transform = css(el, 'transform');
      if (transform && transform !== 'none') {
        appliedTransforms = transform + ' ' + appliedTransforms;
      }
      /* jshint boss:true */
    } while (!selfOnly && (el = el.parentNode));
  }
  var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
  /*jshint -W056 */
  return matrixFn && new matrixFn(appliedTransforms);
}
function find(ctx, tagName, iterator) {
  if (ctx) {
    var list = ctx.getElementsByTagName(tagName),
      i = 0,
      n = list.length;
    if (iterator) {
      for (; i < n; i++) {
        iterator(list[i], i);
      }
    }
    return list;
  }
  return [];
}
function getWindowScrollingElement() {
  var scrollingElement = document.scrollingElement;
  if (scrollingElement) {
    return scrollingElement;
  } else {
    return document.documentElement;
  }
}

/**
 * Returns the "bounding client rect" of given element
 * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
 * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
 * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
 * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
 * @param  {[HTMLElement]} container              The parent the element will be placed in
 * @return {Object}                               The boundingClientRect of el, with specified adjustments
 */
function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
  if (!el.getBoundingClientRect && el !== window) return;
  var elRect, top, left, bottom, right, height, width;
  if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
    elRect = el.getBoundingClientRect();
    top = elRect.top;
    left = elRect.left;
    bottom = elRect.bottom;
    right = elRect.right;
    height = elRect.height;
    width = elRect.width;
  } else {
    top = 0;
    left = 0;
    bottom = window.innerHeight;
    right = window.innerWidth;
    height = window.innerHeight;
    width = window.innerWidth;
  }
  if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
    // Adjust for translate()
    container = container || el.parentNode;

    // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
    // Not needed on <= IE11
    if (!IE11OrLess) {
      do {
        if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {
          var containerRect = container.getBoundingClientRect();

          // Set relative to edges of padding box of container
          top -= containerRect.top + parseInt(css(container, 'border-top-width'));
          left -= containerRect.left + parseInt(css(container, 'border-left-width'));
          bottom = top + elRect.height;
          right = left + elRect.width;
          break;
        }
        /* jshint boss:true */
      } while (container = container.parentNode);
    }
  }
  if (undoScale && el !== window) {
    // Adjust for scale()
    var elMatrix = matrix(container || el),
      scaleX = elMatrix && elMatrix.a,
      scaleY = elMatrix && elMatrix.d;
    if (elMatrix) {
      top /= scaleY;
      left /= scaleX;
      width /= scaleX;
      height /= scaleY;
      bottom = top + height;
      right = left + width;
    }
  }
  return {
    top: top,
    left: left,
    bottom: bottom,
    right: right,
    width: width,
    height: height
  };
}

/**
 * Checks if a side of an element is scrolled past a side of its parents
 * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
 * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
 * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
 * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
 */
function isScrolledPast(el, elSide, parentSide) {
  var parent = getParentAutoScrollElement(el, true),
    elSideVal = getRect(el)[elSide];

  /* jshint boss:true */
  while (parent) {
    var parentSideVal = getRect(parent)[parentSide],
      visible = void 0;
    if (parentSide === 'top' || parentSide === 'left') {
      visible = elSideVal >= parentSideVal;
    } else {
      visible = elSideVal <= parentSideVal;
    }
    if (!visible) return parent;
    if (parent === getWindowScrollingElement()) break;
    parent = getParentAutoScrollElement(parent, false);
  }
  return false;
}

/**
 * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
 * and non-draggable elements
 * @param  {HTMLElement} el       The parent element
 * @param  {Number} childNum      The index of the child
 * @param  {Object} options       Parent Sortable's options
 * @return {HTMLElement}          The child at index childNum, or null if not found
 */
function getChild(el, childNum, options, includeDragEl) {
  var currentChild = 0,
    i = 0,
    children = el.children;
  while (i < children.length) {
    if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {
      if (currentChild === childNum) {
        return children[i];
      }
      currentChild++;
    }
    i++;
  }
  return null;
}

/**
 * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
 * @param  {HTMLElement} el       Parent element
 * @param  {selector} selector    Any other elements that should be ignored
 * @return {HTMLElement}          The last child, ignoring ghostEl
 */
function lastChild(el, selector) {
  var last = el.lastElementChild;
  while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {
    last = last.previousElementSibling;
  }
  return last || null;
}

/**
 * Returns the index of an element within its parent for a selected set of
 * elements
 * @param  {HTMLElement} el
 * @param  {selector} selector
 * @return {number}
 */
function index$1(el, selector) {
  var index = 0;
  if (!el || !el.parentNode) {
    return -1;
  }

  /* jshint boss:true */
  while (el = el.previousElementSibling) {
    if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {
      index++;
    }
  }
  return index;
}

/**
 * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
 * The value is returned in real pixels.
 * @param  {HTMLElement} el
 * @return {Array}             Offsets in the format of [left, top]
 */
function getRelativeScrollOffset(el) {
  var offsetLeft = 0,
    offsetTop = 0,
    winScroller = getWindowScrollingElement();
  if (el) {
    do {
      var elMatrix = matrix(el),
        scaleX = elMatrix.a,
        scaleY = elMatrix.d;
      offsetLeft += el.scrollLeft * scaleX;
      offsetTop += el.scrollTop * scaleY;
    } while (el !== winScroller && (el = el.parentNode));
  }
  return [offsetLeft, offsetTop];
}

/**
 * Returns the index of the object within the given array
 * @param  {Array} arr   Array that may or may not hold the object
 * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
 * @return {Number}      The index of the object in the array, or -1
 */
function indexOfObject(arr, obj) {
  for (var i in arr) {
    if (!arr.hasOwnProperty(i)) continue;
    for (var key in obj) {
      if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);
    }
  }
  return -1;
}
function getParentAutoScrollElement(el, includeSelf) {
  // skip to window
  if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
  var elem = el;
  var gotSelf = false;
  do {
    // we don't need to get elem css if it isn't even overflowing in the first place (performance)
    if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
      var elemCSS = css(elem);
      if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {
        if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
        if (gotSelf || includeSelf) return elem;
        gotSelf = true;
      }
    }
    /* jshint boss:true */
  } while (elem = elem.parentNode);
  return getWindowScrollingElement();
}
function extend(dst, src) {
  if (dst && src) {
    for (var key in src) {
      if (src.hasOwnProperty(key)) {
        dst[key] = src[key];
      }
    }
  }
  return dst;
}
function isRectEqual(rect1, rect2) {
  return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
}
var _throttleTimeout;
function throttle$1(callback, ms) {
  return function () {
    if (!_throttleTimeout) {
      var args = arguments,
        _this = this;
      if (args.length === 1) {
        callback.call(_this, args[0]);
      } else {
        callback.apply(_this, args);
      }
      _throttleTimeout = setTimeout(function () {
        _throttleTimeout = void 0;
      }, ms);
    }
  };
}
function cancelThrottle() {
  clearTimeout(_throttleTimeout);
  _throttleTimeout = void 0;
}
function scrollBy(el, x, y) {
  el.scrollLeft += x;
  el.scrollTop += y;
}
function clone(el) {
  var Polymer = window.Polymer;
  var $ = window.jQuery || window.Zepto;
  if (Polymer && Polymer.dom) {
    return Polymer.dom(el).cloneNode(true);
  } else if ($) {
    return $(el).clone(true)[0];
  } else {
    return el.cloneNode(true);
  }
}
function getChildContainingRectFromElement(container, options, ghostEl) {
  var rect = {};
  Array.from(container.children).forEach(function (child) {
    var _rect$left, _rect$top, _rect$right, _rect$bottom;
    if (!closest(child, options.draggable, container, false) || child.animated || child === ghostEl) return;
    var childRect = getRect(child);
    rect.left = Math.min((_rect$left = rect.left) !== null && _rect$left !== void 0 ? _rect$left : Infinity, childRect.left);
    rect.top = Math.min((_rect$top = rect.top) !== null && _rect$top !== void 0 ? _rect$top : Infinity, childRect.top);
    rect.right = Math.max((_rect$right = rect.right) !== null && _rect$right !== void 0 ? _rect$right : -Infinity, childRect.right);
    rect.bottom = Math.max((_rect$bottom = rect.bottom) !== null && _rect$bottom !== void 0 ? _rect$bottom : -Infinity, childRect.bottom);
  });
  rect.width = rect.right - rect.left;
  rect.height = rect.bottom - rect.top;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
var expando = 'Sortable' + new Date().getTime();

function AnimationStateManager() {
  var animationStates = [],
    animationCallbackId;
  return {
    captureAnimationState: function captureAnimationState() {
      animationStates = [];
      if (!this.options.animation) return;
      var children = [].slice.call(this.el.children);
      children.forEach(function (child) {
        if (css(child, 'display') === 'none' || child === Sortable.ghost) return;
        animationStates.push({
          target: child,
          rect: getRect(child)
        });
        var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect);

        // If animating: compensate for current animation
        if (child.thisAnimationDuration) {
          var childMatrix = matrix(child, true);
          if (childMatrix) {
            fromRect.top -= childMatrix.f;
            fromRect.left -= childMatrix.e;
          }
        }
        child.fromRect = fromRect;
      });
    },
    addAnimationState: function addAnimationState(state) {
      animationStates.push(state);
    },
    removeAnimationState: function removeAnimationState(target) {
      animationStates.splice(indexOfObject(animationStates, {
        target: target
      }), 1);
    },
    animateAll: function animateAll(callback) {
      var _this = this;
      if (!this.options.animation) {
        clearTimeout(animationCallbackId);
        if (typeof callback === 'function') callback();
        return;
      }
      var animating = false,
        animationTime = 0;
      animationStates.forEach(function (state) {
        var time = 0,
          target = state.target,
          fromRect = target.fromRect,
          toRect = getRect(target),
          prevFromRect = target.prevFromRect,
          prevToRect = target.prevToRect,
          animatingRect = state.rect,
          targetMatrix = matrix(target, true);
        if (targetMatrix) {
          // Compensate for current animation
          toRect.top -= targetMatrix.f;
          toRect.left -= targetMatrix.e;
        }
        target.toRect = toRect;
        if (target.thisAnimationDuration) {
          // Could also check if animatingRect is between fromRect and toRect
          if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) &&
          // Make sure animatingRect is on line between toRect & fromRect
          (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
            // If returning to same place as started from animation and on same axis
            time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
          }
        }

        // if fromRect != toRect: animate
        if (!isRectEqual(toRect, fromRect)) {
          target.prevFromRect = fromRect;
          target.prevToRect = toRect;
          if (!time) {
            time = _this.options.animation;
          }
          _this.animate(target, animatingRect, toRect, time);
        }
        if (time) {
          animating = true;
          animationTime = Math.max(animationTime, time);
          clearTimeout(target.animationResetTimer);
          target.animationResetTimer = setTimeout(function () {
            target.animationTime = 0;
            target.prevFromRect = null;
            target.fromRect = null;
            target.prevToRect = null;
            target.thisAnimationDuration = null;
          }, time);
          target.thisAnimationDuration = time;
        }
      });
      clearTimeout(animationCallbackId);
      if (!animating) {
        if (typeof callback === 'function') callback();
      } else {
        animationCallbackId = setTimeout(function () {
          if (typeof callback === 'function') callback();
        }, animationTime);
      }
      animationStates = [];
    },
    animate: function animate(target, currentRect, toRect, duration) {
      if (duration) {
        css(target, 'transition', '');
        css(target, 'transform', '');
        var elMatrix = matrix(this.el),
          scaleX = elMatrix && elMatrix.a,
          scaleY = elMatrix && elMatrix.d,
          translateX = (currentRect.left - toRect.left) / (scaleX || 1),
          translateY = (currentRect.top - toRect.top) / (scaleY || 1);
        target.animatingX = !!translateX;
        target.animatingY = !!translateY;
        css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');
        this.forRepaintDummy = repaint(target); // repaint

        css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
        css(target, 'transform', 'translate3d(0,0,0)');
        typeof target.animated === 'number' && clearTimeout(target.animated);
        target.animated = setTimeout(function () {
          css(target, 'transition', '');
          css(target, 'transform', '');
          target.animated = false;
          target.animatingX = false;
          target.animatingY = false;
        }, duration);
      }
    }
  };
}
function repaint(target) {
  return target.offsetWidth;
}
function calculateRealTime(animatingRect, fromRect, toRect, options) {
  return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
}

var plugins = [];
var defaults = {
  initializeByDefault: true
};
var PluginManager = {
  mount: function mount(plugin) {
    // Set default static properties
    for (var option in defaults) {
      if (defaults.hasOwnProperty(option) && !(option in plugin)) {
        plugin[option] = defaults[option];
      }
    }
    plugins.forEach(function (p) {
      if (p.pluginName === plugin.pluginName) {
        throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
      }
    });
    plugins.push(plugin);
  },
  pluginEvent: function pluginEvent(eventName, sortable, evt) {
    var _this = this;
    this.eventCanceled = false;
    evt.cancel = function () {
      _this.eventCanceled = true;
    };
    var eventNameGlobal = eventName + 'Global';
    plugins.forEach(function (plugin) {
      if (!sortable[plugin.pluginName]) return;
      // Fire global events if it exists in this sortable
      if (sortable[plugin.pluginName][eventNameGlobal]) {
        sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({
          sortable: sortable
        }, evt));
      }

      // Only fire plugin event if plugin is enabled in this sortable,
      // and plugin has event defined
      if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
        sortable[plugin.pluginName][eventName](_objectSpread2({
          sortable: sortable
        }, evt));
      }
    });
  },
  initializePlugins: function initializePlugins(sortable, el, defaults, options) {
    plugins.forEach(function (plugin) {
      var pluginName = plugin.pluginName;
      if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;
      var initialized = new plugin(sortable, el, sortable.options);
      initialized.sortable = sortable;
      initialized.options = sortable.options;
      sortable[pluginName] = initialized;

      // Add default options from plugin
      _extends(defaults, initialized.defaults);
    });
    for (var option in sortable.options) {
      if (!sortable.options.hasOwnProperty(option)) continue;
      var modified = this.modifyOption(sortable, option, sortable.options[option]);
      if (typeof modified !== 'undefined') {
        sortable.options[option] = modified;
      }
    }
  },
  getEventProperties: function getEventProperties(name, sortable) {
    var eventProperties = {};
    plugins.forEach(function (plugin) {
      if (typeof plugin.eventProperties !== 'function') return;
      _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
    });
    return eventProperties;
  },
  modifyOption: function modifyOption(sortable, name, value) {
    var modifiedValue;
    plugins.forEach(function (plugin) {
      // Plugin must exist on the Sortable
      if (!sortable[plugin.pluginName]) return;

      // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin
      if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {
        modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
      }
    });
    return modifiedValue;
  }
};

function dispatchEvent(_ref) {
  var sortable = _ref.sortable,
    rootEl = _ref.rootEl,
    name = _ref.name,
    targetEl = _ref.targetEl,
    cloneEl = _ref.cloneEl,
    toEl = _ref.toEl,
    fromEl = _ref.fromEl,
    oldIndex = _ref.oldIndex,
    newIndex = _ref.newIndex,
    oldDraggableIndex = _ref.oldDraggableIndex,
    newDraggableIndex = _ref.newDraggableIndex,
    originalEvent = _ref.originalEvent,
    putSortable = _ref.putSortable,
    extraEventProperties = _ref.extraEventProperties;
  sortable = sortable || rootEl && rootEl[expando];
  if (!sortable) return;
  var evt,
    options = sortable.options,
    onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);
  // Support for new CustomEvent feature
  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent(name, {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent(name, true, true);
  }
  evt.to = toEl || rootEl;
  evt.from = fromEl || rootEl;
  evt.item = targetEl || rootEl;
  evt.clone = cloneEl;
  evt.oldIndex = oldIndex;
  evt.newIndex = newIndex;
  evt.oldDraggableIndex = oldDraggableIndex;
  evt.newDraggableIndex = newDraggableIndex;
  evt.originalEvent = originalEvent;
  evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;
  var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));
  for (var option in allEventProperties) {
    evt[option] = allEventProperties[option];
  }
  if (rootEl) {
    rootEl.dispatchEvent(evt);
  }
  if (options[onName]) {
    options[onName].call(sortable, evt);
  }
}

var _excluded = ["evt"];
var pluginEvent = function pluginEvent(eventName, sortable) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
    originalEvent = _ref.evt,
    data = _objectWithoutProperties(_ref, _excluded);
  PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({
    dragEl: dragEl,
    parentEl: parentEl,
    ghostEl: ghostEl,
    rootEl: rootEl,
    nextEl: nextEl,
    lastDownEl: lastDownEl,
    cloneEl: cloneEl,
    cloneHidden: cloneHidden,
    dragStarted: moved,
    putSortable: putSortable,
    activeSortable: Sortable.active,
    originalEvent: originalEvent,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex,
    hideGhostForTarget: _hideGhostForTarget,
    unhideGhostForTarget: _unhideGhostForTarget,
    cloneNowHidden: function cloneNowHidden() {
      cloneHidden = true;
    },
    cloneNowShown: function cloneNowShown() {
      cloneHidden = false;
    },
    dispatchSortableEvent: function dispatchSortableEvent(name) {
      _dispatchEvent({
        sortable: sortable,
        name: name,
        originalEvent: originalEvent
      });
    }
  }, data));
};
function _dispatchEvent(info) {
  dispatchEvent(_objectSpread2({
    putSortable: putSortable,
    cloneEl: cloneEl,
    targetEl: dragEl,
    rootEl: rootEl,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex
  }, info));
}
var dragEl,
  parentEl,
  ghostEl,
  rootEl,
  nextEl,
  lastDownEl,
  cloneEl,
  cloneHidden,
  oldIndex,
  newIndex,
  oldDraggableIndex,
  newDraggableIndex,
  activeGroup,
  putSortable,
  awaitingDragStarted = false,
  ignoreNextClick = false,
  sortables = [],
  tapEvt,
  touchEvt,
  lastDx,
  lastDy,
  tapDistanceLeft,
  tapDistanceTop,
  moved,
  lastTarget,
  lastDirection,
  pastFirstInvertThresh = false,
  isCircumstantialInvert = false,
  targetMoveDistance,
  // For positioning ghost absolutely
  ghostRelativeParent,
  ghostRelativeParentInitialScroll = [],
  // (left, top)

  _silent = false,
  savedInputChecked = [];

/** @const */
var documentExists = typeof document !== 'undefined',
  PositionGhostAbsolutely = IOS,
  CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',
  // This will not pass for IE9, because IE9 DnD only works on anchors
  supportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),
  supportCssPointerEvents = function () {
    if (!documentExists) return;
    // false when <= IE11
    if (IE11OrLess) {
      return false;
    }
    var el = document.createElement('x');
    el.style.cssText = 'pointer-events:auto';
    return el.style.pointerEvents === 'auto';
  }(),
  _detectDirection = function _detectDirection(el, options) {
    var elCSS = css(el),
      elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),
      child1 = getChild(el, 0, options),
      child2 = getChild(el, 1, options),
      firstChildCSS = child1 && css(child1),
      secondChildCSS = child2 && css(child2),
      firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,
      secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;
    if (elCSS.display === 'flex') {
      return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';
    }
    if (elCSS.display === 'grid') {
      return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
    }
    if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== 'none') {
      var touchingSideChild2 = firstChildCSS["float"] === 'left' ? 'left' : 'right';
      return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';
    }
    return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';
  },
  _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
    var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
      dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
      dragElOppLength = vertical ? dragRect.width : dragRect.height,
      targetS1Opp = vertical ? targetRect.left : targetRect.top,
      targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
      targetOppLength = vertical ? targetRect.width : targetRect.height;
    return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
  },
  /**
   * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
   * @param  {Number} x      X position
   * @param  {Number} y      Y position
   * @return {HTMLElement}   Element of the first found nearest Sortable
   */
  _detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
    var ret;
    sortables.some(function (sortable) {
      var threshold = sortable[expando].options.emptyInsertThreshold;
      if (!threshold || lastChild(sortable)) return;
      var rect = getRect(sortable),
        insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
        insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;
      if (insideHorizontally && insideVertically) {
        return ret = sortable;
      }
    });
    return ret;
  },
  _prepareGroup = function _prepareGroup(options) {
    function toFn(value, pull) {
      return function (to, from, dragEl, evt) {
        var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;
        if (value == null && (pull || sameGroup)) {
          // Default pull value
          // Default pull and put value if same group
          return true;
        } else if (value == null || value === false) {
          return false;
        } else if (pull && value === 'clone') {
          return value;
        } else if (typeof value === 'function') {
          return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
        } else {
          var otherGroup = (pull ? to : from).options.group.name;
          return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
        }
      };
    }
    var group = {};
    var originalGroup = options.group;
    if (!originalGroup || _typeof(originalGroup) != 'object') {
      originalGroup = {
        name: originalGroup
      };
    }
    group.name = originalGroup.name;
    group.checkPull = toFn(originalGroup.pull, true);
    group.checkPut = toFn(originalGroup.put);
    group.revertClone = originalGroup.revertClone;
    options.group = group;
  },
  _hideGhostForTarget = function _hideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, 'display', 'none');
    }
  },
  _unhideGhostForTarget = function _unhideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, 'display', '');
    }
  };

// #1184 fix - Prevent click event on fallback if dragged but item not changed position
if (documentExists && !ChromeForAndroid) {
  document.addEventListener('click', function (evt) {
    if (ignoreNextClick) {
      evt.preventDefault();
      evt.stopPropagation && evt.stopPropagation();
      evt.stopImmediatePropagation && evt.stopImmediatePropagation();
      ignoreNextClick = false;
      return false;
    }
  }, true);
}
var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
  if (dragEl) {
    evt = evt.touches ? evt.touches[0] : evt;
    var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);
    if (nearest) {
      // Create imitation event
      var event = {};
      for (var i in evt) {
        if (evt.hasOwnProperty(i)) {
          event[i] = evt[i];
        }
      }
      event.target = event.rootEl = nearest;
      event.preventDefault = void 0;
      event.stopPropagation = void 0;
      nearest[expando]._onDragOver(event);
    }
  }
};
var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
  if (dragEl) {
    dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
  }
};

/**
 * @class  Sortable
 * @param  {HTMLElement}  el
 * @param  {Object}       [options]
 */
function Sortable(el, options) {
  if (!(el && el.nodeType && el.nodeType === 1)) {
    throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
  }
  this.el = el; // root element
  this.options = options = _extends({}, options);

  // Export instance
  el[expando] = this;
  var defaults = {
    group: null,
    sort: true,
    disabled: false,
    store: null,
    handle: null,
    draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',
    swapThreshold: 1,
    // percentage; 0 <= x <= 1
    invertSwap: false,
    // invert always
    invertedSwapThreshold: null,
    // will be set to same as swapThreshold if default
    removeCloneOnHide: true,
    direction: function direction() {
      return _detectDirection(el, this.options);
    },
    ghostClass: 'sortable-ghost',
    chosenClass: 'sortable-chosen',
    dragClass: 'sortable-drag',
    ignore: 'a, img',
    filter: null,
    preventOnFilter: true,
    animation: 0,
    easing: null,
    setData: function setData(dataTransfer, dragEl) {
      dataTransfer.setData('Text', dragEl.textContent);
    },
    dropBubble: false,
    dragoverBubble: false,
    dataIdAttr: 'data-id',
    delay: 0,
    delayOnTouchOnly: false,
    touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
    forceFallback: false,
    fallbackClass: 'sortable-fallback',
    fallbackOnBody: false,
    fallbackTolerance: 0,
    fallbackOffset: {
      x: 0,
      y: 0
    },
    // Disabled on Safari: #1571; Enabled on Safari IOS: #2244
    supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window && (!Safari || IOS),
    emptyInsertThreshold: 5
  };
  PluginManager.initializePlugins(this, el, defaults);

  // Set default options
  for (var name in defaults) {
    !(name in options) && (options[name] = defaults[name]);
  }
  _prepareGroup(options);

  // Bind all private methods
  for (var fn in this) {
    if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
      this[fn] = this[fn].bind(this);
    }
  }

  // Setup drag mode
  this.nativeDraggable = options.forceFallback ? false : supportDraggable;
  if (this.nativeDraggable) {
    // Touch start threshold cannot be greater than the native dragstart threshold
    this.options.touchStartThreshold = 1;
  }

  // Bind events
  if (options.supportPointer) {
    on(el, 'pointerdown', this._onTapStart);
  } else {
    on(el, 'mousedown', this._onTapStart);
    on(el, 'touchstart', this._onTapStart);
  }
  if (this.nativeDraggable) {
    on(el, 'dragover', this);
    on(el, 'dragenter', this);
  }
  sortables.push(this.el);

  // Restore sorting
  options.store && options.store.get && this.sort(options.store.get(this) || []);

  // Add animation state manager
  _extends(this, AnimationStateManager());
}
Sortable.prototype = /** @lends Sortable.prototype */{
  constructor: Sortable,
  _isOutsideThisEl: function _isOutsideThisEl(target) {
    if (!this.el.contains(target) && target !== this.el) {
      lastTarget = null;
    }
  },
  _getDirection: function _getDirection(evt, target) {
    return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
  },
  _onTapStart: function _onTapStart( /** Event|TouchEvent */evt) {
    if (!evt.cancelable) return;
    var _this = this,
      el = this.el,
      options = this.options,
      preventOnFilter = options.preventOnFilter,
      type = evt.type,
      touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,
      target = (touch || evt).target,
      originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,
      filter = options.filter;
    _saveInputCheckedState(el);

    // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.
    if (dragEl) {
      return;
    }
    if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
      return; // only left button and enabled
    }

    // cancel dnd if original target is content editable
    if (originalTarget.isContentEditable) {
      return;
    }

    // Safari ignores further event handling after mousedown
    if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === 'SELECT') {
      return;
    }
    target = closest(target, options.draggable, el, false);
    if (target && target.animated) {
      return;
    }
    if (lastDownEl === target) {
      // Ignoring duplicate `down`
      return;
    }

    // Get the index of the dragged element within its parent
    oldIndex = index$1(target);
    oldDraggableIndex = index$1(target, options.draggable);

    // Check filter
    if (typeof filter === 'function') {
      if (filter.call(this, evt, target, this)) {
        _dispatchEvent({
          sortable: _this,
          rootEl: originalTarget,
          name: 'filter',
          targetEl: target,
          toEl: el,
          fromEl: el
        });
        pluginEvent('filter', _this, {
          evt: evt
        });
        preventOnFilter && evt.preventDefault();
        return; // cancel dnd
      }
    } else if (filter) {
      filter = filter.split(',').some(function (criteria) {
        criteria = closest(originalTarget, criteria.trim(), el, false);
        if (criteria) {
          _dispatchEvent({
            sortable: _this,
            rootEl: criteria,
            name: 'filter',
            targetEl: target,
            fromEl: el,
            toEl: el
          });
          pluginEvent('filter', _this, {
            evt: evt
          });
          return true;
        }
      });
      if (filter) {
        preventOnFilter && evt.preventDefault();
        return; // cancel dnd
      }
    }
    if (options.handle && !closest(originalTarget, options.handle, el, false)) {
      return;
    }

    // Prepare `dragstart`
    this._prepareDragStart(evt, touch, target);
  },
  _prepareDragStart: function _prepareDragStart( /** Event */evt, /** Touch */touch, /** HTMLElement */target) {
    var _this = this,
      el = _this.el,
      options = _this.options,
      ownerDocument = el.ownerDocument,
      dragStartFn;
    if (target && !dragEl && target.parentNode === el) {
      var dragRect = getRect(target);
      rootEl = el;
      dragEl = target;
      parentEl = dragEl.parentNode;
      nextEl = dragEl.nextSibling;
      lastDownEl = target;
      activeGroup = options.group;
      Sortable.dragged = dragEl;
      tapEvt = {
        target: dragEl,
        clientX: (touch || evt).clientX,
        clientY: (touch || evt).clientY
      };
      tapDistanceLeft = tapEvt.clientX - dragRect.left;
      tapDistanceTop = tapEvt.clientY - dragRect.top;
      this._lastX = (touch || evt).clientX;
      this._lastY = (touch || evt).clientY;
      dragEl.style['will-change'] = 'all';
      dragStartFn = function dragStartFn() {
        pluginEvent('delayEnded', _this, {
          evt: evt
        });
        if (Sortable.eventCanceled) {
          _this._onDrop();
          return;
        }
        // Delayed drag has been triggered
        // we can re-enable the events: touchmove/mousemove
        _this._disableDelayedDragEvents();
        if (!FireFox && _this.nativeDraggable) {
          dragEl.draggable = true;
        }

        // Bind the events: dragstart/dragend
        _this._triggerDragStart(evt, touch);

        // Drag start event
        _dispatchEvent({
          sortable: _this,
          name: 'choose',
          originalEvent: evt
        });

        // Chosen item
        toggleClass(dragEl, options.chosenClass, true);
      };

      // Disable "draggable"
      options.ignore.split(',').forEach(function (criteria) {
        find(dragEl, criteria.trim(), _disableDraggable);
      });
      on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);
      if (options.supportPointer) {
        on(ownerDocument, 'pointerup', _this._onDrop);
        // Native D&D triggers pointercancel
        !this.nativeDraggable && on(ownerDocument, 'pointercancel', _this._onDrop);
      } else {
        on(ownerDocument, 'mouseup', _this._onDrop);
        on(ownerDocument, 'touchend', _this._onDrop);
        on(ownerDocument, 'touchcancel', _this._onDrop);
      }

      // Make dragEl draggable (must be before delay for FireFox)
      if (FireFox && this.nativeDraggable) {
        this.options.touchStartThreshold = 4;
        dragEl.draggable = true;
      }
      pluginEvent('delayStart', this, {
        evt: evt
      });

      // Delay is impossible for native DnD in Edge or IE
      if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
        if (Sortable.eventCanceled) {
          this._onDrop();
          return;
        }
        // If the user moves the pointer or let go the click or touch
        // before the delay has been reached:
        // disable the delayed drag
        if (options.supportPointer) {
          on(ownerDocument, 'pointerup', _this._disableDelayedDrag);
          on(ownerDocument, 'pointercancel', _this._disableDelayedDrag);
        } else {
          on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
          on(ownerDocument, 'touchend', _this._disableDelayedDrag);
          on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
        }
        on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
        on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
        options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);
        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
      } else {
        dragStartFn();
      }
    }
  },
  _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler( /** TouchEvent|PointerEvent **/e) {
    var touch = e.touches ? e.touches[0] : e;
    if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
      this._disableDelayedDrag();
    }
  },
  _disableDelayedDrag: function _disableDelayedDrag() {
    dragEl && _disableDraggable(dragEl);
    clearTimeout(this._dragStartTimer);
    this._disableDelayedDragEvents();
  },
  _disableDelayedDragEvents: function _disableDelayedDragEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._disableDelayedDrag);
    off(ownerDocument, 'touchend', this._disableDelayedDrag);
    off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
    off(ownerDocument, 'pointerup', this._disableDelayedDrag);
    off(ownerDocument, 'pointercancel', this._disableDelayedDrag);
    off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
  },
  _triggerDragStart: function _triggerDragStart( /** Event */evt, /** Touch */touch) {
    touch = touch || evt.pointerType == 'touch' && evt;
    if (!this.nativeDraggable || touch) {
      if (this.options.supportPointer) {
        on(document, 'pointermove', this._onTouchMove);
      } else if (touch) {
        on(document, 'touchmove', this._onTouchMove);
      } else {
        on(document, 'mousemove', this._onTouchMove);
      }
    } else {
      on(dragEl, 'dragend', this);
      on(rootEl, 'dragstart', this._onDragStart);
    }
    try {
      if (document.selection) {
        _nextTick(function () {
          document.selection.empty();
        });
      } else {
        window.getSelection().removeAllRanges();
      }
    } catch (err) {}
  },
  _dragStarted: function _dragStarted(fallback, evt) {
    awaitingDragStarted = false;
    if (rootEl && dragEl) {
      pluginEvent('dragStarted', this, {
        evt: evt
      });
      if (this.nativeDraggable) {
        on(document, 'dragover', _checkOutsideTargetEl);
      }
      var options = this.options;

      // Apply effect
      !fallback && toggleClass(dragEl, options.dragClass, false);
      toggleClass(dragEl, options.ghostClass, true);
      Sortable.active = this;
      fallback && this._appendGhost();

      // Drag start event
      _dispatchEvent({
        sortable: this,
        name: 'start',
        originalEvent: evt
      });
    } else {
      this._nulling();
    }
  },
  _emulateDragOver: function _emulateDragOver() {
    if (touchEvt) {
      this._lastX = touchEvt.clientX;
      this._lastY = touchEvt.clientY;
      _hideGhostForTarget();
      var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
      var parent = target;
      while (target && target.shadowRoot) {
        target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        if (target === parent) break;
        parent = target;
      }
      dragEl.parentNode[expando]._isOutsideThisEl(target);
      if (parent) {
        do {
          if (parent[expando]) {
            var inserted = void 0;
            inserted = parent[expando]._onDragOver({
              clientX: touchEvt.clientX,
              clientY: touchEvt.clientY,
              target: target,
              rootEl: parent
            });
            if (inserted && !this.options.dragoverBubble) {
              break;
            }
          }
          target = parent; // store last element
        }
        /* jshint boss:true */ while (parent = getParentOrHost(parent));
      }
      _unhideGhostForTarget();
    }
  },
  _onTouchMove: function _onTouchMove( /**TouchEvent*/evt) {
    if (tapEvt) {
      var options = this.options,
        fallbackTolerance = options.fallbackTolerance,
        fallbackOffset = options.fallbackOffset,
        touch = evt.touches ? evt.touches[0] : evt,
        ghostMatrix = ghostEl && matrix(ghostEl, true),
        scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
        scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
        relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
        dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
        dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1);

      // only set the status to dragging, when we are actually dragging
      if (!Sortable.active && !awaitingDragStarted) {
        if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
          return;
        }
        this._onDragStart(evt, true);
      }
      if (ghostEl) {
        if (ghostMatrix) {
          ghostMatrix.e += dx - (lastDx || 0);
          ghostMatrix.f += dy - (lastDy || 0);
        } else {
          ghostMatrix = {
            a: 1,
            b: 0,
            c: 0,
            d: 1,
            e: dx,
            f: dy
          };
        }
        var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
        css(ghostEl, 'webkitTransform', cssMatrix);
        css(ghostEl, 'mozTransform', cssMatrix);
        css(ghostEl, 'msTransform', cssMatrix);
        css(ghostEl, 'transform', cssMatrix);
        lastDx = dx;
        lastDy = dy;
        touchEvt = touch;
      }
      evt.cancelable && evt.preventDefault();
    }
  },
  _appendGhost: function _appendGhost() {
    // Bug if using scale(): https://stackoverflow.com/questions/2637058
    // Not being adjusted for
    if (!ghostEl) {
      var container = this.options.fallbackOnBody ? document.body : rootEl,
        rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),
        options = this.options;

      // Position absolutely
      if (PositionGhostAbsolutely) {
        // Get relatively positioned parent
        ghostRelativeParent = container;
        while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {
          ghostRelativeParent = ghostRelativeParent.parentNode;
        }
        if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
          if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
          rect.top += ghostRelativeParent.scrollTop;
          rect.left += ghostRelativeParent.scrollLeft;
        } else {
          ghostRelativeParent = getWindowScrollingElement();
        }
        ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
      }
      ghostEl = dragEl.cloneNode(true);
      toggleClass(ghostEl, options.ghostClass, false);
      toggleClass(ghostEl, options.fallbackClass, true);
      toggleClass(ghostEl, options.dragClass, true);
      css(ghostEl, 'transition', '');
      css(ghostEl, 'transform', '');
      css(ghostEl, 'box-sizing', 'border-box');
      css(ghostEl, 'margin', 0);
      css(ghostEl, 'top', rect.top);
      css(ghostEl, 'left', rect.left);
      css(ghostEl, 'width', rect.width);
      css(ghostEl, 'height', rect.height);
      css(ghostEl, 'opacity', '0.8');
      css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');
      css(ghostEl, 'zIndex', '100000');
      css(ghostEl, 'pointerEvents', 'none');
      Sortable.ghost = ghostEl;
      container.appendChild(ghostEl);

      // Set transform-origin
      css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');
    }
  },
  _onDragStart: function _onDragStart( /**Event*/evt, /**boolean*/fallback) {
    var _this = this;
    var dataTransfer = evt.dataTransfer;
    var options = _this.options;
    pluginEvent('dragStart', this, {
      evt: evt
    });
    if (Sortable.eventCanceled) {
      this._onDrop();
      return;
    }
    pluginEvent('setupClone', this);
    if (!Sortable.eventCanceled) {
      cloneEl = clone(dragEl);
      cloneEl.removeAttribute("id");
      cloneEl.draggable = false;
      cloneEl.style['will-change'] = '';
      this._hideClone();
      toggleClass(cloneEl, this.options.chosenClass, false);
      Sortable.clone = cloneEl;
    }

    // #1143: IFrame support workaround
    _this.cloneId = _nextTick(function () {
      pluginEvent('clone', _this);
      if (Sortable.eventCanceled) return;
      if (!_this.options.removeCloneOnHide) {
        rootEl.insertBefore(cloneEl, dragEl);
      }
      _this._hideClone();
      _dispatchEvent({
        sortable: _this,
        name: 'clone'
      });
    });
    !fallback && toggleClass(dragEl, options.dragClass, true);

    // Set proper drop events
    if (fallback) {
      ignoreNextClick = true;
      _this._loopId = setInterval(_this._emulateDragOver, 50);
    } else {
      // Undo what was set in _prepareDragStart before drag started
      off(document, 'mouseup', _this._onDrop);
      off(document, 'touchend', _this._onDrop);
      off(document, 'touchcancel', _this._onDrop);
      if (dataTransfer) {
        dataTransfer.effectAllowed = 'move';
        options.setData && options.setData.call(_this, dataTransfer, dragEl);
      }
      on(document, 'drop', _this);

      // #1276 fix:
      css(dragEl, 'transform', 'translateZ(0)');
    }
    awaitingDragStarted = true;
    _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
    on(document, 'selectstart', _this);
    moved = true;
    window.getSelection().removeAllRanges();
    if (Safari) {
      css(document.body, 'user-select', 'none');
    }
  },
  // Returns true - if no further action is needed (either inserted or another condition)
  _onDragOver: function _onDragOver( /**Event*/evt) {
    var el = this.el,
      target = evt.target,
      dragRect,
      targetRect,
      revert,
      options = this.options,
      group = options.group,
      activeSortable = Sortable.active,
      isOwner = activeGroup === group,
      canSort = options.sort,
      fromSortable = putSortable || activeSortable,
      vertical,
      _this = this,
      completedFired = false;
    if (_silent) return;
    function dragOverEvent(name, extra) {
      pluginEvent(name, _this, _objectSpread2({
        evt: evt,
        isOwner: isOwner,
        axis: vertical ? 'vertical' : 'horizontal',
        revert: revert,
        dragRect: dragRect,
        targetRect: targetRect,
        canSort: canSort,
        fromSortable: fromSortable,
        target: target,
        completed: completed,
        onMove: function onMove(target, after) {
          return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);
        },
        changed: changed
      }, extra));
    }

    // Capture animation state
    function capture() {
      dragOverEvent('dragOverAnimationCapture');
      _this.captureAnimationState();
      if (_this !== fromSortable) {
        fromSortable.captureAnimationState();
      }
    }

    // Return invocation when dragEl is inserted (or completed)
    function completed(insertion) {
      dragOverEvent('dragOverCompleted', {
        insertion: insertion
      });
      if (insertion) {
        // Clones must be hidden before folding animation to capture dragRectAbsolute properly
        if (isOwner) {
          activeSortable._hideClone();
        } else {
          activeSortable._showClone(_this);
        }
        if (_this !== fromSortable) {
          // Set ghost class to new sortable's ghost class
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
          toggleClass(dragEl, options.ghostClass, true);
        }
        if (putSortable !== _this && _this !== Sortable.active) {
          putSortable = _this;
        } else if (_this === Sortable.active && putSortable) {
          putSortable = null;
        }

        // Animation
        if (fromSortable === _this) {
          _this._ignoreWhileAnimating = target;
        }
        _this.animateAll(function () {
          dragOverEvent('dragOverAnimationComplete');
          _this._ignoreWhileAnimating = null;
        });
        if (_this !== fromSortable) {
          fromSortable.animateAll();
          fromSortable._ignoreWhileAnimating = null;
        }
      }

      // Null lastTarget if it is not inside a previously swapped element
      if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
        lastTarget = null;
      }

      // no bubbling and not fallback
      if (!options.dragoverBubble && !evt.rootEl && target !== document) {
        dragEl.parentNode[expando]._isOutsideThisEl(evt.target);

        // Do not detect for empty insert if already inserted
        !insertion && nearestEmptyInsertDetectEvent(evt);
      }
      !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
      return completedFired = true;
    }

    // Call when dragEl has been inserted
    function changed() {
      newIndex = index$1(dragEl);
      newDraggableIndex = index$1(dragEl, options.draggable);
      _dispatchEvent({
        sortable: _this,
        name: 'change',
        toEl: el,
        newIndex: newIndex,
        newDraggableIndex: newDraggableIndex,
        originalEvent: evt
      });
    }
    if (evt.preventDefault !== void 0) {
      evt.cancelable && evt.preventDefault();
    }
    target = closest(target, options.draggable, el, true);
    dragOverEvent('dragOver');
    if (Sortable.eventCanceled) return completedFired;
    if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
      return completed(false);
    }
    ignoreNextClick = false;
    if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) // Reverting item into the original list
    : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
      vertical = this._getDirection(evt, target) === 'vertical';
      dragRect = getRect(dragEl);
      dragOverEvent('dragOverValid');
      if (Sortable.eventCanceled) return completedFired;
      if (revert) {
        parentEl = rootEl; // actualization
        capture();
        this._hideClone();
        dragOverEvent('revert');
        if (!Sortable.eventCanceled) {
          if (nextEl) {
            rootEl.insertBefore(dragEl, nextEl);
          } else {
            rootEl.appendChild(dragEl);
          }
        }
        return completed(true);
      }
      var elLastChild = lastChild(el, options.draggable);
      if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
        // Insert to end of list

        // If already at end of list: Do not insert
        if (elLastChild === dragEl) {
          return completed(false);
        }

        // if there is a last element, it is the target
        if (elLastChild && el === evt.target) {
          target = elLastChild;
        }
        if (target) {
          targetRect = getRect(target);
        }
        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
          capture();
          if (elLastChild && elLastChild.nextSibling) {
            // the last draggable element is not the last node
            el.insertBefore(dragEl, elLastChild.nextSibling);
          } else {
            el.appendChild(dragEl);
          }
          parentEl = el; // actualization

          changed();
          return completed(true);
        }
      } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {
        // Insert to start of list
        var firstChild = getChild(el, 0, options, true);
        if (firstChild === dragEl) {
          return completed(false);
        }
        target = firstChild;
        targetRect = getRect(target);
        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {
          capture();
          el.insertBefore(dragEl, firstChild);
          parentEl = el; // actualization

          changed();
          return completed(true);
        }
      } else if (target.parentNode === el) {
        targetRect = getRect(target);
        var direction = 0,
          targetBeforeFirstSwap,
          differentLevel = dragEl.parentNode !== el,
          differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),
          side1 = vertical ? 'top' : 'left',
          scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),
          scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;
        if (lastTarget !== target) {
          targetBeforeFirstSwap = targetRect[side1];
          pastFirstInvertThresh = false;
          isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
        }
        direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
        var sibling;
        if (direction !== 0) {
          // Check if target is beside dragEl in respective direction (ignoring hidden elements)
          var dragIndex = index$1(dragEl);
          do {
            dragIndex -= direction;
            sibling = parentEl.children[dragIndex];
          } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));
        }
        // If dragEl is already beside target: Do not insert
        if (direction === 0 || sibling === target) {
          return completed(false);
        }
        lastTarget = target;
        lastDirection = direction;
        var nextSibling = target.nextElementSibling,
          after = false;
        after = direction === 1;
        var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);
        if (moveVector !== false) {
          if (moveVector === 1 || moveVector === -1) {
            after = moveVector === 1;
          }
          _silent = true;
          setTimeout(_unsilent, 30);
          capture();
          if (after && !nextSibling) {
            el.appendChild(dragEl);
          } else {
            target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
          }

          // Undo chrome's scroll adjustment (has no effect on other browsers)
          if (scrolledPastTop) {
            scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
          }
          parentEl = dragEl.parentNode; // actualization

          // must be done before animation
          if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
            targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
          }
          changed();
          return completed(true);
        }
      }
      if (el.contains(dragEl)) {
        return completed(false);
      }
    }
    return false;
  },
  _ignoreWhileAnimating: null,
  _offMoveEvents: function _offMoveEvents() {
    off(document, 'mousemove', this._onTouchMove);
    off(document, 'touchmove', this._onTouchMove);
    off(document, 'pointermove', this._onTouchMove);
    off(document, 'dragover', nearestEmptyInsertDetectEvent);
    off(document, 'mousemove', nearestEmptyInsertDetectEvent);
    off(document, 'touchmove', nearestEmptyInsertDetectEvent);
  },
  _offUpEvents: function _offUpEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._onDrop);
    off(ownerDocument, 'touchend', this._onDrop);
    off(ownerDocument, 'pointerup', this._onDrop);
    off(ownerDocument, 'pointercancel', this._onDrop);
    off(ownerDocument, 'touchcancel', this._onDrop);
    off(document, 'selectstart', this);
  },
  _onDrop: function _onDrop( /**Event*/evt) {
    var el = this.el,
      options = this.options;

    // Get the index of the dragged element within its parent
    newIndex = index$1(dragEl);
    newDraggableIndex = index$1(dragEl, options.draggable);
    pluginEvent('drop', this, {
      evt: evt
    });
    parentEl = dragEl && dragEl.parentNode;

    // Get again after plugin event
    newIndex = index$1(dragEl);
    newDraggableIndex = index$1(dragEl, options.draggable);
    if (Sortable.eventCanceled) {
      this._nulling();
      return;
    }
    awaitingDragStarted = false;
    isCircumstantialInvert = false;
    pastFirstInvertThresh = false;
    clearInterval(this._loopId);
    clearTimeout(this._dragStartTimer);
    _cancelNextTick(this.cloneId);
    _cancelNextTick(this._dragStartId);

    // Unbind events
    if (this.nativeDraggable) {
      off(document, 'drop', this);
      off(el, 'dragstart', this._onDragStart);
    }
    this._offMoveEvents();
    this._offUpEvents();
    if (Safari) {
      css(document.body, 'user-select', '');
    }
    css(dragEl, 'transform', '');
    if (evt) {
      if (moved) {
        evt.cancelable && evt.preventDefault();
        !options.dropBubble && evt.stopPropagation();
      }
      ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);
      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
        // Remove clone(s)
        cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
      }
      if (dragEl) {
        if (this.nativeDraggable) {
          off(dragEl, 'dragend', this);
        }
        _disableDraggable(dragEl);
        dragEl.style['will-change'] = '';

        // Remove classes
        // ghostClass is added in dragStarted
        if (moved && !awaitingDragStarted) {
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
        }
        toggleClass(dragEl, this.options.chosenClass, false);

        // Drag stop event
        _dispatchEvent({
          sortable: this,
          name: 'unchoose',
          toEl: parentEl,
          newIndex: null,
          newDraggableIndex: null,
          originalEvent: evt
        });
        if (rootEl !== parentEl) {
          if (newIndex >= 0) {
            // Add event
            _dispatchEvent({
              rootEl: parentEl,
              name: 'add',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            });

            // Remove event
            _dispatchEvent({
              sortable: this,
              name: 'remove',
              toEl: parentEl,
              originalEvent: evt
            });

            // drag from one list and drop into another
            _dispatchEvent({
              rootEl: parentEl,
              name: 'sort',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            });
            _dispatchEvent({
              sortable: this,
              name: 'sort',
              toEl: parentEl,
              originalEvent: evt
            });
          }
          putSortable && putSortable.save();
        } else {
          if (newIndex !== oldIndex) {
            if (newIndex >= 0) {
              // drag & drop within the same list
              _dispatchEvent({
                sortable: this,
                name: 'update',
                toEl: parentEl,
                originalEvent: evt
              });
              _dispatchEvent({
                sortable: this,
                name: 'sort',
                toEl: parentEl,
                originalEvent: evt
              });
            }
          }
        }
        if (Sortable.active) {
          /* jshint eqnull:true */
          if (newIndex == null || newIndex === -1) {
            newIndex = oldIndex;
            newDraggableIndex = oldDraggableIndex;
          }
          _dispatchEvent({
            sortable: this,
            name: 'end',
            toEl: parentEl,
            originalEvent: evt
          });

          // Save sorting
          this.save();
        }
      }
    }
    this._nulling();
  },
  _nulling: function _nulling() {
    pluginEvent('nulling', this);
    rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
    savedInputChecked.forEach(function (el) {
      el.checked = true;
    });
    savedInputChecked.length = lastDx = lastDy = 0;
  },
  handleEvent: function handleEvent( /**Event*/evt) {
    switch (evt.type) {
      case 'drop':
      case 'dragend':
        this._onDrop(evt);
        break;
      case 'dragenter':
      case 'dragover':
        if (dragEl) {
          this._onDragOver(evt);
          _globalDragOver(evt);
        }
        break;
      case 'selectstart':
        evt.preventDefault();
        break;
    }
  },
  /**
   * Serializes the item into an array of string.
   * @returns {String[]}
   */
  toArray: function toArray() {
    var order = [],
      el,
      children = this.el.children,
      i = 0,
      n = children.length,
      options = this.options;
    for (; i < n; i++) {
      el = children[i];
      if (closest(el, options.draggable, this.el, false)) {
        order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
      }
    }
    return order;
  },
  /**
   * Sorts the elements according to the array.
   * @param  {String[]}  order  order of the items
   */
  sort: function sort(order, useAnimation) {
    var items = {},
      rootEl = this.el;
    this.toArray().forEach(function (id, i) {
      var el = rootEl.children[i];
      if (closest(el, this.options.draggable, rootEl, false)) {
        items[id] = el;
      }
    }, this);
    useAnimation && this.captureAnimationState();
    order.forEach(function (id) {
      if (items[id]) {
        rootEl.removeChild(items[id]);
        rootEl.appendChild(items[id]);
      }
    });
    useAnimation && this.animateAll();
  },
  /**
   * Save the current sorting
   */
  save: function save() {
    var store = this.options.store;
    store && store.set && store.set(this);
  },
  /**
   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
   * @param   {HTMLElement}  el
   * @param   {String}       [selector]  default: `options.draggable`
   * @returns {HTMLElement|null}
   */
  closest: function closest$1(el, selector) {
    return closest(el, selector || this.options.draggable, this.el, false);
  },
  /**
   * Set/get option
   * @param   {string} name
   * @param   {*}      [value]
   * @returns {*}
   */
  option: function option(name, value) {
    var options = this.options;
    if (value === void 0) {
      return options[name];
    } else {
      var modifiedValue = PluginManager.modifyOption(this, name, value);
      if (typeof modifiedValue !== 'undefined') {
        options[name] = modifiedValue;
      } else {
        options[name] = value;
      }
      if (name === 'group') {
        _prepareGroup(options);
      }
    }
  },
  /**
   * Destroy
   */
  destroy: function destroy() {
    pluginEvent('destroy', this);
    var el = this.el;
    el[expando] = null;
    off(el, 'mousedown', this._onTapStart);
    off(el, 'touchstart', this._onTapStart);
    off(el, 'pointerdown', this._onTapStart);
    if (this.nativeDraggable) {
      off(el, 'dragover', this);
      off(el, 'dragenter', this);
    }
    // Remove draggable attributes
    Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
      el.removeAttribute('draggable');
    });
    this._onDrop();
    this._disableDelayedDragEvents();
    sortables.splice(sortables.indexOf(this.el), 1);
    this.el = el = null;
  },
  _hideClone: function _hideClone() {
    if (!cloneHidden) {
      pluginEvent('hideClone', this);
      if (Sortable.eventCanceled) return;
      css(cloneEl, 'display', 'none');
      if (this.options.removeCloneOnHide && cloneEl.parentNode) {
        cloneEl.parentNode.removeChild(cloneEl);
      }
      cloneHidden = true;
    }
  },
  _showClone: function _showClone(putSortable) {
    if (putSortable.lastPutMode !== 'clone') {
      this._hideClone();
      return;
    }
    if (cloneHidden) {
      pluginEvent('showClone', this);
      if (Sortable.eventCanceled) return;

      // show clone at dragEl or original position
      if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
        rootEl.insertBefore(cloneEl, dragEl);
      } else if (nextEl) {
        rootEl.insertBefore(cloneEl, nextEl);
      } else {
        rootEl.appendChild(cloneEl);
      }
      if (this.options.group.revertClone) {
        this.animate(dragEl, cloneEl);
      }
      css(cloneEl, 'display', '');
      cloneHidden = false;
    }
  }
};
function _globalDragOver( /**Event*/evt) {
  if (evt.dataTransfer) {
    evt.dataTransfer.dropEffect = 'move';
  }
  evt.cancelable && evt.preventDefault();
}
function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
  var evt,
    sortable = fromEl[expando],
    onMoveFn = sortable.options.onMove,
    retVal;
  // Support for new CustomEvent feature
  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent('move', {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent('move', true, true);
  }
  evt.to = toEl;
  evt.from = fromEl;
  evt.dragged = dragEl;
  evt.draggedRect = dragRect;
  evt.related = targetEl || toEl;
  evt.relatedRect = targetRect || getRect(toEl);
  evt.willInsertAfter = willInsertAfter;
  evt.originalEvent = originalEvent;
  fromEl.dispatchEvent(evt);
  if (onMoveFn) {
    retVal = onMoveFn.call(sortable, evt, originalEvent);
  }
  return retVal;
}
function _disableDraggable(el) {
  el.draggable = false;
}
function _unsilent() {
  _silent = false;
}
function _ghostIsFirst(evt, vertical, sortable) {
  var firstElRect = getRect(getChild(sortable.el, 0, sortable.options, true));
  var childContainingRect = getChildContainingRectFromElement(sortable.el, sortable.options, ghostEl);
  var spacer = 10;
  return vertical ? evt.clientX < childContainingRect.left - spacer || evt.clientY < firstElRect.top && evt.clientX < firstElRect.right : evt.clientY < childContainingRect.top - spacer || evt.clientY < firstElRect.bottom && evt.clientX < firstElRect.left;
}
function _ghostIsLast(evt, vertical, sortable) {
  var lastElRect = getRect(lastChild(sortable.el, sortable.options.draggable));
  var childContainingRect = getChildContainingRectFromElement(sortable.el, sortable.options, ghostEl);
  var spacer = 10;
  return vertical ? evt.clientX > childContainingRect.right + spacer || evt.clientY > lastElRect.bottom && evt.clientX > lastElRect.left : evt.clientY > childContainingRect.bottom + spacer || evt.clientX > lastElRect.right && evt.clientY > lastElRect.top;
}
function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
  var mouseOnAxis = vertical ? evt.clientY : evt.clientX,
    targetLength = vertical ? targetRect.height : targetRect.width,
    targetS1 = vertical ? targetRect.top : targetRect.left,
    targetS2 = vertical ? targetRect.bottom : targetRect.right,
    invert = false;
  if (!invertSwap) {
    // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
      // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
      // check if past first invert threshold on side opposite of lastDirection
      if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
        // past first invert threshold, do not restrict inverted threshold to dragEl shadow
        pastFirstInvertThresh = true;
      }
      if (!pastFirstInvertThresh) {
        // dragEl shadow (target move distance shadow)
        if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
        : mouseOnAxis > targetS2 - targetMoveDistance) {
          return -lastDirection;
        }
      } else {
        invert = true;
      }
    } else {
      // Regular
      if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
        return _getInsertDirection(target);
      }
    }
  }
  invert = invert || invertSwap;
  if (invert) {
    // Invert of regular
    if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
    }
  }
  return 0;
}

/**
 * Gets the direction dragEl must be swapped relative to target in order to make it
 * seem that dragEl has been "inserted" into that element's position
 * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
 * @return {Number}                   Direction dragEl must be swapped
 */
function _getInsertDirection(target) {
  if (index$1(dragEl) < index$1(target)) {
    return 1;
  } else {
    return -1;
  }
}

/**
 * Generate id
 * @param   {HTMLElement} el
 * @returns {String}
 * @private
 */
function _generateId(el) {
  var str = el.tagName + el.className + el.src + el.href + el.textContent,
    i = str.length,
    sum = 0;
  while (i--) {
    sum += str.charCodeAt(i);
  }
  return sum.toString(36);
}
function _saveInputCheckedState(root) {
  savedInputChecked.length = 0;
  var inputs = root.getElementsByTagName('input');
  var idx = inputs.length;
  while (idx--) {
    var el = inputs[idx];
    el.checked && savedInputChecked.push(el);
  }
}
function _nextTick(fn) {
  return setTimeout(fn, 0);
}
function _cancelNextTick(id) {
  return clearTimeout(id);
}

// Fixed #973:
if (documentExists) {
  on(document, 'touchmove', function (evt) {
    if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
      evt.preventDefault();
    }
  });
}

// Export utils
Sortable.utils = {
  on: on,
  off: off,
  css: css,
  find: find,
  is: function is(el, selector) {
    return !!closest(el, selector, el, false);
  },
  extend: extend,
  throttle: throttle$1,
  closest: closest,
  toggleClass: toggleClass,
  clone: clone,
  index: index$1,
  nextTick: _nextTick,
  cancelNextTick: _cancelNextTick,
  detectDirection: _detectDirection,
  getChild: getChild,
  expando: expando
};

/**
 * Get the Sortable instance of an element
 * @param  {HTMLElement} element The element
 * @return {Sortable|undefined}         The instance of Sortable
 */
Sortable.get = function (element) {
  return element[expando];
};

/**
 * Mount a plugin to Sortable
 * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
 */
Sortable.mount = function () {
  for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
    plugins[_key] = arguments[_key];
  }
  if (plugins[0].constructor === Array) plugins = plugins[0];
  plugins.forEach(function (plugin) {
    if (!plugin.prototype || !plugin.prototype.constructor) {
      throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
    }
    if (plugin.utils) Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);
    PluginManager.mount(plugin);
  });
};

/**
 * Create sortable instance
 * @param {HTMLElement}  el
 * @param {Object}      [options]
 */
Sortable.create = function (el, options) {
  return new Sortable(el, options);
};

// Export
Sortable.version = version;

var autoScrolls = [],
  scrollEl,
  scrollRootEl,
  scrolling = false,
  lastAutoScrollX,
  lastAutoScrollY,
  touchEvt$1,
  pointerElemChangedInterval;
function AutoScrollPlugin() {
  function AutoScroll() {
    this.defaults = {
      scroll: true,
      forceAutoScrollFallback: false,
      scrollSensitivity: 30,
      scrollSpeed: 10,
      bubbleScroll: true
    };

    // Bind all private methods
    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }
  }
  AutoScroll.prototype = {
    dragStarted: function dragStarted(_ref) {
      var originalEvent = _ref.originalEvent;
      if (this.sortable.nativeDraggable) {
        on(document, 'dragover', this._handleAutoScroll);
      } else {
        if (this.options.supportPointer) {
          on(document, 'pointermove', this._handleFallbackAutoScroll);
        } else if (originalEvent.touches) {
          on(document, 'touchmove', this._handleFallbackAutoScroll);
        } else {
          on(document, 'mousemove', this._handleFallbackAutoScroll);
        }
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref2) {
      var originalEvent = _ref2.originalEvent;
      // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)
      if (!this.options.dragOverBubble && !originalEvent.rootEl) {
        this._handleAutoScroll(originalEvent);
      }
    },
    drop: function drop() {
      if (this.sortable.nativeDraggable) {
        off(document, 'dragover', this._handleAutoScroll);
      } else {
        off(document, 'pointermove', this._handleFallbackAutoScroll);
        off(document, 'touchmove', this._handleFallbackAutoScroll);
        off(document, 'mousemove', this._handleFallbackAutoScroll);
      }
      clearPointerElemChangedInterval();
      clearAutoScrolls();
      cancelThrottle();
    },
    nulling: function nulling() {
      touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
      autoScrolls.length = 0;
    },
    _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
      this._handleAutoScroll(evt, true);
    },
    _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
      var _this = this;
      var x = (evt.touches ? evt.touches[0] : evt).clientX,
        y = (evt.touches ? evt.touches[0] : evt).clientY,
        elem = document.elementFromPoint(x, y);
      touchEvt$1 = evt;

      // IE does not seem to have native autoscroll,
      // Edge's autoscroll seems too conditional,
      // MACOS Safari does not have autoscroll,
      // Firefox and Chrome are good
      if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {
        autoScroll(evt, this.options, elem, fallback);

        // Listener for pointer element change
        var ogElemScroller = getParentAutoScrollElement(elem, true);
        if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
          pointerElemChangedInterval && clearPointerElemChangedInterval();
          // Detect for pointer elem change, emulating native DnD behaviour
          pointerElemChangedInterval = setInterval(function () {
            var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);
            if (newElem !== ogElemScroller) {
              ogElemScroller = newElem;
              clearAutoScrolls();
            }
            autoScroll(evt, _this.options, newElem, fallback);
          }, 10);
          lastAutoScrollX = x;
          lastAutoScrollY = y;
        }
      } else {
        // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
        if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
          clearAutoScrolls();
          return;
        }
        autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
      }
    }
  };
  return _extends(AutoScroll, {
    pluginName: 'scroll',
    initializeByDefault: true
  });
}
function clearAutoScrolls() {
  autoScrolls.forEach(function (autoScroll) {
    clearInterval(autoScroll.pid);
  });
  autoScrolls = [];
}
function clearPointerElemChangedInterval() {
  clearInterval(pointerElemChangedInterval);
}
var autoScroll = throttle$1(function (evt, options, rootEl, isFallback) {
  // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
  if (!options.scroll) return;
  var x = (evt.touches ? evt.touches[0] : evt).clientX,
    y = (evt.touches ? evt.touches[0] : evt).clientY,
    sens = options.scrollSensitivity,
    speed = options.scrollSpeed,
    winScroller = getWindowScrollingElement();
  var scrollThisInstance = false,
    scrollCustomFn;

  // New scroll root, set scrollEl
  if (scrollRootEl !== rootEl) {
    scrollRootEl = rootEl;
    clearAutoScrolls();
    scrollEl = options.scroll;
    scrollCustomFn = options.scrollFn;
    if (scrollEl === true) {
      scrollEl = getParentAutoScrollElement(rootEl, true);
    }
  }
  var layersOut = 0;
  var currentParent = scrollEl;
  do {
    var el = currentParent,
      rect = getRect(el),
      top = rect.top,
      bottom = rect.bottom,
      left = rect.left,
      right = rect.right,
      width = rect.width,
      height = rect.height,
      canScrollX = void 0,
      canScrollY = void 0,
      scrollWidth = el.scrollWidth,
      scrollHeight = el.scrollHeight,
      elCSS = css(el),
      scrollPosX = el.scrollLeft,
      scrollPosY = el.scrollTop;
    if (el === winScroller) {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');
    } else {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');
    }
    var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);
    var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);
    if (!autoScrolls[layersOut]) {
      for (var i = 0; i <= layersOut; i++) {
        if (!autoScrolls[i]) {
          autoScrolls[i] = {};
        }
      }
    }
    if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
      autoScrolls[layersOut].el = el;
      autoScrolls[layersOut].vx = vx;
      autoScrolls[layersOut].vy = vy;
      clearInterval(autoScrolls[layersOut].pid);
      if (vx != 0 || vy != 0) {
        scrollThisInstance = true;
        /* jshint loopfunc:true */
        autoScrolls[layersOut].pid = setInterval(function () {
          // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
          if (isFallback && this.layer === 0) {
            Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely
          }
          var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
          var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;
          if (typeof scrollCustomFn === 'function') {
            if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {
              return;
            }
          }
          scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
        }.bind({
          layer: layersOut
        }), 24);
      }
    }
    layersOut++;
  } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));
  scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
}, 30);

var drop = function drop(_ref) {
  var originalEvent = _ref.originalEvent,
    putSortable = _ref.putSortable,
    dragEl = _ref.dragEl,
    activeSortable = _ref.activeSortable,
    dispatchSortableEvent = _ref.dispatchSortableEvent,
    hideGhostForTarget = _ref.hideGhostForTarget,
    unhideGhostForTarget = _ref.unhideGhostForTarget;
  if (!originalEvent) return;
  var toSortable = putSortable || activeSortable;
  hideGhostForTarget();
  var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
  var target = document.elementFromPoint(touch.clientX, touch.clientY);
  unhideGhostForTarget();
  if (toSortable && !toSortable.el.contains(target)) {
    dispatchSortableEvent('spill');
    this.onSpill({
      dragEl: dragEl,
      putSortable: putSortable
    });
  }
};
function Revert() {}
Revert.prototype = {
  startIndex: null,
  dragStart: function dragStart(_ref2) {
    var oldDraggableIndex = _ref2.oldDraggableIndex;
    this.startIndex = oldDraggableIndex;
  },
  onSpill: function onSpill(_ref3) {
    var dragEl = _ref3.dragEl,
      putSortable = _ref3.putSortable;
    this.sortable.captureAnimationState();
    if (putSortable) {
      putSortable.captureAnimationState();
    }
    var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);
    if (nextSibling) {
      this.sortable.el.insertBefore(dragEl, nextSibling);
    } else {
      this.sortable.el.appendChild(dragEl);
    }
    this.sortable.animateAll();
    if (putSortable) {
      putSortable.animateAll();
    }
  },
  drop: drop
};
_extends(Revert, {
  pluginName: 'revertOnSpill'
});
function Remove() {}
Remove.prototype = {
  onSpill: function onSpill(_ref4) {
    var dragEl = _ref4.dragEl,
      putSortable = _ref4.putSortable;
    var parentSortable = putSortable || this.sortable;
    parentSortable.captureAnimationState();
    dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
    parentSortable.animateAll();
  },
  drop: drop
};
_extends(Remove, {
  pluginName: 'removeOnSpill'
});

Sortable.mount(new AutoScrollPlugin());
Sortable.mount(Remove, Revert);

var base$m = function base(props, context, dependencies, options) {
  var {
    sort
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var el$ = dependencies.el$;
  var isDisabled = dependencies.isDisabled;
  var fire = dependencies.fire;
  var refreshOrderStore = dependencies.refreshOrderStore;
  var value = dependencies.value;
  var sorting = dependencies.sorting;
  var length = dependencies.length;
  var path = dependencies.path;
  var children$Array = dependencies.children$Array;

  // ================ DATA ================

  /**
   * The DOM element containing list items.
   *
   * @type {HTMLElement}
   * @private
   */
  var list = ref(null);

  /**
   * The `Sortable.js` instance.
   *
   * @type {object}
   * @private
   */
  var sortable = ref(null);

  // ============== COMPUTED ==============

  /**
   * Whether the list is sortable. Can be enabled with [`sort`](#option-sort) option, but it will disabled if [`isDisabled`](#property-is-disabled) is `true`.
   *
   * @type {boolean}
   */
  var isSortable = computed(() => {
    return sort.value && !isDisabled.value && length.value && value.value[0] !== undefined;
  });

  // =============== METHODS ==============

  /**
   * Inits Sortable.js.
   *
   * @returns {void}
   * @private
   */
  var initSortable = () => {
    sortable.value = new Sortable(list.value, {
      handle: "[data-handle]",
      onStart: /* istanbul ignore next: can not imitate dragging */() => {
        sorting.value = true;
      },
      onEnd: handleSort
    });
  };

  /**
   * Destroys Sortable.js.
   *
   * @returns {void}
   * @private
   */
  var destroySortable = () => {
    var _sortable$value;
    (_sortable$value = sortable.value) === null || _sortable$value === void 0 || _sortable$value.destroy();
    sortable.value = null;
  };

  /**
   * Handles `sort` event.
   *
   * @param {Event} e* Sortable.js event
   * @returns {void}
   * @private
   */
  var handleSort = _ref => {
    var {
      oldIndex,
      newIndex,
      item
    } = _ref;
    sorting.value = false;

    /* istanbul ignore next: can not imitate dragging */
    if (oldIndex === newIndex || isDisabled.value) {
      return;
    }
    list.value.children[newIndex].remove();
    list.value.insertBefore(item, list.value.children[oldIndex]);
    var valueClone = cloneDeep_1(value.value);
    valueClone.splice(newIndex, 0, valueClone.splice(oldIndex, 1)[0]);
    value.value = valueClone;
    refreshOrderStore(value.value);
    fire('sort', value.value, oldIndex, newIndex, children$Array.value[newIndex], el$.value);
  };

  // ============== WATCHERS ==============

  watch(isSortable, (n, o) => {
    /* istanbul ignore else */
    if (n === true && o === false) {
      initSortable();
    } else if (n === false && o === true) {
      destroySortable();
    }
  }, {
    immediate: false,
    flush: 'post'
  });

  // ================ HOOKS ===============

  onMounted(() => {
    if (isSortable.value) {
      initSortable();
    }
  });
  watch(length, n => {
    var _sortable$value2;
    if (!isSortable.value) {
      return;
    }
    destroySortable();
    initSortable();
    (_sortable$value2 = sortable.value) === null || _sortable$value2 === void 0 || _sortable$value2.sort(Array.from(Array(n).keys()).reduce((a, b, i) => {
      a.push("".concat(path.value, "-").concat(i));
      return a;
    }, []));
  }, {
    flush: 'post'
  });
  return {
    list,
    sortable,
    isSortable,
    handleSort,
    initSortable,
    destroySortable
  };
};

var base$l = function base(props, context, dependencies) {
  // ================ DATA ================

  /**
   * Whether the list is currently being sorted (an item is dragged).
   *
   * @type {boolean}
   */
  var sorting = ref(false);
  return {
    sorting
  };
};

var base$k = function base(props, context, dependencies, options) {
  var {
    storeOrder,
    orderBy,
    order
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var value = dependencies.value;

  // ================= DATA ===============

  var orderFrom = ref(form$.value.$vueform.config.orderFrom);

  // =============== METHODS ==============

  /**
   * Sets the value of `storeOrder` field within a list of items to match the order.
   *
   * @param {array} value* list of items
   * @returns {void}
   * @private
   */
  var refreshOrderStore = value => {
    if (storeOrder.value) {
      each(value, (val, index) => {
        val[storeOrder.value] = order.value && order.value.toUpperCase() === 'DESC' ? value.length - index - (orderFrom.value == 0 ? 1 : 0) : parseInt(index) + orderFrom.value;
      });
    }
    return value;
  };

  /**
   * The name of the child (when using [`object`](#option-object)) by which the items should be ordered.
   *
   * @type {string}
   */
  var orderByName = computed(() => {
    return orderBy.value || storeOrder.value;
  });
  watch(storeOrder, (n, o) => {
    // If storeOrder exists, refresh
    if (n) {
      refreshOrderStore(value.value);
    }

    // If not, clear its value
    else {
      each(value.value, (val, index) => {
        val[o] = null;
      });
    }
  }, {
    immediate: false
  });
  return {
    refreshOrderStore,
    orderByName
  };
};
var multifile$2 = function multifile(props, context, dependencies, options) {
  var {
    storeOrder,
    orderBy
  } = toRefs(props);
  var {
    refreshOrderStore
  } = base$k(props, context, dependencies);

  // =============== METHODS ==============

  /**
   * The name of the field (when using [`fields`](#option-fields)) by which the files should be ordered.
   *
   * @type {string}
   */
  var orderByName = computed(() => {
    return orderBy.value || storeOrder.value;
  });
  return {
    refreshOrderStore,
    orderByName
  };
};

var base$j = function base(props, context, dependencies) {
  var {
    object,
    element
  } = toRefs(props);

  // ============== COMPUTED ==============

  /**
   * The schema of a child element.
   *
   * @type {object}
   * @private
   */
  var prototype = computed(() => {
    return isObject.value ? Object.assign({}, object.value, {
      type: 'object'
    }) : element.value || {};
  });

  /**
   * Whether children are objects.
   *
   * @type {boolean}
   * @private
   */
  var isObject = computed(() => {
    return !!object.value;
  });
  return {
    prototype,
    isObject
  };
};
var multifile$1 = function multifile(props, context, dependencies) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var {
    auto,
    object,
    file,
    fields,
    storeFile,
    storeOrder,
    view,
    clickable,
    url,
    previewUrl,
    uploadTempEndpoint,
    removeTempEndpoint,
    removeEndpoint,
    params,
    softRemove
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var isDisabled = dependencies.isDisabled;

  // =============== PRIVATE ==============

  var type = computed(() => {
    return options.type || 'file';
  });

  // ============== COMPUTED ==============

  /**
   * The `name` of the child element that stores the filename.
   *
   * @type {string}
   * @private
   */
  var storeFileName = computed(() => {
    /* istanbul ignore else */
    if (storeFile.value) {
      return storeFile.value;
    }

    //@todo:adam unreachable code, storeFile is never undefined
    /* istanbul ignore next: fields.value is hardcoded {} */
    return object.value || keys_1(fields.value).length || storeOrder.value ? 'file' : null;
  });
  var isObject = computed(() => {
    return !!object.value || !!storeOrder.value || !!keys_1(fields.value).length;
  });
  var prototype = computed(() => {
    var fileSchema = {
      type: type.value,
      auto: auto.value,
      view: view.value,
      layout: view.value === 'gallery' ? 'ElementLayoutInline' : 'ElementLayout',
      disabled: isDisabled.value,
      clickable: clickable.value,
      url: url.value,
      previewUrl: previewUrl.value,
      uploadTempEndpoint: uploadTempEndpoint.value,
      removeTempEndpoint: removeTempEndpoint.value,
      removeEndpoint: removeEndpoint.value,
      params: params.value,
      softRemove: softRemove.value
    };
    if (!isObject.value) {
      return Object.assign({}, fileSchema, file.value);
    }
    return {
      type: 'object',
      schema: Object.assign({},
      // File
      {
        [storeFileName.value]: Object.assign({}, fileSchema, {
          embed: true
        }, file.value)
      },
      // Order
      storeOrder.value ? {
        [storeOrder.value]: {
          type: 'hidden',
          meta: true
        }
      } : {},
      // Other fields
      fields.value)
    };
  });
  return {
    storeFileName,
    isObject,
    prototype
  };
};

var base$i = function base(props, context, dependencies) {
  var {
    controls,
    sort,
    min,
    max,
    addText
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var {
    isDisabled,
    value,
    form$
  } = dependencies;

  // ================ DATA ================

  /**
   * Whether adding new items is allowed. Will return `false` if the element has [`isDisabled: true`](#property-is-disabled) or have reached [`max`](#option-max) items. Can be disabled manually by setting [`controls.add`](#option-controls) to `false`.
   *
   * @type {boolean}
   */
  var hasAdd = computed(() => {
    return !isDisabled.value && (controls.value.add || controls.value.add === undefined) && (max.value === -1 || max.value > value.value.length);
  });

  /**
   * Whether remove items is allowed. Will return `false` if the element has [`isDisabled: true`](#property-is-disabled) or has <= [`min`](#option-min) items. Can be disabled manually by setting [`controls.remove`](#option-controls) to `false`.
   *
   * @type {boolean}
   */
  var hasRemove = computed(() => {
    return !isDisabled.value && (controls.value.remove || controls.value.remove === undefined) && (min.value === -1 || min.value < value.value.length);
  });

  /**
   * Whether list items should be sortable. Can be enabled by setting [`sort`](#option-sort) to `true`, but will return `false` if the element has [`isDisabled: true`](#property-is-disabled).
   *
   * @type {boolean}
   */
  var hasSort = computed(() => {
    return !isDisabled.value && (controls.value.sort || controls.value.sort === undefined) && sort.value;
  });

  /**
   * The label of add button.
   *
   * @type {string}
   */
  var addLabel = computed(() => {
    return form$.value.$vueform.sanitize(addText.value || form$.value.translations.vueform.elements.list.add);
  });
  return {
    hasAdd,
    hasRemove,
    hasSort,
    addLabel
  };
};
var multifile = function multifile(props, context, dependencies) {
  var {
    controls,
    sort
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var isDisabled = dependencies.isDisabled;
  var hasUploading = dependencies.hasUploading;

  // ================ DATA ================

  /**
   * Whether adding new files is allowed. Will return `false` if the element has [`isDisabled: true`](#property-is-disabled). Can be disabled manually by setting [`controls.add`](#option-controls) to `false`.
   *
   * @type {boolean}
   */
  var hasAdd = computed(() => {
    return controls.value.add || controls.value.add === undefined;
  });

  /**
   * Whether remove files is allowed. Will return `false` if the element has [`isDisabled: true`](#property-is-disabled) or a temporary file upload is in progress. Can be disabled manually by setting [`controls.remove`](#option-controls) to `false`.
   *
   * @type {boolean}
   */
  var hasRemove = computed(() => {
    return !isDisabled.value && (controls.value.remove || controls.value.remove === undefined) && !hasUploading.value;
  });

  /**
   * Whether list files should be sortable. Can be enabled by setting [`sort`](#option-sort) to `true`, but will return `false` if the element has [`isDisabled: true`](#property-is-disabled) or a temporary file upload is in progress.
   *
   * @type {boolean}
   */
  var hasSort = computed(() => {
    return !isDisabled.value && (controls.value.sort || controls.value.sort === undefined) && sort.value && !hasUploading.value;
  });
  return {
    hasAdd,
    hasRemove,
    hasSort
  };
};

var ListElement = {
  name: 'ListElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'add', 'remove', 'sort', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'list',
      private: true
    },
    default: {
      required: false,
      type: [Array],
      default: undefined
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    onAdd: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onRemove: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onSort: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    element: {
      required: false,
      type: [Object],
      default: null
    },
    object: {
      required: false,
      type: [Object],
      default: null
    },
    initial: {
      required: false,
      type: [Number],
      default: 1
    },
    min: {
      required: false,
      type: [Number],
      default: -1
    },
    max: {
      required: false,
      type: [Number],
      default: -1
    },
    addText: {
      required: false,
      type: [String],
      default: null,
      '@default': 'locale.elements.list.add'
    },
    sort: {
      required: false,
      type: [Boolean],
      default: false
    },
    controls: {
      required: false,
      type: [Object],
      default: () => ({
        add: true,
        remove: true,
        sort: true
      })
    },
    storeOrder: {
      required: false,
      type: [String],
      default: null
    },
    order: {
      required: false,
      type: [String],
      default: null
    },
    orderBy: {
      required: false,
      type: [String],
      default: null
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    //@todo:adam useValue and useDefault should be before useOrder
    context.features = [base$Y, base$Y, base$1f, base$1e, base$$, base$T, base$_, array$1, base$j, base$o, base$l, base$k, base$1i, list$4, base$X, base$H, base$15, base$O, base$18, list$5, list$1, list$3, base$i, array, base$14, base$13, base$12, base$1g, base$11, list, base$m, base$W, list$2, base$Z];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var base$h = function base(props, context, dependencies) {
  var options_ = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var {
    provider,
    extendOptions
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var value = dependencies.value;
  var clear = dependencies.clear;
  var input = dependencies.input;

  // ============== PRIVATE ===============

  /* istanbul ignore next: private */
  var inputElement = () => {
    return options_.input ? options_.input.value : input.value;
  };

  // ================ DATA ================

  /**
   * The location service that's initialized once the component is mounted.
   *
   * @type {object|null}
   * @default null
   */
  var locationService = ref(null);

  /**
   * The raw location object of location provider (Google/Algolia).
   *
   * @type {object}
   * @default null
   */
  var location = ref({});

  // ============== COMPUTED ==============

  //@todo:adam location `provider` should not be google by default but null
  var locationProvider = computed(() => {
    return provider.value || form$.value.$vueform.config.locationProvider;
  });

  /**
   * Default options for location provider. Can be extended with [`extendOptions`](#option-extend-options).
   *
   * @type {object}
   * @default {}
   */
  var defaultOptions = computed(() => {
    var providers = {
      google: {
        fields: ['geometry', 'formatted_address', 'address_components']
      },
      algolia: {
        type: 'address',
        appId: form$.value.$vueform.config.services.algolia.app_id,
        apiKey: form$.value.$vueform.config.services.algolia.api_key,
        templates: options_.templates || {}
      }
    };
    return providers[locationProvider.value];
  });

  /**
   * Additional options for [Google Places](https://developers.google.com/maps/documentation/javascript/reference/places-widget#AutocompleteOptions) or [Algolia Places](https://community.algolia.com/places/documentation.html#options) depending on the provider.
   *
   * @type {object}
   * @default {}
   * @option
   */
  var providerOptions = computed(() => {
    return Object.assign({}, defaultOptions.value, extendOptions.value || /* istanbul ignore next: failsafe only */{});
  });

  // =============== METHODS ==============

  /**
   * Handles location service's address change.
   *
   * @param {object} data* an object containing address data
   * @param {object} raw* an object containing raw address data (based on provider)
   * @returns {void}
   * @private
   */
  var handleAddressChange = (data, raw) => {
    /* istanbul ignore next */
    if (options_.handleAddressChange) {
      options_.handleAddressChange(data, raw);
      return;
    }
    location.value = raw;
    value.value = data;
  };

  /* istanbul ignore next */
  /**
   * Handles the blur event of location element.
   * 
   * @returns {void}
   * @private
   */
  var handleLocationBlur = () => {
    if (inputElement().value.length) {
      inputElement().value = value.value.formatted_address;
    } else {
      clear();
    }
  };

  /**
   * Initializes location service. Can be used to re-initialize location service.
   *
   * @returns {void}
   */
  var initLocationService = () => {
    if (locationService.value) {
      locationService.value.destroy();
    }
    locationService.value = new form$.value.$vueform.services.location[locationProvider.value]();
    locationService.value.init(inputElement(), handleAddressChange, providerOptions.value);
  };

  // ============== WATCHERS ==============

  watch([locationProvider, providerOptions], () => {
    initLocationService();
  }, {
    deep: true,
    immediate: false
  });

  // =============== HOOKS ================

  onMounted(() => {
    initLocationService();
  });
  return {
    locationService,
    location,
    defaultOptions,
    providerOptions,
    handleAddressChange,
    handleLocationBlur,
    initLocationService
  };
};

var LocationElement = {
  name: 'LocationElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'location',
      private: true
    },
    default: {
      required: false,
      type: [Object],
      default: () => ({
        country: null,
        country_code: null,
        state: null,
        state_code: null,
        city: null,
        zip: null,
        address: null,
        formatted_address: null,
        lat: null,
        lng: null
      })
    },
    debounce: {
      required: false,
      type: [Number],
      default: null
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    floating: {
      required: false,
      type: [String, Boolean, Object],
      localized: true,
      default: null
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    placeholder: {
      required: false,
      type: [String, Object],
      localized: true,
      default: null
    },
    readonly: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    attrs: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    addons: {
      required: false,
      type: [Object],
      localized: true,
      default: () => ({})
    },
    provider: {
      required: false,
      type: [String],
      default: 'google'
    },
    displayKey: {
      required: false,
      type: [String],
      default: 'formatted_address'
    },
    extendOptions: {
      required: false,
      type: [Object],
      default: () => ({})
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$R, base$T, location$2, base$_, base$L, base$1i, base$U, base$X, base$G, base$A, base$H, base$Q, location, base$1a, base$N, base$F, base$h, base$15, base$O, base$13, base$12, base$1g, base$14, base$11, base$w, base$W, location$1, base$Z, base$x];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after', 'addon-before', 'addon-after'];
    return _objectSpread2$1({}, location$3(props, context));
  }
};

var base$g = function base(props, context, dependencies) {
  var {
    rows,
    cols,
    inputType,
    minWidth,
    addText,
    hideRows,
    items,
    maxWidth,
    rowWrap,
    templateColumns,
    hideCols,
    colWrap,
    gap,
    canRemove,
    canAdd,
    min,
    max,
    presets,
    name
  } = toRefs(props);
  var {
    el$,
    form$,
    path,
    hasDynamicRows,
    resolvedRows,
    resolvedColumns,
    rowsCount,
    value,
    genericName,
    isDisabled,
    isReadonly,
    defaultValue
  } = dependencies;
  inject('config$');

  // ================ DATA ================

  /**
   * The HTML element of the matrix grix.
   * 
   * @type {HTMLElement}
   */
  var grid = ref(null);

  // ============== COMPUTED ==============

  /**
   * Whether rows can be added when rows are dynamic.
   * 
   * @type {boolean}
   */
  var allowAdd = computed(() => {
    return hasDynamicRows.value && canAdd.value && (max.value === -1 || max.value > Object.keys(value.value).length);
  });

  /**
   * Whether rows can be removed when rows are dynamic.
   * 
   * @type {boolean}
   */
  var allowRemove = computed(() => {
    return hasDynamicRows.value && canRemove.value && (min.value === -1 || min.value < Object.keys(value.value).length);
  });

  /**
   * The label of add button.
   *
   * @type {string}
   */
  var addLabel = computed(() => {
    return form$.value.$vueform.sanitize(addText.value || form$.value.translations.vueform.elements.list.add);
  });

  /**
   * Whether row labels should be displayed.
   * 
   * @type {boolean}
   */
  var rowsVisible = computed(() => {
    if (hasDynamicRows.value) {
      return false;
    }
    return !hideRows.value;
  });

  /**
   * Whether column headers should be displayed.
   * 
   * @type {boolean}
   */
  var colsVisible = computed(() => {
    return !hideCols.value;
  });
  var gridStyle = computed(() => {
    var gridTemplateColumns = templateColumns.value;
    if (typeof templateColumns.value === 'function') {
      gridTemplateColumns = templateColumns.value(el$.value);
    }
    if (!gridTemplateColumns) {
      gridTemplateColumns = [];

      // Row label column
      if (rowsVisible.value) {
        gridTemplateColumns.push("minmax(min-content, auto)");
      }

      // Cells
      var _min = resolveWidth(minWidth.value, 'min-content');
      var _max = resolveWidth(maxWidth.value, '1fr');
      el$.value.resolvedColumns.filter(c => c.available.value).forEach((col, i) => {
        var colMin = resolveWidth(col.minWidth, _min);
        var colMax = resolveWidth(col.maxWidth, _max);
        gridTemplateColumns.push("minmax(".concat(colMin, ", ").concat(colMax, ")"));
      });

      // Remove column
      if (allowRemove.value) {
        gridTemplateColumns.push("minmax(max-content, max-content)");
      }
      gridTemplateColumns = gridTemplateColumns.join(' ');
    }
    return {
      'grid-template-columns': gridTemplateColumns,
      'gap': gap.value !== 0 ? typeof gap.value === 'number' ? "".concat(gap.value, "px") : gap.value : undefined
    };
  });

  /**
   * The component props of the cells.
   * 
   * @type {array}
   */
  var cells = computed(() => {
    var rows = [];
    resolvedRows.value.forEach((row, r) => {
      var cols = [];
      resolvedColumns.value.forEach((col, c) => {
        cols.push(resolveComponentProps(row, col, r, c));
      });
      rows.push(cols);
    });
    return rows;
  });

  /**
   * The array of cell input types.
   * 
   * @type {array}
   */
  var inputTypes = computed(() => {
    return resolvedColumns.value.map((col, c) => resolveComponentProps({}, col, 0, c)).reduce((prev, curr) => [...prev, curr.type], []);
  });

  // =============== METHODS ==============

  /**
   * Resolves the `width` property to either `px` or plain value,
   *
   * @returns {string}
   * @param {number|string} width* the width to be resolved
   * @param {number|string} def* the default value to be used if width is `undefined`
   * @private
   */
  var resolveWidth = (width, def) => {
    return typeof width === 'number' ? "".concat(width, "px") : width !== undefined ? width : def;
  };

  /**
   * Resolves the cell component type (for `:is`) based on a column object.
   *
   * @returns {string}
   * @param {object} column* the column definition object
   */
  var resolveComponentType = column => {
    var element = column.inputType || inputType.value;
    var type = typeof element === 'string' ? element : element.type;
    return "".concat(upperFirst_1(camelCase_1(type)), "Element");
  };

  /**
   * Resolves the cell component name based on row and column index.
   *
   * @returns {string}
   * @param {number} rowIndex* the index of the row
   * @param {number} colIndex* the index of the column
   */
  var resolveComponentName = (rowIndex, colIndex) => {
    return "".concat(path.value.replace(/\./g, '__'), "_").concat(rowIndex, "_").concat(colIndex);
  };

  /**
   * Resolves the cell component properties.
   *
   * @returns {object}
   * @param {object} row* the row definition object
   * @param {object} col* the column definition object
   * @param {number} rowIndex* the index of the row
   * @param {number} colIndex* the index of the column
   */
  var resolveComponentProps = (row, col, rowIndex, colIndex) => {
    var _col$inputType, _inputType$value, _props$items, _col$items;
    var type = resolveColInputType(col);
    var props = {
      fieldName: "".concat(genericName.value, " / ").concat(hasDynamicRows.value ? "#".concat(row.label + 1) : row.label, " / ").concat(col.label),
      displayErrors: false,
      disabled: isDisabled.value,
      readonly: isReadonly.value,
      presets: presets.value
    };
    if (row.conditions || col.conditions) {
      props.conditions = resolveColConditions(row, col);
    }
    switch (type) {
      case 'radio':
        props.radioValue = true;
        props.radioName = props.name;
        props.standalone = true;
        break;
      case 'checkbox':
      case 'toggle':
        props.standalone = true;
        break;
      case 'textarea':
        props.rows = 1;
        break;
      case 'select':
      case 'checkboxgroup':
      case 'radiogroup':
        props.items = items.value;
        break;
      case 'tags':
      case 'multiselect':
        props.items = items.value;
        props.closeOnSelect = false;
        props.appendToBody = true;
        props.search = true;
        break;
      default:
        props = _objectSpread2$1(_objectSpread2$1({}, props), resolveColProps(col));
        var _presets = (col === null || col === void 0 || (_col$inputType = col.inputType) === null || _col$inputType === void 0 ? void 0 : _col$inputType.presets) || ((_inputType$value = inputType.value) === null || _inputType$value === void 0 ? void 0 : _inputType$value.presets) || [];
        if (_presets.length) {
          props.presets.push(..._presets);
        }
        if (props.items && !((_props$items = props.items) !== null && _props$items !== void 0 && _props$items.length)) {
          props.items = items.value;
        }
        if (['radio', 'checkbox', 'toggle'].includes(props.type)) {
          props.standalone = true;
        }
        if (['select', 'multiselect', 'tags'].includes(props.type)) {
          props.appendToBody = true;
        }
        if (['multiselect', 'tags'].includes(props.type)) {
          props.closeOnSelect = false;
        }
    }
    if (items.value.length && !props.items) {
      props.items = items.value;
    }
    if ((_col$items = col.items) !== null && _col$items !== void 0 && _col$items.length && !props.items) {
      props.items = col.items;
    }
    props.name = resolveComponentName(rowIndex, colIndex);
    return props;
  };

  /**
   * Returns the style of a colum based on its index.
   *
   * @returns {object}
   * @param {object} index* the index of the column
   */
  var getColStyle = index => {
    var _resolvedColumns$valu;
    if (!index) {
      return;
    }
    var col = ((_resolvedColumns$valu = resolvedColumns.value) === null || _resolvedColumns$valu === void 0 ? void 0 : _resolvedColumns$valu[index - 1]) || {};
    var minW = (col === null || col === void 0 ? void 0 : col.minWidth) || minWidth.value || 0;
    var maxW = (col === null || col === void 0 ? void 0 : col.maxWidth) || maxWidth.value || 0;
    var style = {};
    if (minW) {
      style.minWidth = "".concat(minW, "px");
    }
    if (maxW) {
      style.maxWidth = "".concat(maxW, "px");
    }
    return style;
  };

  /**
   * Resolves the input type of a column.
   *
   * @returns {object|string}
   * @param {object} col* the column definition object
   */
  var resolveColInputType = col => {
    return col.inputType || inputType.value;
  };

  /**
   * Resolves the type of the input field of a column.
   *
   * @returns {string}
   * @param {object} col* the column definition object
   */
  var resolveColType = col => {
    var _inputType$value2;
    if (col.inputType) {
      var _col$inputType2;
      return ((_col$inputType2 = col.inputType) === null || _col$inputType2 === void 0 ? void 0 : _col$inputType2.type) || col.inputType;
    }
    return ((_inputType$value2 = inputType.value) === null || _inputType$value2 === void 0 ? void 0 : _inputType$value2.type) || inputType.value;
  };

  /**
   * Resolves the properties of the input type if any.
   *
   * @returns {object}
   * @param {object} col* the column definition object
   * @private
   */
  var resolveColProps = col => {
    var type = resolveColInputType(col);
    return typeof type === 'object' ? type : {};
  };

  /**
   * Resolves the conditions of a cell based on row and column.
   *
   * @returns {object}
   * @param {object} row* the row definition object
   * @param {object} col* the column definition object
   */
  var resolveColConditions = (row, col) => {
    return [...(row.conditions || []), ...(col.conditions || [])];
  };
  watch([inputType, inputTypes], (n, o) => {
    if (isEqual_1(n[0], o[0]) && isEqual_1(n[1], o[1])) {
      return;
    }
    value.value = cloneDeep_1(defaultValue.value);
  }, {
    flush: 'pre'
  });
  return {
    grid,
    resolveComponentType,
    resolveComponentProps,
    resolveComponentName,
    getColStyle,
    resolveColInputType,
    resolveColConditions,
    addLabel,
    gridStyle,
    rowsVisible,
    colsVisible,
    resolveColType,
    allowAdd,
    allowRemove,
    cells,
    inputTypes
  };
};

var base$f = function base(props, context, dependencies) {
  var {
    rows,
    cols,
    inputType
  } = toRefs(props);

  // ============ DEPENDENCIES =============

  var {
    form$,
    el$,
    path
  } = dependencies;

  // =============== INJECTS ===============

  var config$ = inject('config$');

  // ================ DATA =================

  /**
   * The instances of cells.
   *
   * @type {object}
   */
  var cells$ = ref({});

  /**
   * The count of current rows when rows are dynamic.
   *
   * @type {number}
   */
  var rowsCount = ref(typeof rows.value === 'number' ? rows.value : null);

  // =============== COMPUTED ==============

  /**
   * The data structure type of the matrix. Can be: `assoc`, `array` or `object`.
   *
   * @type {array}
   */
  var dataType = computed(() => {
    var _inputType$value;
    var type = ((_inputType$value = inputType.value) === null || _inputType$value === void 0 ? void 0 : _inputType$value.type) || inputType.value;
    var assocTypes = ['radio'];
    var arrayTypes = ['checkbox', 'toggle'];
    if (resolvedColumns.value.every(c => {
      var _c$inputType;
      return assocTypes.includes(((_c$inputType = c.inputType) === null || _c$inputType === void 0 ? void 0 : _c$inputType.type) || c.inputType || type);
    })) {
      return 'assoc';
    }
    if (resolvedColumns.value.every(c => {
      var _c$inputType2;
      return arrayTypes.includes(((_c$inputType2 = c.inputType) === null || _c$inputType2 === void 0 ? void 0 : _c$inputType2.type) || c.inputType || type);
    })) {
      return 'array';
    }
    return 'object';
  });

  /**
   * The value of `rows` or `rowsCount` if rows are dynamic.
   *
   * @type {number|array}
   */
  var computedRows = computed(() => {
    return typeof rows.value === 'number' ? rowsCount.value === null ? 1 : rowsCount.value : rows.value;
  });

  /**
   * The rows of the matrix to be displayed.
   * 
   * @type {array}
   */
  var resolvedRows = computed(() => {
    var resolvedRows = computedRows.value;
    if (typeof resolvedRows === 'number') {
      resolvedRows = [...Array(resolvedRows)].map((r, i) => ({
        value: i,
        label: i
      }));
    }
    if (resolvedRows && typeof resolvedRows === 'object' && !Array.isArray(resolvedRows)) {
      resolvedRows = Object.keys(resolvedRows).map(key => ({
        value: [key],
        label: resolvedRows[key]
      }));
    }
    return resolvedRows.map(row => {
      return typeof row === 'string' || typeof row === 'number' ? {
        value: row,
        label: row
      } : row;
    }).map(r => _objectSpread2$1(_objectSpread2$1({}, r), {}, {
      label: form$.value.$vueform.sanitize(localize(r.label, config$.value, form$.value))
    })).map(r => _objectSpread2$1(_objectSpread2$1({}, r), {}, {
      available: computed(() => !r.conditions || !r.conditions.some(condition => !form$.value.$vueform.services.condition.check(condition, path.value, form$.value, el$.value)))
    }));
  });

  /**
   * The columns of the matrix to be displayed.
   * 
   * @type {array}
   */
  var resolvedColumns = computed(() => {
    var resolvedColumns = cols.value;
    if (cols.value && typeof cols.value === 'object' && !Array.isArray(cols.value)) {
      resolvedColumns = Object.keys(cols.value).map(key => ({
        value: [key],
        label: cols.value[key]
      }));
    }
    return resolvedColumns.map(col => {
      return typeof col === 'string' || typeof col === 'number' ? {
        value: col,
        label: col
      } : col;
    }).map(r => _objectSpread2$1(_objectSpread2$1({}, r), {}, {
      label: form$.value.$vueform.sanitize(localize(r.label, config$.value, form$.value))
    })).map(r => _objectSpread2$1(_objectSpread2$1({}, r), {}, {
      available: computed(() => !r.conditions || !r.conditions.some(condition => !form$.value.$vueform.services.condition.check(condition, path.value, form$.value, el$.value)))
    }));
  });

  /**
   * Whether the matrix has dynamic rows.
   * 
   * @type {boolean}
   */
  var hasDynamicRows = computed(() => {
    return typeof rows.value === 'number';
  });

  // ============== WEATCHERS ==============

  watch(rows, (n, o) => {
    if (typeof n !== 'number') {
      rowsCount.value = null;
    } else {
      rowsCount.value = n;
    }
  }, {
    flush: 'pre'
  });
  return {
    hasDynamicRows,
    computedRows,
    resolvedRows,
    resolvedColumns,
    rowsCount,
    dataType,
    cells$
  };
};

var MatrixElement = {
  name: 'MatrixElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'add', 'remove', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'object',
      private: true
    },
    default: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    readonly: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    inputType: {
      required: false,
      type: [String, Object],
      default: 'radio'
    },
    items: {
      // done
      required: false,
      type: [Array, Object, String, Function],
      default: () => []
    },
    cols: {
      // done
      required: false,
      type: [Array, Object],
      default: () => []
    },
    colWrap: {
      required: false,
      type: [Boolean],
      default: true
    },
    hideCols: {
      // done
      required: false,
      type: [Boolean],
      default: false
    },
    stickyCols: {
      required: false,
      type: [Boolean],
      default: false
    },
    rows: {
      // done
      required: false,
      type: [Array, Object, Number],
      default: 1
    },
    rowWrap: {
      // done
      required: false,
      type: [Boolean],
      default: true
    },
    hideRows: {
      // done
      required: false,
      type: [Boolean],
      default: false
    },
    stickyRows: {
      required: false,
      type: [Boolean],
      default: false
    },
    min: {
      // done
      required: false,
      type: [Number, String],
      default: -1
    },
    max: {
      // done
      required: false,
      type: [Number, String],
      default: -1
    },
    canAdd: {
      // done
      required: false,
      type: [Boolean],
      default: true
    },
    canRemove: {
      // done
      required: false,
      type: [Boolean],
      default: true
    },
    addText: {
      // done
      required: false,
      type: [String],
      default: null,
      '@default': 'locale.elements.list.add'
    },
    minWidth: {
      // done
      required: false,
      type: [Number, String],
      default: 'min-content'
    },
    maxWidth: {
      // done
      required: false,
      type: [Number, String],
      default: '1fr'
    },
    gap: {
      // done
      required: false,
      type: [String, Number],
      default: 16
    },
    padding: {
      // done
      required: false,
      type: [Boolean],
      default: false
    },
    scrollable: {
      required: false,
      type: [Boolean],
      default: true
    },
    templateColumns: {
      // done
      required: false,
      type: [String, Function],
      default: null
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$T, base$_, base$1i, matrix$5, base$f, object$5, matrix$2, matrix$4, base$15, base$O, base$X, base$G, base$g, object, base$18, object$8, matrix$3, base$13, base$12, base$1g, base$14, base$11, matrix$1, base$W, object$4, base$Z];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var base$e = function base(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var isDisabled = dependencies.isDisabled;
  var add = dependencies.add;
  var input = dependencies.input;
  var isObject = dependencies.isObject;
  var storeFileName = dependencies.storeFileName;
  var children$ = dependencies.children$;

  // ============== COMPUTED ==============

  /**
   * Whether any of the files are currently being uploaded to the server (initiated by form submit).
   *
   * @type {boolean}
   */
  var preparing = computed(() => {
    return some_1(children$.value, {
      available: true,
      preparing: true
    });
  });

  /**
   * Whether any of the files are currently being uploaded to the server (initiated by the user).
   *
   * @type {boolean}
   */
  var hasUploading = computed(() => {
    return some_1(children$.value, {
      uploading: true
    });
  });

  // =============== METHODS ==============

  /**
   * Handles `change` event.
   *
   * @param {Event} e* event object
   * @returns {void}
   * @private
   */
  var handleChange = e => {
    if (!e.target || !e.target.files || e.target.files.length == 0 || isDisabled.value) {
      return;
    }
    each(e.target.files, file => {
      add(isObject.value ? {
        [storeFileName.value]: file
      } : file);
    });
    input.value.value = '';
  };

  /**
   * Handles `click` event.
   *
   * @returns {void}
   * @private
   */
  var handleClick = () => {
    if (isDisabled.value) {
      return;
    }
    input.value.click();
  };
  return {
    preparing,
    hasUploading,
    handleChange,
    handleClick
  };
};

var MultifileElement = {
  name: 'MultifileElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'add', 'remove', 'sort', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'multifile',
      private: true
    },
    default: {
      required: false,
      type: [Array],
      default: () => []
    },
    initial: {
      required: false,
      type: [Number],
      default: 0,
      private: true
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    onAdd: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onRemove: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onSort: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    view: {
      type: [String],
      required: false,
      default: 'file'
    },
    drop: {
      required: false,
      type: [Boolean],
      default: false
    },
    sort: {
      required: false,
      type: [Boolean],
      default: false
    },
    controls: {
      required: false,
      type: [Object],
      default: () => ({
        add: true,
        remove: true,
        sort: true
      })
    },
    object: {
      required: false,
      type: [Boolean],
      default: null
    },
    storeFile: {
      required: false,
      type: [String],
      default: 'file'
    },
    fields: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    storeOrder: {
      required: false,
      type: [String],
      default: null
    },
    order: {
      required: false,
      type: [String],
      default: null
    },
    orderBy: {
      required: false,
      type: [String],
      default: null
    },
    file: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    accept: {
      required: false,
      type: [String, Array],
      default: null
    },
    clickable: {
      required: false,
      type: [Boolean],
      default: true
    },
    url: {
      required: false,
      type: [String, Boolean],
      default: '/'
    },
    previewUrl: {
      required: false,
      type: [String],
      default: undefined
    },
    auto: {
      required: false,
      type: [Boolean],
      default: true
    },
    uploadTempEndpoint: {
      required: false,
      type: [Object, String, Function, Boolean, Promise],
      default: undefined,
      '@default': 'config.endpoints.uploadTempFile'
    },
    removeTempEndpoint: {
      required: false,
      type: [Object, String, Function, Boolean, Promise],
      default: undefined,
      '@default': 'config.endpoints.removeTempFile'
    },
    removeEndpoint: {
      required: false,
      type: [Object, String, Function, Boolean, Promise],
      default: undefined,
      '@default': 'config.endpoints.removeFile'
    },
    params: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    softRemove: {
      required: false,
      type: [Boolean],
      default: false
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$T, base$X, array$1, base$o, base$R, base$l, multifile$1, base$_, base$1i, list$4, base$H, base$15, base$O, list$1, base$Q, array, base$18, base$1a, base$14, base$13, base$12, base$11, multifile$2, multifile$4, base$e, multifile, multifile$3, base$1g, base$m, base$W, multifile$5, base$Z];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var base$d = function base(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var fire = dependencies.fire;
  var el$ = dependencies.el$;

  // =============== METHODS ==============

  /**
   * Handles `select` event.
   *
   * @param {object} option* the selected option object
   * @returns {void}
   * @private
   */
  var handleSelect = option => {
    fire('select', option, el$.value);
  };

  /**
   * Handles `deselect` event.
   *
   * @param {object} option* the deselected option object
   * @returns {void}
   * @private
   */
  var handleDeselect = option => {
    fire('deselect', option, el$.value);
  };

  /**
   * Handles `search-change` event.
   *
   * @param {string} searchQuery* the current search query
   * @returns {void}
   * @private
   */
  var handleSearchChange = searchQuery => {
    fire('search-change', searchQuery, el$.value);
  };

  /**
   * Handles `open` event.
   *
   * @returns {void}
   * @private
   */
  var handleOpen = () => {
    fire('open', el$.value);
  };

  /**
   * Handles `close` event.
   *
   * @returns {void}
   * @private
   */
  var handleClose = () => {
    fire('close', el$.value);
  };

  /**
   * Handles `clear` event.
   *
   * @returns {void}
   * @private
   */
  var handleClear = () => {
    fire('clear', el$.value);
  };

  /**
   * Handles `paste` event.
   *
   * @param {Event} e event
   * @returns {void}
   * @private
   */
  var handlePaste = e => {
    fire('paste', e, el$.value);
  };

  /**
   * Handles `tag` event.
   *
   * @param {string} searchQuery* the current search query
   * @returns {void}
   * @private
   */
  /* istanbul ignore next: unimplemented */
  var handleTag = searchQuery => {
    // unimplemented
  };

  // =============== HOOKS ================

  return {
    handleSelect,
    handleDeselect,
    handleSearchChange,
    handleOpen,
    handleClose,
    handleClear,
    handlePaste,
    handleTag
  };
};

function spliceMultiple(array, indexes) {
  indexes.sort();
  for (var i = indexes.length - 1; i >= 0; i--) {
    array.splice(indexes[i], 1);
  }
  return array;
}

var base$c = function base(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var value = dependencies.value;

  // =============== PRIVATE ==============

  /**
   * Whether an option is already selected.
   *
   * @param {object} option* value of the option
   * @returns {boolean}
   * @private
   */
  var inValue = option => {
    return value.value.indexOf(option) !== -1;
  };

  // =============== METHODS ==============

  /**
   * Selects one or more options.
   *
   * @param {string|array} options* value(s) of the option(s) to select
   * @returns {void}
   */
  var select = options => {
    if (!isArray_1(options)) {
      options = [options];
    }
    var val = clone_1(value.value);
    each(options, option => {
      if (inValue(normalize(option))) {
        return;
      }
      val.push(option);
    });
    value.value = val;
  };

  /**
   * Deselects one or more options.
   *
   * @param {string|array} options* value(s) of the option(s) to deselect
   * @returns {void}
   */
  var deselect = options => {
    if (!isArray_1(options)) {
      options = [options];
    }
    var val = clone_1(value.value);
    var indexes = [];
    each(options, option => {
      var i = value.value.indexOf(option);
      if (i === -1 || indexes.indexOf(i) !== -1) {
        return;
      }
      indexes.push(i);
    });
    value.value = spliceMultiple(val, indexes);
  };
  return {
    select,
    deselect
  };
};

var MultiselectElement = {
  name: 'MultiselectElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'select', 'deselect', 'search-change', 'open', 'close', 'clear', 'paste', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'multiselect',
      private: true
    },
    default: {
      required: false,
      type: [Array],
      default: () => []
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    floating: {
      required: false,
      type: [String, Boolean, Object],
      localized: true,
      default: null
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    placeholder: {
      required: false,
      type: [String, Object],
      localized: true,
      default: null,
      native: false
    },
    attrs: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    onSelect: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onDeselect: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onSearchChange: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onOpen: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onClose: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onClear: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onPaste: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    native: {
      required: false,
      type: [Boolean],
      default: true
    },
    items: {
      required: false,
      type: [Object, Array, Function, String],
      localized: true,
      default: () => ({})
    },
    labelProp: {
      type: [String],
      required: false,
      default: 'label',
      native: false
    },
    valueProp: {
      type: [String],
      required: false,
      default: 'value',
      native: false
    },
    dataKey: {
      type: [String],
      required: false,
      default: undefined
    },
    searchParam: {
      type: [String],
      required: false,
      default: 'query'
    },
    search: {
      required: false,
      type: [Boolean],
      default: false,
      native: false
    },
    trackBy: {
      type: [String, Array],
      required: false,
      default: 'label',
      native: false
    },
    strict: {
      type: [Boolean],
      required: false,
      default: true,
      native: false
    },
    multipleLabel: {
      type: [Function],
      required: false,
      native: false
    },
    multipleLabelSingle: {
      type: [String],
      required: false,
      native: false,
      '@default': 'locale.vueform.multiselect.multipleLabelOne'
    },
    multipleLabelMultiple: {
      type: [String],
      required: false,
      native: false,
      '@default': 'locale.vueform.multiselect.multipleLabelMore'
    },
    create: {
      required: false,
      type: [Boolean],
      default: false,
      native: false
    },
    appendNewOption: {
      type: [Boolean],
      required: false,
      default: true,
      native: false
    },
    addOptionOn: {
      type: [Array],
      required: false,
      default: () => ['enter'],
      native: false
    },
    allowAbsent: {
      type: [Boolean],
      required: false,
      default: false,
      native: false
    },
    object: {
      type: [Boolean],
      required: false,
      default: false,
      native: false
    },
    limit: {
      type: [Number],
      required: false,
      default: -1,
      native: false
    },
    max: {
      type: [Number],
      required: false,
      default: -1,
      native: false
    },
    groups: {
      type: [Boolean],
      required: false,
      default: false,
      native: false
    },
    groupLabel: {
      type: [String],
      required: false,
      default: 'label',
      native: false
    },
    groupOptions: {
      type: [String],
      required: false,
      default: 'items',
      native: false
    },
    groupHideEmpty: {
      type: [Boolean],
      required: false,
      default: false,
      native: false
    },
    groupSelect: {
      type: [Boolean],
      required: false,
      default: true,
      native: false
    },
    openDirection: {
      type: [String],
      required: false,
      default: 'bottom',
      native: false
    },
    appendToBody: {
      type: [Boolean],
      required: false,
      default: false,
      native: false
    },
    appendTo: {
      type: [String],
      required: false,
      default: undefined,
      native: false
    },
    canClear: {
      type: [Boolean],
      required: false,
      default: true,
      native: false
    },
    clearOnSelect: {
      type: [Boolean],
      required: false,
      default: false,
      native: false
    },
    closeOnSelect: {
      type: [Boolean],
      required: false,
      default: true,
      native: false
    },
    closeOnDeselect: {
      type: [Boolean],
      required: false,
      default: false,
      native: false
    },
    clearOnRefetch: {
      type: [Boolean],
      required: false,
      default: true
    },
    delay: {
      type: [Number],
      required: false,
      default: -1,
      native: false
    },
    minChars: {
      type: [Number],
      required: false,
      default: 0,
      native: false
    },
    resolveOnLoad: {
      type: [Boolean],
      required: false,
      default: true,
      native: false
    },
    filterResults: {
      type: [Boolean],
      required: false,
      default: true,
      native: false
    },
    clearOnSearch: {
      type: [Boolean],
      required: false,
      default: false,
      native: false
    },
    hideSelected: {
      type: [Boolean],
      required: false,
      default: true,
      native: false
    },
    caret: {
      type: [Boolean],
      required: false,
      default: true,
      native: false
    },
    loading: {
      type: [Boolean],
      required: false,
      default: false,
      native: false
    },
    noOptionsText: {
      type: [String, Object],
      required: false,
      default: undefined,
      '@default': 'locale.multiselect.noOptions',
      localized: true,
      native: false
    },
    noResultsText: {
      type: [String, Object],
      required: false,
      default: undefined,
      '@default': 'locale.multiselect.noResults',
      localized: true,
      native: false
    },
    autocomplete: {
      type: [String],
      required: false,
      native: false
    },
    inputType: {
      type: [String],
      required: false,
      default: 'text',
      native: false
    },
    extendOptions: {
      required: false,
      type: [Object],
      default: () => ({})
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, multiselect$4, base$T, array$1, base$_, base$L, base$1i, multiselect$5, base$X, base$H, base$I, base$M, multiselect$1, base$Q, multiselect$2, base$1a, array, multiselect$3, base$15, base$O, base$13, base$12, base$1g, base$14, base$11, base$d, base$c, multiselect, base$W, base$K, base$Z, base$x];
    context.slots = ['option', 'multiple-label', 'placeholder', 'group-label', 'before-list', 'after-list', 'no-results', 'no-options', 'caret', 'spinner', 'clear', 'label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var ObjectElement = {
  name: 'ObjectElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'remove', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'object',
      private: true
    },
    default: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    schema: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    embed: {
      required: false,
      type: [Boolean],
      default: false
    },
    onRemove: {
      required: false,
      type: [Function],
      default: null,
      private: true
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$T, base$_, object$5, base$1i, object$7, object$2, object$6, base$15, object, base$18, object$8, object$3, base$13, base$12, base$1g, base$14, base$11, object$1, base$W, object$4, base$Z];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var base$b = function base(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var fire = dependencies.fire;
  var el$ = dependencies.el$;

  // =============== METHODS ==============

  /**
   * Handles `blur` event.
   *
   * @returns {void}
   * @private
   */
  var handleBlur = () => {
    fire('blur', el$.value);
  };

  /**
   * Handles `focus` event.
   *
   * @returns {void}
   * @private
   */
  var handleFocus = () => {
    fire('focus', el$.value);
  };
  return {
    handleBlur,
    handleFocus
  };
};

const us = '{+}0 (000) 000-0000';

var countryPhones = [
  {
    // "country": "Afghanistan",
    "c": "AF",
    "n": "+93",
    "p": 0,
    "m": [
      ["93", "{+}00 00 000 0000"],
    ]
  },
  {
    // "country": "Albania",
    "c": "AL",
    "n": "+355",
    "p": 1,
    "m": [
      ["3554", "{+}000 0 000 0000"],
      ["355", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Algeria",
    "c": "DZ",
    "n": "+213",
    "p": 2,
    "m": [
      ["2131", "{+}000 0 000 0000"],
      ["2132", "{+}000 0 000 0000"],
      ["2133", "{+}000 0 000 0000"],
      ["2134", "{+}000 0 000 0000"],
      ["213", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "American Samoa",
    "c": "AS",
    "n": "+1",
    "p": 3,
    "m": [
      ["1684", us],
    ]
  },
  {
    // "country": "Andorra",
    "c": "AD",
    "n": "+376",
    "p": 4,
    "m": [
      ["376", "{+}000 000 000"],
    ]
  },
  {
    // "country": "Angola",
    "c": "AO",
    "n": "+244",
    "p": 5,
    "m": [
      ["2449", "{+}000 000 000 0000"],
      ["244", "{+}000 000 000 000"],
    ]
  },
  {
    // "country": "Anguilla",
    "c": "AI",
    "n": "+1",
    "p": 6,
    "m": [
      ["1264", us],
    ]
  },
  {
    // "country": "Antigua & Barbuda",
    "c": "AG",
    "n": "+1",
    "p": 7,
    "m": [
      ["1268", us],
    ]
  },
  {
    // "country": "Argentina",
    "c": "AR",
    "n": "+54",
    "p": 8,
    "m": [
      ["549", "{+}00 0 000 000 0000"],
      ["54", "{+}00 000 000 0000"],
    ]
  },
  {
    // "country": "Armenia",
    "c": "AM",
    "n": "+374",
    "p": 9,
    "m": [
      ["37493", "{+}000 00 000 000"],
      ["37494", "{+}000 00 000 000"],
      ["37498", "{+}000 00 000 000"],
      ["37477", "{+}000 00 000 000"],
      ["37491", "{+}000 00 000 000"],
      ["37496", "{+}000 00 000 000"],
      ["37499", "{+}000 00 000 000"],
      ["37455", "{+}000 00 000 000"],
      ["37495", "{+}000 00 000 000"],
      ["37441", "{+}000 00 000 000"],
      ["374", "{+}000 000 000 000"],
    ]
  },
  {
    // "country": "Aruba",
    "c": "AW",
    "n": "+297",
    "p": 10,
    "m": [
      ["297", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "Ascension Island",
    "c": "AC",
    "n": "+247",
    "p": 11,
    "m": [
      ["247", "{+}000 0000"],
    ]
  },
  {
    // "country": "Australia",
    "c": "AU",
    "n": "+61",
    "p": 12,
    "m": [
      ["61", "{+}00 0 0000 0000"],
      ["614", "{+}00 000 000 000"],
    ]
  },
  {
    // "country": "Austria",
    "c": "AT",
    "n": "+43",
    "p": 13,
    "m": [
      ["43", "{+}00 0000000[0000]"],
    ]
  },
  {
    // "country": "Azerbaijan",
    "c": "AZ",
    "n": "+994",
    "p": 14,
    "m": [
      ["9944", "{+}000 00 000 000"],
      ["9945", "{+}000 00 000 000"],
      ["9946", "{+}000 00 000 000"],
      ["9947", "{+}000 00 000 000"],
      ["994", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Bahamas",
    "c": "BS",
    "n": "+1",
    "p": 15,
    "m": [
      ["1242", us],
    ]
  },
  {
    // "country": "Bahrain",
    "c": "BH",
    "n": "+973",
    "p": 16,
    "m": [
      ["973", "{+}000 0000 0000"],
    ]
  },
  {
    // "country": "Bangladesh",
    "c": "BD",
    "n": "+880",
    "p": 17,
    "m": [
      ["8801", "{+}000 00 0000 0000"],
      ["880", "{+}000 00 0000 0000[00]"],
    ]
  },
  {
    // "country": "Barbados",
    "c": "BB",
    "n": "+1",
    "p": 18,
    "m": [
      ["1246", us],
    ]
  },
  {
    // "country": "Belarus",
    "c": "BY",
    "n": "+375",
    "p": 19,
    "m": [
      ["375", "{+}000 000000000[0]"],
    ]
  },
  {
    // "country": "Belgium",
    "c": "BE",
    "n": "+32",
    "p": 20,
    "m": [
      ["324", "{+}00 000 00 00 00"],
      ["32", "{+}00 0 000 00 00"],
    ]
  },
  {
    // "country": "Belize",
    "c": "BZ",
    "n": "+501",
    "p": 21,
    "m": [
      ["501", "{+}000 000-0000"],
    ]
  },
  {
    // "country": "Benin",
    "c": "BJ",
    "n": "+229",
    "p": 22,
    "m": [
      ["229", "{+}000 00 00 00 00"],
    ]
  },
  {
    // "country": "Bermuda",
    "c": "BM",
    "n": "+1",
    "p": 23,
    "m": [
      ["1441", us],
    ]
  },
  {
    // "country": "Bhutan",
    "c": "BT",
    "n": "+975",
    "p": 24,
    "m": [
      ["97517", "{+}000 00 000000"],
      ["975", "{+}000 0 00000[0]"],
    ]
  },
  {
    // "country": "Bolivia",
    "c": "BO",
    "n": "+591",
    "p": 25,
    "m": [
      ["5916", "{+}000 000 000 0000"],
      ["5917", "{+}000 000 000 0000"],
      ["591", "{+}000 0 000 0000[0]"],
    ]
  },
  {
    // "country": "Bosnia & Herzegovina",
    "c": "BA",
    "n": "+387",
    "p": 26,
    "m": [
      ["3876", "{+}000 00 000 000"],
      ["387", "{+}000 00 000 000[0]"],
    ]
  },
  {
    // "country": "Botswana",
    "c": "BW",
    "n": "+267",
    "p": 27,
    "m": [
      ["2677", "{+}000 00 000 0000"],
      ["267", "{+}000 000 000000"],
    ]
  },
  {
    // "country": "Brazil",
    "c": "BR",
    "n": "+55",
    "p": 28,
    "m": [
      ["55", "{+}00 00 0000 0000[0]"],
    ]
  },
  {
    // "country": "British Indian Ocean Territory",
    "c": "IO",
    "n": "+246",
    "p": 29,
    "m": [
      ["246", "{+}000 0000"],
    ]
  },
  {
    // "country": "British Virgin Islands",
    "c": "VG",
    "n": "+1",
    "p": 30,
    "m": [
      ["1284", us],
    ]
  },
  {
    // "country": "Brunei",
    "c": "BN",
    "n": "+673",
    "p": 31,
    "m": [
      ["673", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "Bulgaria",
    "c": "BG",
    "n": "+359",
    "p": 32,
    "m": [
      ["3598", "{+}000 00 000 0000"],
      ["3599", "{+}000 00 000 0000"],
      ["359", "{+}000 0000000[000]"],
    ]
  },
  {
    // "country": "Burkina Faso",
    "c": "BF",
    "n": "+226",
    "p": 33,
    "m": [
      ["226", "{+}000 00 00 00 00"],
    ]
  },
  {
    // "country": "Burundi",
    "c": "BI",
    "n": "+257",
    "p": 34,
    "m": [
      ["257", "{+}000 00 00 00 00"],
    ]
  },
  {
    // "country": "Cambodia",
    "c": "KH",
    "n": "+855",
    "p": 35,
    "m": [
      ["855", "{+}000 000000000"],
    ]
  },
  {
    // "country": "Cameroon",
    "c": "CM",
    "n": "+237",
    "p": 36,
    "m": [
      ["237", "{+}000 0000 0000"],
    ]
  },
  {
    // "country": "Canada",
    "c": "CA",
    "n": "+1",
    "p": 37,
    "m": [
      ["1204", us],
      ["1226", us],
      ["1236", us],
      ["1249", us],
      ["1250", us],
      ["1263", us],
      ["1289", us],
      ["1306", us],
      ["1343", us],
      ["1354", us],
      ["1365", us],
      ["1367", us],
      ["1368", us],
      ["1403", us],
      ["1416", us],
      ["1418", us],
      ["1431", us],
      ["1437", us],
      ["1438", us],
      ["1450", us],
      ["1468", us],
      ["1474", us],
      ["1506", us],
      ["1514", us],
      ["1519", us],
      ["1548", us],
      ["1579", us],
      ["1581", us],
      ["1584", us],
      ["1587", us],
      ["1604", us],
      ["1613", us],
      ["1639", us],
      ["1647", us],
      ["1672", us],
      ["1683", us],
      ["1705", us],
      ["1709", us],
      ["1742", us],
      ["1753", us],
      ["1778", us],
      ["1780", us],
      ["1782", us],
      ["1807", us],
      ["1819", us],
      ["1825", us],
      ["1867", us],
      ["1873", us],
      ["1902", us],
      ["1905", us],
    ]
  },
  {
    // "country": "Cape Verde",
    "c": "CV",
    "n": "+238",
    "p": 38,
    "m": [
      ["238", "{+}000 0000 000"],
    ]
  },
  {
    // "country": "Caribbean Netherlands",
    "c": "BQ",
    "n": "+599",
    "p": 39,
    "m": [
      ["599", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "Cayman Islands",
    "c": "KY",
    "n": "+1",
    "p": 40,
    "m": [
      ["1345", us],
    ]
  },
  {
    // "country": "Central African Republic",
    "c": "CF",
    "n": "+236",
    "p": 41,
    "m": [
      ["236", "{+}000 00 00 00 00"],
    ]
  },
  {
    // "country": "Chad",
    "c": "TD",
    "n": "+235",
    "p": 42,
    "m": [
      ["235", "{+}000 00 00 00 00"],
    ]
  },
  {
    // "country": "Chile",
    "c": "CL",
    "n": "+56",
    "p": 43,
    "m": [
      ["562", "{+}00 0 0000 0000"],
      ["569", "{+}00 0 0000 0000"],
      ["56", "{+}00 00 0000 000[0]"],
    ]
  },
  {
    // "country": "China",
    "c": "CN",
    "n": "+86",
    "p": 44,
    "m": [
      ["8613", "{+}00 000 0000 0000"],
      ["8615", "{+}00 000 0000 0000"],
      ["8618", "{+}00 000 0000 0000"],
      ["86", "{+}00 00 0000 0000"],
    ]
  },
  {
    // "country": "Colombia",
    "c": "CO",
    "n": "+57",
    "p": 45,
    "m": [
      ["573", "{+}00 000 000 0000"],
      ["57", "{+}00 0 000 0000"],
    ]
  },
  {
    // "country": "Comoros",
    "c": "KM",
    "n": "+269",
    "p": 46,
    "m": [
      ["269", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "Congo - Brazzaville",
    "c": "CG",
    "n": "+242",
    "p": 47,
    "m": [
      ["242", "{+}000 00 000 000[0]"],
    ]
  },
  {
    // "country": "Congo - Kinshasa",
    "c": "CD",
    "n": "+243",
    "p": 48,
    "m": [
      ["243", "{+}000 00 000 000[0]"],
    ]
  },
  {
    // "country": "Cook Islands",
    "c": "CK",
    "n": "+682",
    "p": 49,
    "m": [
      ["682", "{+}000 00 000"],
    ]
  },
  {
    // "country": "Costa Rica",
    "c": "CR",
    "n": "+506",
    "p": 50,
    "m": [
      ["506", "{+}000 0000 0000"],
    ]
  },
  {
    // "country": "Côte d’Ivoire",
    "c": "CI",
    "n": "+225",
    "p": 51,
    "m": [
      ["225", "{+}000 00 00 00 00"],
    ]
  },
  {
    // "country": "Croatia",
    "c": "HR",
    "n": "+385",
    "p": 52,
    "m": [
      ["385", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Cuba",
    "c": "CU",
    "n": "+53",
    "p": 53,
    "m": [
      ["535", "{+}00 0 000 0000"],
      ["53", "{+}00 000000[0000]"],
    ]
  },
  {
    // "country": "Curaçao",
    "c": "CW",
    "n": "+599",
    "p": 54,
    "m": [
      ["5999", "{+}000 0 000 0000"],
    ]
  },
  {
    // "country": "Cyprus",
    "c": "CY",
    "n": "+357",
    "p": 55,
    "m": [
      ["357", "{+}000 00 000 000"],
    ]
  },
  {
    // "country": "Czechia",
    "c": "CZ",
    "n": "+420",
    "p": 56,
    "m": [
      ["4206", "{+}000 000 000 000"],
      ["4207", "{+}000 000 000 000"],
      ["420", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Denmark",
    "c": "DK",
    "n": "+45",
    "p": 57,
    "m": [
      ["45", "{+}00 00 00 00 00"],
    ]
  },
  {
    // "country": "Djibouti",
    "c": "DJ",
    "n": "+253",
    "p": 58,
    "m": [
      ["253", "{+}000 00 00 00 00"],
    ]
  },
  {
    // "country": "Dominica",
    "c": "DM",
    "n": "+1",
    "p": 59,
    "m": [
      ["1767", us],
    ]
  },
  {
    // "country": "Dominican Republic",
    "c": "DO",
    "n": "+1",
    "p": 60,
    "m": [
      ["1809", us],
      ["1829", us],
      ["1849", us],
    ]
  },
  {
    // "country": "Ecuador",
    "c": "EC",
    "n": "+593",
    "p": 61,
    "m": [
      ["593", "{+}000 00 0000 000"],
    ]
  },
  {
    // "country": "Egypt",
    "c": "EG",
    "n": "+20",
    "p": 62,
    "m": [
      ["2010", "{+}00 000 0000 000"],
      ["2011", "{+}00 000 0000 000"],
      ["2012", "{+}00 000 0000 000"],
      ["2014", "{+}00 000 0000 000"],
      ["2016", "{+}00 000 0000 000"],
      ["202", "{+}00 0 0000 0000"],
      ["203", "{+}00 0 0000 0000"],
      ["20", "{+}00 000 0000 000"],
    ]
  },
  {
    // "country": "El Salvador",
    "c": "SV",
    "n": "+503",
    "p": 63,
    "m": [
      ["503", "{+}000 0000 0000"],
    ]
  },
  {
    // "country": "Equatorial Guinea",
    "c": "GQ",
    "n": "+240",
    "p": 64,
    "m": [
      ["240", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Eritrea",
    "c": "ER",
    "n": "+291",
    "p": 65,
    "m": [
      ["291", "{+}000 0 000 000"],
    ]
  },
  {
    // "country": "Estonia",
    "c": "EE",
    "n": "+372",
    "p": 66,
    "m": [
      ["372", "{+}000 0000 000[0]"],
    ]
  },
  {
    // "country": "Eswatini",
    "c": "SZ",
    "n": "+268",
    "p": 67,
    "m": [
      ["268", "{+}000 00 00 0000"],
    ]
  },
  {
    // "country": "Ethiopia",
    "c": "ET",
    "n": "+251",
    "p": 68,
    "m": [
      ["2519", "{+}000 000 000 000"],
      ["251", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Falkland Islands (Islas Malvinas)",
    "c": "FK",
    "n": "+500",
    "p": 69,
    "m": [
      ["500", "{+}000 00000"],
    ]
  },
  {
    // "country": "Faroe Islands",
    "c": "FO",
    "n": "+298",
    "p": 70,
    "m": [
      ["298", "{+}000 000 000"],
    ]
  },
  {
    // "country": "Fiji",
    "c": "FJ",
    "n": "+679",
    "p": 71,
    "m": [
      ["679", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "Finland",
    "c": "FI",
    "n": "+358",
    "p": 72,
    "m": [
      ["358", "{+}000 0000[0000000]"],
    ]
  },
  {
    // "country": "France",
    "c": "FR",
    "n": "+33",
    "p": 73,
    "m": [
      ["33", "{+}00 000 000 000"],
    ]
  },
  {
    // "country": "French Guiana",
    "c": "GF",
    "n": "+594",
    "p": 74,
    "m": [
      ["594", "{+}000 000 00 00 00"],
    ]
  },
  {
    // "country": "French Polynesia",
    "c": "PF",
    "n": "+689",
    "p": 75,
    "m": [
      ["689", "{+}000 00 00 00 00"],
    ]
  },
  {
    // "country": "Gabon",
    "c": "GA",
    "n": "+241",
    "p": 76,
    "m": [
      ["24106", "{+}000 000 00 00 00"],
      ["24107", "{+}000 000 00 00 00"],
      ["241", "{+}000 00 00 00 00"],
    ]
  },
  {
    // "country": "Gambia",
    "c": "GM",
    "n": "+220",
    "p": 77,
    "m": [
      ["220", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "Georgia",
    "c": "GE",
    "n": "+995",
    "p": 78,
    "m": [
      ["99532", "{+}000 00 000 0000"],
      ["995", "{+}000 000 000 000[0]"],
    ]
  },
  {
    // "country": "Germany",
    "c": "DE",
    "n": "+49",
    "p": 79,
    "m": [
      ["4930", "{+}00 00 0000 0000"],
      ["4989", "{+}00 00 0000 0000"],
      ["49", "{+}00 000 0000 000[0]"],
    ]
  },
  {
    // "country": "Ghana",
    "c": "GH",
    "n": "+233",
    "p": 80,
    "m": [
      ["233", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Gibraltar",
    "c": "GI",
    "n": "+350",
    "p": 81,
    "m": [
      ["350", "{+}000 0000 0000"],
    ]
  },
  {
    // "country": "Greece",
    "c": "GR",
    "n": "+30",
    "p": 82,
    "m": [
      ["3069", "{+}00 000 0000 000"],
      ["30", "{+}00 000 0000 000[0]"],
    ]
  },
  {
    // "country": "Greenland",
    "c": "GL",
    "n": "+299",
    "p": 83,
    "m": [
      ["299", "{+}000 00 00 00"],
    ]
  },
  {
    // "country": "Grenada",
    "c": "GD",
    "n": "+1",
    "p": 84,
    "m": [
      ["1473", us],
    ]
  },
  {
    // "country": "Guadeloupe",
    "c": "GP",
    "n": "+590",
    "p": 85,
    "m": [
      ["590", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "Guam",
    "c": "GU",
    "n": "+1",
    "p": 86,
    "m": [
      ["1671", us],
    ]
  },
  {
    // "country": "Guatemala",
    "c": "GT",
    "n": "+502",
    "p": 87,
    "m": [
      ["502", "{+}000 000 00000"],
    ]
  },
  {
    // "country": "Guinea",
    "c": "GN",
    "n": "+224",
    "p": 88,
    "m": [
      ["224", "{+}000 0000 000[0]"],
    ]
  },
  {
    // "country": "Guinea-Bissau",
    "c": "GW",
    "n": "+245",
    "p": 89,
    "m": [
      ["245", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "Guyana",
    "c": "GY",
    "n": "+592",
    "p": 90,
    "m": [
      ["592", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "Haiti",
    "c": "HT",
    "n": "+509",
    "p": 91,
    "m": [
      ["509", "{+}000 00 00 0000"],
    ]
  },
  {
    // "country": "Honduras",
    "c": "HN",
    "n": "+504",
    "p": 92,
    "m": [
      ["504", "{+}000 0000 0000"],
    ]
  },
  {
    // "country": "Hong Kong",
    "c": "HK",
    "n": "+852",
    "p": 93,
    "m": [
      ["852", "{+}000 0000 0000"],
    ]
  },
  {
    // "country": "Hungary",
    "c": "HU",
    "n": "+36",
    "p": 94,
    "m": [
      ["361", "{+}00 0 000 0000"],
      ["3620", "{+}00 00 000 0000"],
      ["3630", "{+}00 00 000 0000"],
      ["3670", "{+}00 00 000 0000"],
      ["36", "{+}00 00 000 000[0]"],
    ]
  },
  {
    // "country": "Iceland",
    "c": "IS",
    "n": "+354",
    "p": 95,
    "m": [
      ["354", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "India",
    "c": "IN",
    "n": "+91",
    "p": 96,
    "m": [
      ["916", "{+}00 000 000 0000"],
      ["917", "{+}00 000 000 0000"],
      ["918", "{+}00 000 000 0000"],
      ["919", "{+}00 000 000 0000"],
      ["91", "{+}00 00 0000 0000"],
    ]
  },
  {
    // "country": "Indonesia",
    "c": "ID",
    "n": "+62",
    "p": 97,
    "m": [
      ["62361", "{+}00 000 000 000"],
      ["6221", "{+}00 00 0000 0000"],
      ["628", "{+}00 000 0000 0000"],
      ["62", "{+}00 00000[000000]"],
    ]
  },
  {
    // "country": "Iran",
    "c": "IR",
    "n": "+98",
    "p": 98,
    "m": [
      ["98921", "{+}00 00 000 0000"],
      ["98951", "{+}00 00 000 0000"],
      ["989", "{+}00 000 000 0000"],
      ["98", "{+}00 00000000[00]"],
    ]
  },
  {
    // "country": "Iraq",
    "c": "IQ",
    "n": "+964",
    "p": 99,
    "m": [
      ["9641", "{+}000 0 000 0000[0]"],
      ["9647", "{+}000 000 000 0000"],
      ["964", "{+}000 000000[0000]"],
    ]
  },
  {
    // "country": "Ireland",
    "c": "IE",
    "n": "+353",
    "p": 100,
    "m": [
      ["3531", "{+}000 0 000 0000"],
      ["353", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Israel",
    "c": "IL",
    "n": "+972",
    "p": 101,
    "m": [
      ["9725", "{+}000 00 000 0000"],
      ["9727", "{+}000 00 000 0000"],
      ["972", "{+}000 0 000 0000"],
    ]
  },
  {
    // "country": "Italy",
    "c": "IT",
    "n": "+39",
    "p": 102,
    "m": [
      ["393", "{+}00 000 000 0000"],
      ["39", "{+}00 00 0000 0000"],
    ]
  },
  {
    // "country": "Jamaica",
    "c": "JM",
    "n": "+1",
    "p": 103,
    "m": [
      ["1876", us],
    ]
  },
  {
    // "country": "Japan",
    "c": "JP",
    "n": "+81",
    "p": 104,
    "m": [
      ["8170", "{+}00 00 0000 0000"],
      ["8180", "{+}00 00 0000 0000"],
      ["8190", "{+}00 00 0000 0000"],
      ["81", "{+}00 0 0000 0000"],
    ]
  },
  {
    // "country": "Jordan",
    "c": "JO",
    "n": "+962",
    "p": 105,
    "m": [
      ["9627", "{+}000 000 000 000"],
      ["962", "{+}000 0 000 0000"],
    ]
  },
  {
    // "country": "Kazakhstan",
    "c": "KZ",
    "n": "+7",
    "p": 106,
    "m": [
      ["77", "{+}0 000 000 0000"],
    ]
  },
  {
    // "country": "Kenya",
    "c": "KE",
    "n": "+254",
    "p": 107,
    "m": [
      ["2541", "{+}000 000 000 000"],
      ["2547", "{+}000 000 000 000"],
      ["254", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Kiribati",
    "c": "KI",
    "n": "+686",
    "p": 108,
    "m": [
      ["686", "{+}000 00 000"],
    ]
  },
  {
    // "country": "Kosovo",
    "c": "XK",
    "n": "+383",
    "p": 109,
    "m": [
      ["383", "{+}000 00 000 000"],
    ]
  },
  {
    // "country": "Kuwait",
    "c": "KW",
    "n": "+965",
    "p": 110,
    "m": [
      ["9655", "{+}000 000 00000"],
      ["9656", "{+}000 000 00000"],
      ["9659", "{+}000 000 00000"],
      ["965", "{+}000 0000 0000"],
    ]
  },
  {
    // "country": "Kyrgyzstan",
    "c": "KG",
    "n": "+996",
    "p": 111,
    "m": [
      ["996", "{+}000 000 000 000"],
    ]
  },
  {
    // "country": "Laos",
    "c": "LA",
    "n": "+856",
    "p": 112,
    "m": [
      ["85620", "{+}000 00 0000 0000"],
      ["85630", "{+}000 00 0000 0000"],
      ["856", "{+}000 00 000 000"],
    ]
  },
  {
    // "country": "Latvia",
    "c": "LV",
    "n": "+371",
    "p": 113,
    "m": [
      ["3715", "{+}000 0 00 00000"],
      ["3716", "{+}000 0 00 00000"],
      ["3717", "{+}000 0 00 00000"],
      ["371", "{+}000 000 00 000"],
    ]
  },
  {
    // "country": "Lebanon",
    "c": "LB",
    "n": "+961",
    "p": 114,
    "m": [
      ["96170", "{+}000 00 000 000"],
      ["96171", "{+}000 00 000 000"],
      ["96180", "{+}000 00 000 000"],
      ["96181", "{+}000 00 000 000"],
      ["96190", "{+}000 00 000 000"],
      ["96191", "{+}000 00 000 000"],
      ["961", "{+}000 0 000 000[0]"],
    ]
  },
  {
    // "country": "Lesotho",
    "c": "LS",
    "n": "+266",
    "p": 115,
    "m": [
      ["266", "{+}000 000 000 000"],
    ]
  },
  {
    // "country": "Liberia",
    "c": "LR",
    "n": "+231",
    "p": 116,
    "m": [
      ["231", "{+}000 000000[0000]"],
    ]
  },
  {
    // "country": "Libya",
    "c": "LY",
    "n": "+218",
    "p": 117,
    "m": [
      ["218", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Liechtenstein",
    "c": "LI",
    "n": "+423",
    "p": 118,
    "m": [
      ["42323", "{+}000 00 00000"],
      ["42375", "{+}000 00 00000"],
      ["423", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "Lithuania",
    "c": "LT",
    "n": "+370",
    "p": 119,
    "m": [
      ["370", "{+}000 000 000 000"],
    ]
  },
  {
    // "country": "Luxembourg",
    "c": "LU",
    "n": "+352",
    "p": 120,
    "m": [
      ["352", "{+}000 000 000 000"],
    ]
  },
  {
    // "country": "Macao",
    "c": "MO",
    "n": "+853",
    "p": 121,
    "m": [
      ["8536", "{+}000 000 0000[0]"],
      ["853", "{+}000 0000 000[0]"],
    ]
  },
  {
    // "country": "Madagascar",
    "c": "MG",
    "n": "+261",
    "p": 122,
    "m": [
      ["261", "{+}000 00 00 00000"],
    ]
  },
  {
    // "country": "Malawi",
    "c": "MW",
    "n": "+265",
    "p": 123,
    "m": [
      ["265", "{+}000 000 000 000"],
    ]
  },
  {
    // "country": "Malaysia",
    "c": "MY",
    "n": "+60",
    "p": 124,
    "m": [
      ["60", "{+}00 0000000[000]"],
    ]
  },
  {
    // "country": "Maldives",
    "c": "MV",
    "n": "+960",
    "p": 125,
    "m": [
      ["960", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "Mali",
    "c": "ML",
    "n": "+223",
    "p": 126,
    "m": [
      ["223", "{+}000 00 00 0000"],
    ]
  },
  {
    // "country": "Malta",
    "c": "MT",
    "n": "+356",
    "p": 127,
    "m": [
      ["356", "{+}000 0000 000[0]"],
    ]
  },
  {
    // "country": "Marshall Islands",
    "c": "MH",
    "n": "+692",
    "p": 128,
    "m": [
      ["692", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "Martinique",
    "c": "MQ",
    "n": "+596",
    "p": 129,
    "m": [
      ["596", "{+}000 000 000 000"],
    ]
  },
  {
    // "country": "Mauritania",
    "c": "MR",
    "n": "+222",
    "p": 130,
    "m": [
      ["222", "{+}000 00 000 000"],
    ]
  },
  {
    // "country": "Mauritius",
    "c": "MU",
    "n": "+230",
    "p": 131,
    "m": [
      ["230", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "Mexico",
    "c": "MX",
    "n": "+52",
    "p": 132,
    "m": [
      ["52", "{+}00 000 000 0000"],
    ]
  },
  {
    // "country": "Micronesia",
    "c": "FM",
    "n": "+691",
    "p": 133,
    "m": [
      ["691", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "Moldova",
    "c": "MD",
    "n": "+373",
    "p": 134,
    "m": [
      ["373", "{+}000 000 00 000"],
    ]
  },
  {
    // "country": "Monaco",
    "c": "MC",
    "n": "+377",
    "p": 135,
    "m": [
      ["377", "{+}000 00 00 00 00"],
    ]
  },
  {
    // "country": "Mongolia",
    "c": "MN",
    "n": "+976",
    "p": 136,
    "m": [
      ["976", "{+}000 00 00 0000"],
    ]
  },
  {
    // "country": "Montenegro",
    "c": "ME",
    "n": "+382",
    "p": 137,
    "m": [
      ["382", "{+}000 00 000 000"],
    ]
  },
  {
    // "country": "Montserrat",
    "c": "MS",
    "n": "+1",
    "p": 138,
    "m": [
      ["1664", us],
    ]
  },
  {
    // "country": "Morocco",
    "c": "MA",
    "n": "+212",
    "p": 139,
    "m": [
      ["212", "{+}000 00 000 0000[0]"],
    ]
  },
  {
    // "country": "Mozambique",
    "c": "MZ",
    "n": "+258",
    "p": 140,
    "m": [
      ["258", "{+}000 00 000 000"],
    ]
  },
  {
    // "country": "Myanmar (Burma)",
    "c": "MM",
    "n": "+95",
    "p": 141,
    "m": [
      ["95", "{+}00 0000000[0000]"],
    ]
  },
  {
    // "country": "Namibia",
    "c": "NA",
    "n": "+264",
    "p": 142,
    "m": [
      ["264", "{+}000 000000[000000]"],
    ]
  },
  {
    // "country": "Nauru",
    "c": "NR",
    "n": "+674",
    "p": 143,
    "m": [
      ["674", "{+}000 000000[000000]"],
    ]
  },
  {
    // "country": "Nepal",
    "c": "NP",
    "n": "+977",
    "p": 144,
    "m": [
      ["977", "{+}000 000000[000000]"],
    ]
  },
  {
    // "country": "Netherlands",
    "c": "NL",
    "n": "+31",
    "p": 145,
    "m": [
      ["31", "{+}00 00 000 0000"],
    ]
  },
  {
    // "country": "New Caledonia",
    "c": "NC",
    "n": "+687",
    "p": 146,
    "m": [
      ["687", "{+}000 000000[000000]"],
    ]
  },
  {
    // "country": "New Zealand",
    "c": "NZ",
    "n": "+64",
    "p": 147,
    "m": [
      ["642", "{+}00 000 000 000"],
      ["64", "{+}00 0 000 0000"],
    ]
  },
  {
    // "country": "Nicaragua",
    "c": "NI",
    "n": "+505",
    "p": 148,
    "m": [
      ["505", "{+}000 000000[000000]"],
    ]
  },
  {
    // "country": "Niger",
    "c": "NE",
    "n": "+227",
    "p": 149,
    "m": [
      ["227", "{+}000 00000000[000]"],
    ]
  },
  {
    // "country": "Nigeria",
    "c": "NG",
    "n": "+234",
    "p": 150,
    "m": [
      ["234", "{+}000 000000[000000]"],
    ]
  },
  {
    // "country": "Niue",
    "c": "NU",
    "n": "+683",
    "p": 151,
    "m": [
      ["683", "{+}000 000000[000000]"],
    ]
  },
  {
    // "country": "Norfolk Island",
    "c": "NF",
    "n": "+672",
    "p": 152,
    "m": [
      ["672", "{+}000 000000[000000]"],
    ]
  },
  {
    // "country": "North Korea",
    "c": "KP",
    "n": "+850",
    "p": 153,
    "m": [
      ["850", "{+}000 000000[0000000]"],
    ]
  },
  {
    // "country": "North Macedonia",
    "c": "MK",
    "n": "+389",
    "p": 154,
    "m": [
      ["389", "{+}000 00 000 000"],
    ]
  },
  {
    // "country": "Northern Mariana Islands",
    "c": "MP",
    "n": "+1",
    "p": 155,
    "m": [
      ["1670", us],
    ]
  },
  {
    // "country": "Norway",
    "c": "NO",
    "n": "+47",
    "p": 156,
    "m": [
      ["47", "{+}00 00 00 00 00"],
    ]
  },
  {
    // "country": "Oman",
    "c": "OM",
    "n": "+968",
    "p": 157,
    "m": [
      ["968", "{+}000 0000 0000"],
    ]
  },
  {
    // "country": "Pakistan",
    "c": "PK",
    "n": "+92",
    "p": 158,
    "m": [
      ["923", "{+}00 000 0000 000"],
      ["92", "{+}00 00 0000 0000"],
    ]
  },
  {
    // "country": "Palau",
    "c": "PW",
    "n": "+680",
    "p": 159,
    "m": [
      ["680", "{+}000 000000[000000]"],
    ]
  },
  {
    // "country": "Palestine",
    "c": "PS",
    "n": "+970",
    "p": 160,
    "m": [
      ["970", "{+}000 000000[000000]"],
    ]
  },
  {
    // "country": "Panama",
    "c": "PA",
    "n": "+507",
    "p": 161,
    "m": [
      ["507", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "Papua New Guinea",
    "c": "PG",
    "n": "+675",
    "p": 162,
    "m": [
      ["675", "{+}000 00 000 000"],
    ]
  },
  {
    // "country": "Paraguay",
    "c": "PY",
    "n": "+595",
    "p": 163,
    "m": [
      ["595", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Peru",
    "c": "PE",
    "n": "+51",
    "p": 164,
    "m": [
      ["51", "{+}00 00 000 000"],
    ]
  },
  {
    // "country": "Philippines",
    "c": "PH",
    "n": "+63",
    "p": 165,
    "m": [
      ["639", "{+}00 000 000 0000"],
      ["63", "{+}00 00 000 0000"],
    ]
  },
  {
    // "country": "Poland",
    "c": "PL",
    "n": "+48",
    "p": 166,
    "m": [
      ["485", "{+}00 000 000 000"],
      ["48", "{+}00 00 000 0000"],
    ]
  },
  {
    // "country": "Portugal",
    "c": "PT",
    "n": "+351",
    "p": 167,
    "m": [
      ["351", "{+}000 000 000 000"],
    ]
  },
  {
    // "country": "Puerto Rico",
    "c": "PR",
    "n": "+1",
    "p": 168,
    "m": [
      ["1787", us],
      ["1939", us],
    ]
  },
  {
    // "country": "Qatar",
    "c": "QA",
    "n": "+974",
    "p": 169,
    "m": [
      ["974", "{+}000 0000 0000"],
    ]
  },
  {
    // "country": "Réunion",
    "c": "RE",
    "n": "+262",
    "p": 170,
    "m": [
      ["262", "{+}000 00000 0000"],
    ]
  },
  {
    // "country": "Romania",
    "c": "RO",
    "n": "+40",
    "p": 171,
    "m": [
      ["407", "{+}00 000 000 000"],
      ["40", "{+}00 00 000 0000"],
    ]
  },
  {
    // "country": "Russia",
    "c": "RU",
    "n": "+7",
    "p": 172,
    "m": [
      ["7", "{+}0 000 000 00 00"],
    ]
  },
  {
    // "country": "Rwanda",
    "c": "RW",
    "n": "+250",
    "p": 173,
    "m": [
      ["250", "{+}000 00 000 000"],
    ]
  },
  {
    // "country": "Samoa",
    "c": "WS",
    "n": "+685",
    "p": 174,
    "m": [
      ["685", "{+}000 00 0000"],
    ]
  },
  {
    // "country": "San Marino",
    "c": "SM",
    "n": "+378",
    "p": 175,
    "m": [
      ["378", "{+}000 0000 000000"],
    ]
  },
  {
    // "country": "São Tomé & Príncipe",
    "c": "ST",
    "n": "+239",
    "p": 176,
    "m": [
      ["239", "{+}000 00 00 00"],
    ]
  },
  {
    // "country": "Saudi Arabia",
    "c": "SA",
    "n": "+966",
    "p": 177,
    "m": [
      ["96657", "{+}000 000 00 0000"],
      ["966", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Senegal",
    "c": "SN",
    "n": "+221",
    "p": 178,
    "m": [
      ["221", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Serbia",
    "c": "RS",
    "n": "+381",
    "p": 179,
    "m": [
      ["3816", "{+}000 000 000 000"],
      ["3817", "{+}000 000 000 000"],
      ["381", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Seychelles",
    "c": "SC",
    "n": "+248",
    "p": 180,
    "m": [
      ["248", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "Sierra Leone",
    "c": "SL",
    "n": "+232",
    "p": 181,
    "m": [
      ["232", "{+}000 00 000 000"],
    ]
  },
  {
    // "country": "Singapore",
    "c": "SG",
    "n": "+65",
    "p": 182,
    "m": [
      ["65", "{+}00 0000 0000"],
    ]
  },
  {
    // "country": "Sint Maarten",
    "c": "SX",
    "n": "+1",
    "p": 183,
    "m": [
      ["1721", us],
    ]
  },
  {
    // "country": "Slovakia",
    "c": "SK",
    "n": "+421",
    "p": 184,
    "m": [
      ["4219", "{+}000 000 000 0000"],
      ["421", "{+}000 00000000[00]"],
    ]
  },
  {
    // "country": "Slovenia",
    "c": "SI",
    "n": "+386",
    "p": 185,
    "m": [
      ["3863", "{+}000 00 000 000"],
      ["386", "{+}000 0000000[00]"],
    ]
  },
  {
    // "country": "Solomon Islands",
    "c": "SB",
    "n": "+677",
    "p": 186,
    "m": [
      ["677", "{+}000 00000"],
    ]
  },
  {
    // "country": "Somalia",
    "c": "SO",
    "n": "+252",
    "p": 187,
    "m": [
      ["252", "{+}000 0 000 000"],
    ]
  },
  {
    // "country": "South Africa",
    "c": "ZA",
    "n": "+27",
    "p": 188,
    "m": [
      ["276", "{+}00 000 000 000"],
      ["277", "{+}00 000 000 000"],
      ["278", "{+}00 000 000 000"],
      ["27", "{+}00 00 000 0000"],
    ]
  },
  {
    // "country": "South Korea",
    "c": "KR",
    "n": "+82",
    "p": 189,
    "m": [
      ["82", "{+}00 00000000[00]"],
    ]
  },
  {
    // "country": "South Sudan",
    "c": "SS",
    "n": "+211",
    "p": 190,
    "m": [
      ["211", "{+}000 0000000[00]"],
    ]
  },
  {
    // "country": "Spain",
    "c": "ES",
    "n": "+34",
    "p": 191,
    "m": [
      ["346", "{+}00 000 000 000"],
      ["347", "{+}00 000 000 000"],
      ["34", "{+}00 00 000 000"],
    ]
  },
  {
    // "country": "Sri Lanka",
    "c": "LK",
    "n": "+94",
    "p": 192,
    "m": [
      ["947", "{+}00 000 000 0000"],
      ["948", "{+}00 000 000 0000"],
      ["949", "{+}00 000 000 0000"],
      ["94", "{+}00 00 000 0000"],
    ]
  },
  {
    // "country": "St. Barthélemy",
    "c": "BL",
    "n": "+590",
    "p": 193,
    "m": [
      ["590", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "St. Helena",
    "c": "SH",
    "n": "+290",
    "p": 194,
    "m": [
      ["290", "{+}000 0000"],
    ]
  },
  {
    // "country": "St. Kitts & Nevis",
    "c": "KN",
    "n": "+1",
    "p": 195,
    "m": [
      ["1869", us],
    ]
  },
  {
    // "country": "St. Lucia",
    "c": "LC",
    "n": "+1",
    "p": 196,
    "m": [
      ["1758", us],
    ]
  },
  {
    // "country": "St. Martin",
    "c": "MF",
    "n": "+590",
    "p": 197,
    "m": [
      ["590", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "St. Pierre & Miquelon",
    "c": "PM",
    "n": "+508",
    "p": 198,
    "m": [
      ["508", "{+}000 00 00 00"],
    ]
  },
  {
    // "country": "St. Vincent & Grenadines",
    "c": "VC",
    "n": "+1",
    "p": 199,
    "m": [
      ["1784", us],
    ]
  },
  {
    // "country": "Sudan",
    "c": "SD",
    "n": "+249",
    "p": 200,
    "m": [
      ["249", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Suriname",
    "c": "SR",
    "n": "+597",
    "p": 201,
    "m": [
      ["597", "{+}000 000 000"],
    ]
  },
  {
    // "country": "Sweden",
    "c": "SE",
    "n": "+46",
    "p": 202,
    "m": [
      ["4613", "{+}00 00 00 00 00"],
      ["4618", "{+}00 00 00 00 00"],
      ["467", "{+}00 00 000 00 00"],
      ["468", "{+}00 00 000 00 00"],
      ["46", "{+}00 0000000[0000]"],
    ]
  },
  {
    // "country": "Switzerland",
    "c": "CH",
    "n": "+41",
    "p": 203,
    "m": [
      ["417", "{+}00 000 000 000"],
      ["41", "{+}00 00 000 0000"],
    ]
  },
  {
    // "country": "Syria",
    "c": "SY",
    "n": "+963",
    "p": 204,
    "m": [
      ["9639", "{+}000 000 000 000"],
      ["963", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Taiwan",
    "c": "TW",
    "n": "+886",
    "p": 205,
    "m": [
      ["8869", "{+}000 000 000 000"],
      ["886", "{+}000 0 0000 0000"],
    ]
  },
  {
    // "country": "Tajikistan",
    "c": "TJ",
    "n": "+992",
    "p": 206,
    "m": [
      ["992", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Tanzania",
    "c": "TZ",
    "n": "+255",
    "p": 207,
    "m": [
      ["255", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Thailand",
    "c": "TH",
    "n": "+66",
    "p": 208,
    "m": [
      ["6653", "{+}00 00 000 000"],
      ["6676", "{+}00 00 000 000"],
      ["662", "{+}00 0 000 0000"],
      ["666", "{+}00 000 000 000"],
      ["668", "{+}00 000 000 000"],
      ["669", "{+}00 000 000 000"],
      ["66", "{+}00 00 000 000"],
    ]
  },
  {
    // "country": "Timor-Leste",
    "c": "TL",
    "n": "+670",
    "p": 209,
    "m": [
      ["670", "{+}000 000 0000"],
    ]
  },
  {
    // "country": "Togo",
    "c": "TG",
    "n": "+228",
    "p": 210,
    "m": [
      ["228", "{+}000 00 000 000"],
    ]
  },
  {
    // "country": "Tokelau",
    "c": "TK",
    "n": "+690",
    "p": 211,
    "m": [
      ["690", "{+}000 0000"],
    ]
  },
  {
    // "country": "Tonga",
    "c": "TO",
    "n": "+676",
    "p": 212,
    "m": [
      ["676", "{+}000 00 000"],
    ]
  },
  {
    // "country": "Trinidad & Tobago",
    "c": "TT",
    "n": "+1",
    "p": 213,
    "m": [
      ["1868", us],
    ]
  },
  {
    // "country": "Tunisia",
    "c": "TN",
    "n": "+216",
    "p": 214,
    "m": [
      ["216", "{+}000 00 000 000"],
    ]
  },
  {
    // "country": "Türkiye",
    "c": "TR",
    "n": "+90",
    "p": 215,
    "m": [
      ["90", "{+}00 000 000 0000"],
    ]
  },
  {
    // "country": "Turkmenistan",
    "c": "TM",
    "n": "+993",
    "p": 216,
    "m": [
      ["993", "{+}000 0 000 000"],
    ]
  },
  {
    // "country": "Turks & Caicos Islands",
    "c": "TC",
    "n": "+1",
    "p": 217,
    "m": [
      ["1649", us],
    ]
  },
  {
    // "country": "Tuvalu",
    "c": "TV",
    "n": "+688",
    "p": 218,
    "m": [
      ["688", "{+}000 00 000"],
    ]
  },
  {
    // "country": "U.S. Virgin Islands",
    "c": "VI",
    "n": "+1",
    "p": 219,
    "m": [
      ["1340", us],
    ]
  },
  {
    // "country": "Uganda",
    "c": "UG",
    "n": "+256",
    "p": 220,
    "m": [
      ["2567", "{+}000 000 000 000"],
      ["256", "{+}000 00 000 000[0]"],
    ]
  },
  {
    // "country": "Ukraine",
    "c": "UA",
    "n": "+380",
    "p": 221,
    "m": [
      ["380", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "United Arab Emirates",
    "c": "AE",
    "n": "+971",
    "p": 222,
    "m": [
      ["9715", "{+}000 00 000 0000"],
      ["971", "{+}000 0 000 0000"],
    ]
  },
  {
    // "country": "United Kingdom",
    "c": "GB",
    "n": "+44",
    "p": 223,
    "m": [
      ["4420", "{+}00 00 0000 0000"],
      ["447", "{+}00 0000 000 000"],
      ["44", "{+}00 000 000 0000"],
    ]
  },
  {
    // "country": "United States",
    "c": "US",
    "n": "+1",
    "p": 224,
    "m": [
      ["1", us],
    ]
  },
  {
    // "country": "Uruguay",
    "c": "UY",
    "n": "+598",
    "p": 225,
    "m": [
      ["598", "{+}000 0 000 00 00"],
    ]
  },
  {
    // "country": "Uzbekistan",
    "c": "UZ",
    "n": "+998",
    "p": 226,
    "m": [
      ["998", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Vanuatu",
    "c": "VU",
    "n": "+678",
    "p": 227,
    "m": [
      ["678", "{+}000 00 0000"],
    ]
  },
  {
    // "country": "Vatican City",
    "c": "VA",
    "n": "+39",
    "p": 228,
    "m": [
      ["3906698", "{+}00 00 000 00000"],
      ["379", "{+}000 00 0000 0000"],
    ]
  },
  {
    // "country": "Venezuela",
    "c": "VE",
    "n": "+58",
    "p": 229,
    "m": [
      ["58", "{+}00 000 000 0000"],
    ]
  },
  {
    // "country": "Vietnam",
    "c": "VN",
    "n": "+84",
    "p": 230,
    "m": [
      ["843", "{+}00 000 000 000"],
      ["845", "{+}00 000 000 000"],
      ["847", "{+}00 000 000 000"],
      ["849", "{+}00 000 000 000"],
      ["84", "{+}00 00 0000 0000"],
    ]
  },
  {
    // "country": "Wallis & Futuna",
    "c": "WF",
    "n": "+681",
    "p": 231,
    "m": [
      ["681", "{+}000 00 0000"],
    ]
  },
  {
    // "country": "Yemen",
    "c": "YE",
    "n": "+967",
    "p": 232,
    "m": [
      ["9677", "{+}000 000 000 000"],
      ["967", "{+}000 0 000 000"],
    ]
  },
  {
    // "country": "Zambia",
    "c": "ZM",
    "n": "+260",
    "p": 233,
    "m": [
      ["2609", "{+}000 000 000 000"],
      ["260", "{+}000 00 000 0000"],
    ]
  },
  {
    // "country": "Zimbabwe",
    "c": "ZW",
    "n": "+263",
    "p": 234,
    "m": [
      ["263", "{+}000 00 000 00[00]"],
    ]
  }
];

var base$a = function base(props, context, dependencies) {
  var {
    include,
    exclude,
    mask: maskProp
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var {
    focus,
    value,
    input,
    form$,
    el$,
    classes
  } = dependencies;

  // ================ DATA ================

  /**
   * The country selector `ElementAddonOptions` component.
   *
   * @type {component}
   */
  var options$ = ref(null);

  /**
   * The placeholder component for `ElementAddonOptions` component.
   *
   * @type {component}
   */
  var addonPlaceholder = ref(markRaw({
    props: ['option', 'el$'],
    render() {
      return h('div', {
        class: classes.value.placeholder,
        style: {
          backgroundPosition: "0 -".concat(this.option.p * 20 + 20, "px")
        }
      });
    }
  }));

  // ============== COMPUTED ==============

  /**
   * The options to display.
   *
   * @type {array}
   */
  var addonOptions = computed(() => {
    return countryPhones.filter(c => {
      if (!include.value.length && !exclude.value.length) {
        return true;
      }
      if (include.value.length) {
        return include.value.map(c => c.toUpperCase()).indexOf(c.c) !== -1;
      }
      return exclude.value.map(c => c.toUpperCase()).indexOf(c.c) === -1;
    }).map(c => {
      return _objectSpread2$1(_objectSpread2$1({}, c), {}, {
        value: c.c,
        label: form$.value.translations.vueform.countries[c.c],
        display: markRaw({
          props: ['option', 'index', 'selected', 'pointed', 'el$'],
          render() {
            return h('div', {
              class: classes.value.option(this.selected || this.pointed)
            }, [h('div', {
              class: classes.value.optionWrapper
            }, [h('div', {
              class: classes.value.flag,
              style: {
                backgroundPosition: "0 -".concat(this.option.p * 20 + 20, "px")
              }
            }), h('div', {
              class: classes.value.country
            }, [this.option.label, h('span', {
              class: classes.value.number
            }, [this.option.n])])])]);
          }
        }),
        valueDisplay: markRaw({
          props: ['option', 'el$'],
          render() {
            return h('div', {
              class: classes.value.flag,
              style: {
                backgroundPosition: "0 -".concat(this.option.p * 20 + 20, "px")
              }
            });
          }
        })
      });
    }).sort((a, b) => a.label.localeCompare(b.label)).map((c, i) => _objectSpread2$1(_objectSpread2$1({}, c), {}, {
      index: i
    }));
  });

  /**
   * The mask property if [@vueform/plugin-mask](https://github.com/vueform/plugin-mask) is installed (otherwise `undefined`).
   *
   * @type {object|undefined}
   */
  var mask = computed(() => {
    if (!maskPluginInstalled.value) {
      return;
    }
    var masks = {};
    var maskLengths = [];
    addonOptions.value.forEach(c => c.m.forEach(m => {
      if (masks[m[1]] === undefined) {
        masks[m[1]] = [];
      }
      var length = m[0].toString().length;
      if (masks[m[1]][length] === undefined) {
        masks[m[1]][length] = [];
      }
      masks[m[1]][length].push(parseInt(m[0]));
      if (maskLengths.indexOf(length) === -1) {
        maskLengths.push(length);
      }
    }));
    maskLengths.sort().reverse();
    var mask = [];
    maskLengths.forEach(length => {
      Object.keys(masks).forEach(m => {
        if (masks[m][length]) {
          mask.push({
            mask: m,
            startsWith: masks[m][length],
            placeholder: true
          });
        }
      });
    });
    mask.push({
      mask: '{+}0000000[0000000]',
      startsWith: ''
    });
    return {
      mask
    };
  });

  /**
   * All the available masks for options, where key is the country prefix, value is the mask.
   *
   * @type {object}
   */
  var masks = computed(() => {
    return addonOptions.value.reduce((prev, curr) => {
      return curr.m.reduce((p, c) => {
        return _objectSpread2$1(_objectSpread2$1({}, p), {}, {
          [c[0]]: curr.c
        });
      }, _objectSpread2$1({}, prev));
    }, {});
  });

  /**
   * Whether [@vueform/plugin-mask](https://github.com/vueform/plugin-mask) is installed.
   *
   * @type {boolean}
   */
  var maskPluginInstalled = computed(() => {
    return !!maskProp;
  });

  /**
   * The type of the HTML input field (`text` if masks are enabled, `tel` otherwise).
   * 
   * @type {string}
   */
  var inputType = computed(() => {
    return maskPluginInstalled.value ? 'text' : 'tel';
  });

  // =============== METHODS ==============

  /**
   * Sets country flag according to current input value.
   * 
   * @returns {void}
   */
  var setFlag = function setFlag() {
    var _options$$value$selec;
    var triggerSelect = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    if (!value.value) {
      if (Object.keys(options$.value.selected).length) {
        options$.value.reset();
      }
      return;
    }
    if (value.value && !value.value.toString().startsWith('+') || value.value === ((_options$$value$selec = options$.value.selected) === null || _options$$value$selec === void 0 ? void 0 : _options$$value$selec.n)) {
      return;
    }
    var number = value.value.replace('+', '');
    var lengths = [7, 5, 4, 3, 2, 1].filter(l => number.length >= l);
    var country;
    lengths.forEach(l => {
      if (country) {
        return;
      }
      country = masks.value[number.slice(0, l)] || undefined;
    });
    if (!country) {
      if (Object.keys(options$.value.selected).length) {
        options$.value.reset();
      }
      return;
    }
    if (country === 'MF') {
      country = 'GP';
    }
    var option = addonOptions.value.find(c => c.c === country);
    if (options$.value.selected.index !== option.index) {
      options$.value.selectOption(option, triggerSelect);
    }
  };

  /**
   * Handles option select.
   *
   * @param {object} option* the option to select (from `addonOptions`).
   * @returns {void}
   * @private
   */
  var handleOptionSelect = option => {
    if (document.activeElement === input.value) {
      context.emit('select', option, el$.value);
      return;
    }
    if (option.n === undefined) {
      el$.value.clear();
    } else if (maskPluginInstalled.value) {
      var valueMatchesMask = value.value ? option.m.map(m => "+".concat(m[0])).find(m => {
        return value.value.startsWith(m);
      }) : false;
      if (!valueMatchesMask) {
        el$.value.update(option.m.length === 1 ? "+".concat(option.m[0][0]) : option.n);
      }
      if (document.activeElement.closest('[data-dropdown-for]')) {
        focus();
        input.value.setSelectionRange(input.value.value.length, input.value.value.length);
      }
    } else {
      el$.value.update(option.n);
    }
    context.emit('select', option, el$.value);
  };

  /**
   * Handles dropdown open event (emits `@open` event).
   *
   * @returns {void}
   */
  var handleOpen = () => {
    context.emit('open', el$);
  };

  /**
   * Handles dropdown close event (emits `@close` event).
   *
   * @returns {void}
   */
  var handleClose = () => {
    context.emit('close', el$);
  };

  // =============== HOOKS ================

  onMounted(() => {
    setFlag();
  });

  // ============== WATCHERS ==============

  watch(value, n => {
    setFlag(false);
  });
  return {
    options$,
    addonOptions,
    handleOptionSelect,
    addonPlaceholder,
    maskPluginInstalled,
    inputType,
    mask,
    handleOpen,
    handleClose
  };
};

var base$9 = function base(props, context, dependencies) {
  var {
    fire,
    el$
  } = dependencies;

  // =============== METHODS ==============

  /**
   * Handles `keydown` event.
   *
   * @param {Event} e* event object
   * @returns {void}
   * @private
   */
  var handleKeydown = e => {
    fire('keydown', e, el$.value);
  };

  /**
   * Handles `keyup` event.
   *
   * @param {Event} e* event object
   * @returns {void}
   * @private
   */
  var handleKeyup = e => {
    fire('keyup', e, el$.value);
  };

  /**
   * Handles `keypress` event.
   *
   * @param {Event} e* event object
   * @returns {void}
   * @private
   */
  var handleKeypress = e => {
    fire('keypress', e, el$.value);
  };
  return {
    handleKeydown,
    handleKeyup,
    handleKeypress
  };
};
var phone = function phone(props, context, dependencies) {
  var {
    fire,
    model,
    input,
    el$
  } = dependencies;

  // =============== METHODS ==============

  /**
   * Handles `keydown` event.
   *
   * @param {Event} e* event object
   * @returns {void}
   * @private
   */
  var handleKeydown = e => {
    if (el$.value.maskPluginInstalled) {
      return;
    }
    if (['Backspace', 'Delete', 'Tab', 'Escape', 'Enter', 'ArrowLeft', 'ArrowRight'].indexOf(e.key) !== -1 || e.ctrlKey || e.metaKey) {
      return;
    }
    if (/[0-9]/.test(e.key) && (!model.value || model.value.length < 16)) {
      return;
    }
    if (e.key === '+' && (!model.value || input.value.selectionStart === 0) && (!model.value || model.value.length < 16)) {
      return;
    }
    e.preventDefault();
  };
  return {
    handleKeydown
  };
};

var PhoneElement = {
  name: 'PhoneElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'select', 'open', 'close', 'blur', 'focus', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'text',
      private: true
    },
    default: {
      required: false,
      type: [String, Number, Object],
      localized: true,
      default: null
    },
    debounce: {
      required: false,
      type: [Number],
      default: null
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    floating: {
      required: false,
      type: [String, Boolean, Object],
      localized: true,
      default: null
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    placeholder: {
      required: false,
      type: [String, Object],
      localized: true,
      default: null
    },
    readonly: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    include: {
      required: false,
      type: [Array],
      default: () => []
    },
    exclude: {
      required: false,
      type: [Array],
      default: () => []
    },
    unmask: {
      require: false,
      type: [Boolean],
      default: false
    },
    allowIncomplete: {
      require: false,
      type: [Boolean],
      default: false
    },
    attrs: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    autocomplete: {
      required: false,
      type: [String, Number],
      default: null
    },
    loading: {
      type: [Boolean],
      required: false,
      default: false
    },
    onBlur: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onSelect: {
      required: false,
      type: [Function],
      default: null,
      private: true
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$R, base$T, base$P, base$_, base$L, base$1i, base$U, base$X, base$G, text$1, base$1a, text$2, base$M, base$Q, base$N, base$F, base$15, base$O, base$13, base$12, base$1g, base$14, base$11, phone$1, base$w, base$b, phone$2, base$K, base$Z, phone, base$x, base$a];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var base$8 = function base(props, context, dependencies) {
  var {
    radioName,
    radioValue
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var update = dependencies.update;
  var nullValue = dependencies.nullValue;
  var fieldId = dependencies.fieldId;
  var path = dependencies.path;
  var form$ = dependencies.form$;

  // ================ DATA ================

  /**
   * The list of listeners.
   *
   * @type {array}
   * @default []
   * @private
   */
  var listeners = ref([]);

  // ============== COMPUTED ==============

  /**
   * The `name` attribute of the element. If [`id`](#option-id) is not provided [`name`](#option-name) will be used.
   *
   * @type {string}
   */
  var inputName = computed(() => {
    //@todo:adam incorrect documentation, id is non-existent in path computed
    return radioName.value || path.value;
  });

  // =============== METHODS ==============

  /**
   * Checks the radio.
   *
   * @returns {void}
   */
  var check = () => {
    update(radioValue.value);
  };

  /**
   * Unchecks the radio.
   *
   * @returns {void}
   */
  var uncheck = () => {
    update(nullValue.value);
  };

  /**
   * Watches radio name change.
   *
   * @returns {void}
   * @private
   */
  var watchChange = (value, old) => {
    //@todo:adam queryselectorall should check for name old and not name value
    if (old) {
      form$.value.$el.querySelectorAll("input[name=\"".concat(old, "\"")).forEach((element, i) => {
        if (listeners.value[i]) {
          element.removeEventListener('change', listeners.value[i]);
        }
      });
    }
    form$.value.$el.querySelectorAll("input[name=\"".concat(value, "\"")).forEach(element => {
      var listener = () => {
        if (element.id != fieldId.value) {
          update(nullValue.value);
        }
      };
      listeners.value.push(listener);
      element.addEventListener('change', listener);
    });
  };

  // =============== HOOKS ================

  onMounted(() => {
    watchChange(inputName.value);
  });

  // ============= WATCHERS ===============

  watch(inputName, watchChange);
  return {
    inputName,
    check,
    uncheck
  };
};

var RadioElement = {
  name: 'RadioElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'radio',
      private: true
    },
    default: {
      required: false,
      type: [String, Number],
      default: null
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    radioName: {
      required: false,
      type: [String],
      default: null
    },
    radioValue: {
      required: false,
      type: [Boolean, String, Number],
      default: 1
    },
    text: {
      required: false,
      type: [String, Object],
      localized: true,
      default: null
    },
    align: {
      required: false,
      type: [String],
      default: undefined
    },
    standalone: {
      required: false,
      type: [Boolean],
      default: false
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$R, base$T, base$_, base$1i, base$U, base$X, base$P, base$H, base$1a, base$I, base$Q, base$F, base$15, base$O, base$13, base$12, base$1g, base$14, base$11, base$8, radio, base$K, base$Z, base$E];
    context.slots = ['default', 'label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var RadiogroupElement = {
  name: 'RadiogroupElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'radiogroup',
      private: true
    },
    default: {
      required: false,
      type: [String, Number, Boolean],
      default: null
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    items: {
      required: false,
      type: [Object, Array, Function, String],
      localized: true,
      default: () => ({})
    },
    disables: {
      required: false,
      type: [Array],
      default: () => []
    },
    clearOnRefetch: {
      type: [Boolean],
      required: false,
      default: true
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$T, base$P, base$_, base$1i, base$U, radiogroup$2, base$H, base$Q, radiogroup, base$1a, base$I, base$F, base$15, base$O, base$13, base$12, base$1g, base$14, base$11, radiogroup$1, base$K, base$Z];
    context.slots = ['radio', 'label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var SelectElement = {
  name: 'SelectElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'select', 'deselect', 'search-change', 'open', 'close', 'clear', 'paste', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'select',
      private: true
    },
    default: {
      required: false,
      type: [String, Number, Object],
      default: null
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    floating: {
      required: false,
      type: [String, Boolean, Object],
      localized: true,
      default: null
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    placeholder: {
      required: false,
      type: [String, Object],
      localized: true,
      default: null
    },
    attrs: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    onSelect: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onDeselect: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onSearchChange: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onOpen: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onClose: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onClear: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onPaste: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    native: {
      required: false,
      type: [Boolean],
      default: true
    },
    items: {
      required: false,
      type: [Object, Array, Function, String],
      localized: true,
      default: () => ({})
    },
    labelProp: {
      type: [String],
      required: false,
      default: 'label'
    },
    valueProp: {
      type: [String],
      required: false,
      default: 'value'
    },
    dataKey: {
      type: [String],
      required: false,
      default: undefined
    },
    searchParam: {
      type: [String],
      required: false,
      default: 'query'
    },
    search: {
      required: false,
      type: [Boolean],
      default: false,
      native: false
    },
    trackBy: {
      type: [String, Array],
      required: false,
      default: undefined,
      native: false
    },
    strict: {
      type: [Boolean],
      required: false,
      default: true,
      native: false
    },
    create: {
      required: false,
      type: [Boolean],
      default: false,
      native: false
    },
    appendNewOption: {
      type: [Boolean],
      required: false,
      default: true,
      native: false
    },
    addOptionOn: {
      type: [Array],
      required: false,
      default: () => ['enter'],
      native: false
    },
    allowAbsent: {
      type: [Boolean],
      required: false,
      default: false,
      native: false
    },
    object: {
      type: [Boolean],
      required: false,
      default: false,
      native: false
    },
    limit: {
      type: [Number],
      required: false,
      default: -1,
      native: false
    },
    groups: {
      type: [Boolean],
      required: false,
      default: false,
      native: false
    },
    groupLabel: {
      type: [String],
      required: false,
      default: 'label',
      native: false
    },
    groupOptions: {
      type: [String],
      required: false,
      default: 'items',
      native: false
    },
    groupHideEmpty: {
      type: [Boolean],
      required: false,
      default: false,
      native: false
    },
    openDirection: {
      type: [String],
      required: false,
      default: 'bottom',
      native: false
    },
    appendToBody: {
      type: [Boolean],
      required: false,
      default: false,
      native: false
    },
    appendTo: {
      type: [String],
      required: false,
      default: undefined,
      native: false
    },
    canDeselect: {
      type: [Boolean],
      required: false,
      default: true,
      native: false
    },
    canClear: {
      type: [Boolean],
      required: false,
      default: true,
      native: false
    },
    closeOnSelect: {
      type: [Boolean],
      required: false,
      default: true,
      native: false
    },
    closeOnDeselect: {
      type: [Boolean],
      required: false,
      default: false,
      native: false
    },
    clearOnRefetch: {
      type: [Boolean],
      required: false,
      default: false
    },
    delay: {
      type: [Number],
      required: false,
      default: -1,
      native: false
    },
    minChars: {
      type: [Number],
      required: false,
      default: 0,
      native: false
    },
    resolveOnLoad: {
      type: [Boolean],
      required: false,
      default: true,
      native: false
    },
    filterResults: {
      type: [Boolean],
      required: false,
      default: true,
      native: false
    },
    clearOnSearch: {
      type: [Boolean],
      required: false,
      default: false,
      native: false
    },
    caret: {
      type: [Boolean],
      required: false,
      default: true,
      native: false
    },
    truncate: {
      type: [Boolean],
      required: false,
      default: true,
      native: false
    },
    loading: {
      type: [Boolean],
      required: false,
      default: false,
      native: false
    },
    noOptionsText: {
      type: [String, Object],
      required: false,
      default: undefined,
      '@default': 'locale.multiselect.noOptions',
      localized: true,
      native: false
    },
    noResultsText: {
      type: [String, Object],
      required: false,
      default: undefined,
      '@default': 'locale.multiselect.noResults',
      localized: true,
      native: false
    },
    autocomplete: {
      type: [String],
      required: false,
      native: false
    },
    inputType: {
      type: [String],
      required: false,
      default: 'text',
      native: false
    },
    extendOptions: {
      required: false,
      type: [Object],
      default: () => ({})
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, select$4, base$T, base$P, base$_, base$L, base$1i, base$U, base$X, base$H, base$I, base$M, select$1, base$Q, select$2, base$1a, base$N, select$3, base$15, base$O, base$13, base$12, base$1g, base$14, base$11, base$d, select, base$W, base$K, base$Z, base$x];
    context.slots = ['option', 'single-label', 'placeholder', 'group-label', 'before-list', 'after-list', 'no-results', 'no-options', 'caret', 'spinner', 'clear', 'label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

/*!
 * Signature Pad v5.0.7 | https://github.com/szimek/signature_pad
 * (c) 2025 Szymon Nowak | Released under the MIT license
 */

class Point {
    constructor(x, y, pressure, time) {
        if (isNaN(x) || isNaN(y)) {
            throw new Error(`Point is invalid: (${x}, ${y})`);
        }
        this.x = +x;
        this.y = +y;
        this.pressure = pressure || 0;
        this.time = time || Date.now();
    }
    distanceTo(start) {
        return Math.sqrt(Math.pow(this.x - start.x, 2) + Math.pow(this.y - start.y, 2));
    }
    equals(other) {
        return (this.x === other.x &&
            this.y === other.y &&
            this.pressure === other.pressure &&
            this.time === other.time);
    }
    velocityFrom(start) {
        return this.time !== start.time
            ? this.distanceTo(start) / (this.time - start.time)
            : 0;
    }
}

class Bezier {
    static fromPoints(points, widths) {
        const c2 = this.calculateControlPoints(points[0], points[1], points[2]).c2;
        const c3 = this.calculateControlPoints(points[1], points[2], points[3]).c1;
        return new Bezier(points[1], c2, c3, points[2], widths.start, widths.end);
    }
    static calculateControlPoints(s1, s2, s3) {
        const dx1 = s1.x - s2.x;
        const dy1 = s1.y - s2.y;
        const dx2 = s2.x - s3.x;
        const dy2 = s2.y - s3.y;
        const m1 = { x: (s1.x + s2.x) / 2.0, y: (s1.y + s2.y) / 2.0 };
        const m2 = { x: (s2.x + s3.x) / 2.0, y: (s2.y + s3.y) / 2.0 };
        const l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
        const l2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);
        const dxm = m1.x - m2.x;
        const dym = m1.y - m2.y;
        const k = l1 + l2 == 0 ? 0 : l2 / (l1 + l2);
        const cm = { x: m2.x + dxm * k, y: m2.y + dym * k };
        const tx = s2.x - cm.x;
        const ty = s2.y - cm.y;
        return {
            c1: new Point(m1.x + tx, m1.y + ty),
            c2: new Point(m2.x + tx, m2.y + ty),
        };
    }
    constructor(startPoint, control2, control1, endPoint, startWidth, endWidth) {
        this.startPoint = startPoint;
        this.control2 = control2;
        this.control1 = control1;
        this.endPoint = endPoint;
        this.startWidth = startWidth;
        this.endWidth = endWidth;
    }
    length() {
        const steps = 10;
        let length = 0;
        let px;
        let py;
        for (let i = 0; i <= steps; i += 1) {
            const t = i / steps;
            const cx = this.point(t, this.startPoint.x, this.control1.x, this.control2.x, this.endPoint.x);
            const cy = this.point(t, this.startPoint.y, this.control1.y, this.control2.y, this.endPoint.y);
            if (i > 0) {
                const xdiff = cx - px;
                const ydiff = cy - py;
                length += Math.sqrt(xdiff * xdiff + ydiff * ydiff);
            }
            px = cx;
            py = cy;
        }
        return length;
    }
    point(t, start, c1, c2, end) {
        return (start * (1.0 - t) * (1.0 - t) * (1.0 - t))
            + (3.0 * c1 * (1.0 - t) * (1.0 - t) * t)
            + (3.0 * c2 * (1.0 - t) * t * t)
            + (end * t * t * t);
    }
}

class SignatureEventTarget {
    constructor() {
        try {
            this._et = new EventTarget();
        }
        catch (_a) {
            this._et = document;
        }
    }
    addEventListener(type, listener, options) {
        this._et.addEventListener(type, listener, options);
    }
    dispatchEvent(event) {
        return this._et.dispatchEvent(event);
    }
    removeEventListener(type, callback, options) {
        this._et.removeEventListener(type, callback, options);
    }
}

function throttle(fn, wait = 250) {
    let previous = 0;
    let timeout = null;
    let result;
    let storedContext;
    let storedArgs;
    const later = () => {
        previous = Date.now();
        timeout = null;
        result = fn.apply(storedContext, storedArgs);
        if (!timeout) {
            storedContext = null;
            storedArgs = [];
        }
    };
    return function wrapper(...args) {
        const now = Date.now();
        const remaining = wait - (now - previous);
        storedContext = this;
        storedArgs = args;
        if (remaining <= 0 || remaining > wait) {
            if (timeout) {
                clearTimeout(timeout);
                timeout = null;
            }
            previous = now;
            result = fn.apply(storedContext, storedArgs);
            if (!timeout) {
                storedContext = null;
                storedArgs = [];
            }
        }
        else if (!timeout) {
            timeout = window.setTimeout(later, remaining);
        }
        return result;
    };
}

class SignaturePad extends SignatureEventTarget {
    constructor(canvas, options = {}) {
        var _a, _b, _c;
        super();
        this.canvas = canvas;
        this._drawingStroke = false;
        this._isEmpty = true;
        this._lastPoints = [];
        this._data = [];
        this._lastVelocity = 0;
        this._lastWidth = 0;
        this._handleMouseDown = (event) => {
            if (!this._isLeftButtonPressed(event, true) || this._drawingStroke) {
                return;
            }
            this._strokeBegin(this._pointerEventToSignatureEvent(event));
        };
        this._handleMouseMove = (event) => {
            if (!this._isLeftButtonPressed(event, true) || !this._drawingStroke) {
                this._strokeEnd(this._pointerEventToSignatureEvent(event), false);
                return;
            }
            this._strokeMoveUpdate(this._pointerEventToSignatureEvent(event));
        };
        this._handleMouseUp = (event) => {
            if (this._isLeftButtonPressed(event)) {
                return;
            }
            this._strokeEnd(this._pointerEventToSignatureEvent(event));
        };
        this._handleTouchStart = (event) => {
            if (event.targetTouches.length !== 1 || this._drawingStroke) {
                return;
            }
            if (event.cancelable) {
                event.preventDefault();
            }
            this._strokeBegin(this._touchEventToSignatureEvent(event));
        };
        this._handleTouchMove = (event) => {
            if (event.targetTouches.length !== 1) {
                return;
            }
            if (event.cancelable) {
                event.preventDefault();
            }
            if (!this._drawingStroke) {
                this._strokeEnd(this._touchEventToSignatureEvent(event), false);
                return;
            }
            this._strokeMoveUpdate(this._touchEventToSignatureEvent(event));
        };
        this._handleTouchEnd = (event) => {
            if (event.targetTouches.length !== 0) {
                return;
            }
            if (event.cancelable) {
                event.preventDefault();
            }
            this.canvas.removeEventListener('touchmove', this._handleTouchMove);
            this._strokeEnd(this._touchEventToSignatureEvent(event));
        };
        this._handlePointerDown = (event) => {
            if (!event.isPrimary || !this._isLeftButtonPressed(event) || this._drawingStroke) {
                return;
            }
            event.preventDefault();
            this._strokeBegin(this._pointerEventToSignatureEvent(event));
        };
        this._handlePointerMove = (event) => {
            if (!event.isPrimary) {
                return;
            }
            if (!this._isLeftButtonPressed(event, true) || !this._drawingStroke) {
                this._strokeEnd(this._pointerEventToSignatureEvent(event), false);
                return;
            }
            event.preventDefault();
            this._strokeMoveUpdate(this._pointerEventToSignatureEvent(event));
        };
        this._handlePointerUp = (event) => {
            if (!event.isPrimary || this._isLeftButtonPressed(event)) {
                return;
            }
            event.preventDefault();
            this._strokeEnd(this._pointerEventToSignatureEvent(event));
        };
        this.velocityFilterWeight = options.velocityFilterWeight || 0.7;
        this.minWidth = options.minWidth || 0.5;
        this.maxWidth = options.maxWidth || 2.5;
        this.throttle = (_a = options.throttle) !== null && _a !== void 0 ? _a : 16;
        this.minDistance = (_b = options.minDistance) !== null && _b !== void 0 ? _b : 5;
        this.dotSize = options.dotSize || 0;
        this.penColor = options.penColor || 'black';
        this.backgroundColor = options.backgroundColor || 'rgba(0,0,0,0)';
        this.compositeOperation = options.compositeOperation || 'source-over';
        this.canvasContextOptions = (_c = options.canvasContextOptions) !== null && _c !== void 0 ? _c : {};
        this._strokeMoveUpdate = this.throttle
            ? throttle(SignaturePad.prototype._strokeUpdate, this.throttle)
            : SignaturePad.prototype._strokeUpdate;
        this._ctx = canvas.getContext('2d', this.canvasContextOptions);
        this.clear();
        this.on();
    }
    clear() {
        const { _ctx: ctx, canvas } = this;
        ctx.fillStyle = this.backgroundColor;
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        this._data = [];
        this._reset(this._getPointGroupOptions());
        this._isEmpty = true;
    }
    fromDataURL(dataUrl, options = {}) {
        return new Promise((resolve, reject) => {
            const image = new Image();
            const ratio = options.ratio || window.devicePixelRatio || 1;
            const width = options.width || this.canvas.width / ratio;
            const height = options.height || this.canvas.height / ratio;
            const xOffset = options.xOffset || 0;
            const yOffset = options.yOffset || 0;
            this._reset(this._getPointGroupOptions());
            image.onload = () => {
                this._ctx.drawImage(image, xOffset, yOffset, width, height);
                resolve();
            };
            image.onerror = (error) => {
                reject(error);
            };
            image.crossOrigin = 'anonymous';
            image.src = dataUrl;
            this._isEmpty = false;
        });
    }
    toDataURL(type = 'image/png', encoderOptions) {
        switch (type) {
            case 'image/svg+xml':
                if (typeof encoderOptions !== 'object') {
                    encoderOptions = undefined;
                }
                return `data:image/svg+xml;base64,${btoa(this.toSVG(encoderOptions))}`;
            default:
                if (typeof encoderOptions !== 'number') {
                    encoderOptions = undefined;
                }
                return this.canvas.toDataURL(type, encoderOptions);
        }
    }
    on() {
        this.canvas.style.touchAction = 'none';
        this.canvas.style.msTouchAction = 'none';
        this.canvas.style.userSelect = 'none';
        const isIOS = /Macintosh/.test(navigator.userAgent) && 'ontouchstart' in document;
        if (window.PointerEvent && !isIOS) {
            this._handlePointerEvents();
        }
        else {
            this._handleMouseEvents();
            if ('ontouchstart' in window) {
                this._handleTouchEvents();
            }
        }
    }
    off() {
        this.canvas.style.touchAction = 'auto';
        this.canvas.style.msTouchAction = 'auto';
        this.canvas.style.userSelect = 'auto';
        this.canvas.removeEventListener('pointerdown', this._handlePointerDown);
        this.canvas.removeEventListener('mousedown', this._handleMouseDown);
        this.canvas.removeEventListener('touchstart', this._handleTouchStart);
        this._removeMoveUpEventListeners();
    }
    _getListenerFunctions() {
        var _a;
        const canvasWindow = window.document === this.canvas.ownerDocument
            ? window
            : (_a = this.canvas.ownerDocument.defaultView) !== null && _a !== void 0 ? _a : this.canvas.ownerDocument;
        return {
            addEventListener: canvasWindow.addEventListener.bind(canvasWindow),
            removeEventListener: canvasWindow.removeEventListener.bind(canvasWindow),
        };
    }
    _removeMoveUpEventListeners() {
        const { removeEventListener } = this._getListenerFunctions();
        removeEventListener('pointermove', this._handlePointerMove);
        removeEventListener('pointerup', this._handlePointerUp);
        removeEventListener('mousemove', this._handleMouseMove);
        removeEventListener('mouseup', this._handleMouseUp);
        removeEventListener('touchmove', this._handleTouchMove);
        removeEventListener('touchend', this._handleTouchEnd);
    }
    isEmpty() {
        return this._isEmpty;
    }
    fromData(pointGroups, { clear = true } = {}) {
        if (clear) {
            this.clear();
        }
        this._fromData(pointGroups, this._drawCurve.bind(this), this._drawDot.bind(this));
        this._data = this._data.concat(pointGroups);
    }
    toData() {
        return this._data;
    }
    _isLeftButtonPressed(event, only) {
        if (only) {
            return event.buttons === 1;
        }
        return (event.buttons & 1) === 1;
    }
    _pointerEventToSignatureEvent(event) {
        return {
            event: event,
            type: event.type,
            x: event.clientX,
            y: event.clientY,
            pressure: 'pressure' in event ? event.pressure : 0,
        };
    }
    _touchEventToSignatureEvent(event) {
        const touch = event.changedTouches[0];
        return {
            event: event,
            type: event.type,
            x: touch.clientX,
            y: touch.clientY,
            pressure: touch.force,
        };
    }
    _getPointGroupOptions(group) {
        return {
            penColor: group && 'penColor' in group ? group.penColor : this.penColor,
            dotSize: group && 'dotSize' in group ? group.dotSize : this.dotSize,
            minWidth: group && 'minWidth' in group ? group.minWidth : this.minWidth,
            maxWidth: group && 'maxWidth' in group ? group.maxWidth : this.maxWidth,
            velocityFilterWeight: group && 'velocityFilterWeight' in group
                ? group.velocityFilterWeight
                : this.velocityFilterWeight,
            compositeOperation: group && 'compositeOperation' in group
                ? group.compositeOperation
                : this.compositeOperation,
        };
    }
    _strokeBegin(event) {
        const cancelled = !this.dispatchEvent(new CustomEvent('beginStroke', { detail: event, cancelable: true }));
        if (cancelled) {
            return;
        }
        const { addEventListener } = this._getListenerFunctions();
        switch (event.event.type) {
            case 'mousedown':
                addEventListener('mousemove', this._handleMouseMove);
                addEventListener('mouseup', this._handleMouseUp);
                break;
            case 'touchstart':
                addEventListener('touchmove', this._handleTouchMove);
                addEventListener('touchend', this._handleTouchEnd);
                break;
            case 'pointerdown':
                addEventListener('pointermove', this._handlePointerMove);
                addEventListener('pointerup', this._handlePointerUp);
                break;
        }
        this._drawingStroke = true;
        const pointGroupOptions = this._getPointGroupOptions();
        const newPointGroup = Object.assign(Object.assign({}, pointGroupOptions), { points: [] });
        this._data.push(newPointGroup);
        this._reset(pointGroupOptions);
        this._strokeUpdate(event);
    }
    _strokeUpdate(event) {
        if (!this._drawingStroke) {
            return;
        }
        if (this._data.length === 0) {
            this._strokeBegin(event);
            return;
        }
        this.dispatchEvent(new CustomEvent('beforeUpdateStroke', { detail: event }));
        const point = this._createPoint(event.x, event.y, event.pressure);
        const lastPointGroup = this._data[this._data.length - 1];
        const lastPoints = lastPointGroup.points;
        const lastPoint = lastPoints.length > 0 && lastPoints[lastPoints.length - 1];
        const isLastPointTooClose = lastPoint
            ? point.distanceTo(lastPoint) <= this.minDistance
            : false;
        const pointGroupOptions = this._getPointGroupOptions(lastPointGroup);
        if (!lastPoint || !(lastPoint && isLastPointTooClose)) {
            const curve = this._addPoint(point, pointGroupOptions);
            if (!lastPoint) {
                this._drawDot(point, pointGroupOptions);
            }
            else if (curve) {
                this._drawCurve(curve, pointGroupOptions);
            }
            lastPoints.push({
                time: point.time,
                x: point.x,
                y: point.y,
                pressure: point.pressure,
            });
        }
        this.dispatchEvent(new CustomEvent('afterUpdateStroke', { detail: event }));
    }
    _strokeEnd(event, shouldUpdate = true) {
        this._removeMoveUpEventListeners();
        if (!this._drawingStroke) {
            return;
        }
        if (shouldUpdate) {
            this._strokeUpdate(event);
        }
        this._drawingStroke = false;
        this.dispatchEvent(new CustomEvent('endStroke', { detail: event }));
    }
    _handlePointerEvents() {
        this._drawingStroke = false;
        this.canvas.addEventListener('pointerdown', this._handlePointerDown);
    }
    _handleMouseEvents() {
        this._drawingStroke = false;
        this.canvas.addEventListener('mousedown', this._handleMouseDown);
    }
    _handleTouchEvents() {
        this.canvas.addEventListener('touchstart', this._handleTouchStart);
    }
    _reset(options) {
        this._lastPoints = [];
        this._lastVelocity = 0;
        this._lastWidth = (options.minWidth + options.maxWidth) / 2;
        this._ctx.fillStyle = options.penColor;
        this._ctx.globalCompositeOperation = options.compositeOperation;
    }
    _createPoint(x, y, pressure) {
        const rect = this.canvas.getBoundingClientRect();
        return new Point(x - rect.left, y - rect.top, pressure, new Date().getTime());
    }
    _addPoint(point, options) {
        const { _lastPoints } = this;
        _lastPoints.push(point);
        if (_lastPoints.length > 2) {
            if (_lastPoints.length === 3) {
                _lastPoints.unshift(_lastPoints[0]);
            }
            const widths = this._calculateCurveWidths(_lastPoints[1], _lastPoints[2], options);
            const curve = Bezier.fromPoints(_lastPoints, widths);
            _lastPoints.shift();
            return curve;
        }
        return null;
    }
    _calculateCurveWidths(startPoint, endPoint, options) {
        const velocity = options.velocityFilterWeight * endPoint.velocityFrom(startPoint) +
            (1 - options.velocityFilterWeight) * this._lastVelocity;
        const newWidth = this._strokeWidth(velocity, options);
        const widths = {
            end: newWidth,
            start: this._lastWidth,
        };
        this._lastVelocity = velocity;
        this._lastWidth = newWidth;
        return widths;
    }
    _strokeWidth(velocity, options) {
        return Math.max(options.maxWidth / (velocity + 1), options.minWidth);
    }
    _drawCurveSegment(x, y, width) {
        const ctx = this._ctx;
        ctx.moveTo(x, y);
        ctx.arc(x, y, width, 0, 2 * Math.PI, false);
        this._isEmpty = false;
    }
    _drawCurve(curve, options) {
        const ctx = this._ctx;
        const widthDelta = curve.endWidth - curve.startWidth;
        const drawSteps = Math.ceil(curve.length()) * 2;
        ctx.beginPath();
        ctx.fillStyle = options.penColor;
        for (let i = 0; i < drawSteps; i += 1) {
            const t = i / drawSteps;
            const tt = t * t;
            const ttt = tt * t;
            const u = 1 - t;
            const uu = u * u;
            const uuu = uu * u;
            let x = uuu * curve.startPoint.x;
            x += 3 * uu * t * curve.control1.x;
            x += 3 * u * tt * curve.control2.x;
            x += ttt * curve.endPoint.x;
            let y = uuu * curve.startPoint.y;
            y += 3 * uu * t * curve.control1.y;
            y += 3 * u * tt * curve.control2.y;
            y += ttt * curve.endPoint.y;
            const width = Math.min(curve.startWidth + ttt * widthDelta, options.maxWidth);
            this._drawCurveSegment(x, y, width);
        }
        ctx.closePath();
        ctx.fill();
    }
    _drawDot(point, options) {
        const ctx = this._ctx;
        const width = options.dotSize > 0
            ? options.dotSize
            : (options.minWidth + options.maxWidth) / 2;
        ctx.beginPath();
        this._drawCurveSegment(point.x, point.y, width);
        ctx.closePath();
        ctx.fillStyle = options.penColor;
        ctx.fill();
    }
    _fromData(pointGroups, drawCurve, drawDot) {
        for (const group of pointGroups) {
            const { points } = group;
            const pointGroupOptions = this._getPointGroupOptions(group);
            if (points.length > 1) {
                for (let j = 0; j < points.length; j += 1) {
                    const basicPoint = points[j];
                    const point = new Point(basicPoint.x, basicPoint.y, basicPoint.pressure, basicPoint.time);
                    if (j === 0) {
                        this._reset(pointGroupOptions);
                    }
                    const curve = this._addPoint(point, pointGroupOptions);
                    if (curve) {
                        drawCurve(curve, pointGroupOptions);
                    }
                }
            }
            else {
                this._reset(pointGroupOptions);
                drawDot(points[0], pointGroupOptions);
            }
        }
    }
    toSVG({ includeBackgroundColor = false } = {}) {
        const pointGroups = this._data;
        const ratio = Math.max(window.devicePixelRatio || 1, 1);
        const minX = 0;
        const minY = 0;
        const maxX = this.canvas.width / ratio;
        const maxY = this.canvas.height / ratio;
        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
        svg.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink');
        svg.setAttribute('viewBox', `${minX} ${minY} ${maxX} ${maxY}`);
        svg.setAttribute('width', maxX.toString());
        svg.setAttribute('height', maxY.toString());
        if (includeBackgroundColor && this.backgroundColor) {
            const rect = document.createElement('rect');
            rect.setAttribute('width', '100%');
            rect.setAttribute('height', '100%');
            rect.setAttribute('fill', this.backgroundColor);
            svg.appendChild(rect);
        }
        this._fromData(pointGroups, (curve, { penColor }) => {
            const path = document.createElement('path');
            if (!isNaN(curve.control1.x) &&
                !isNaN(curve.control1.y) &&
                !isNaN(curve.control2.x) &&
                !isNaN(curve.control2.y)) {
                const attr = `M ${curve.startPoint.x.toFixed(3)},${curve.startPoint.y.toFixed(3)} ` +
                    `C ${curve.control1.x.toFixed(3)},${curve.control1.y.toFixed(3)} ` +
                    `${curve.control2.x.toFixed(3)},${curve.control2.y.toFixed(3)} ` +
                    `${curve.endPoint.x.toFixed(3)},${curve.endPoint.y.toFixed(3)}`;
                path.setAttribute('d', attr);
                path.setAttribute('stroke-width', (curve.endWidth * 2.25).toFixed(3));
                path.setAttribute('stroke', penColor);
                path.setAttribute('fill', 'none');
                path.setAttribute('stroke-linecap', 'round');
                svg.appendChild(path);
            }
        }, (point, { penColor, dotSize, minWidth, maxWidth }) => {
            const circle = document.createElement('circle');
            const size = dotSize > 0 ? dotSize : (minWidth + maxWidth) / 2;
            circle.setAttribute('r', size.toString());
            circle.setAttribute('cx', point.x.toString());
            circle.setAttribute('cy', point.y.toString());
            circle.setAttribute('fill', penColor);
            svg.appendChild(circle);
        });
        return svg.outerHTML;
    }
}

function debounce(func, wait, onStart) {
  var timeout;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (!timeout) {
      if (typeof onStart === 'function') {
        onStart();
      }
    } else {
      clearTimeout(timeout);
    }
    timeout = setTimeout(() => {
      timeout = null;
      func.apply(this, args);
    }, wait);
  };
}

function useSignature (props, context, dependencies) {
  var {
    fonts,
    colors,
    modes,
    accept,
    maxWidth,
    height,
    readonly,
    maxFontSize,
    minFontSize,
    canClear,
    line,
    placeholder,
    autoload,
    maxSize,
    canUndo,
    columns,
    uploadWidth,
    uploadHeight,
    canDrop
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var {
    el$,
    form$,
    input,
    isDisabled,
    value,
    Placeholder,
    available,
    path
  } = dependencies;

  // ================ DATA ================

  /**
   * The signature mode selector.
   *
   * @type {ElementAddonOptions}
   */
  var mode$ = ref(null);

  /**
   * The font style selector.
   *
   * @type {ElementAddonOptions}
   */
  var font$ = ref(null);

  /**
   * The input field when [`mode`](#property-mode) is `type`.
   *
   * @type {HTMLInputElement}
   */
  var input$ = ref(null);

  /**
   * The canvas that shows the preview of an uploaded signature when [`mode`](#property-mode) is `upload`.
   *
   * @type {HTMLCanvasElement}
   */
  var preview$ = ref(null);

  /**
   * The canvas that allows drawning signature when [`mode`](#property-mode) is `draw`.
   *
   * @type {HTMLCanvasElement}
   */
  var pad$ = ref(null);

  /**
   * The file input field when [`mode`](#property-mode) is `upload` (it's invisible).
   *
   * @type {HTMLInputElement}
   */
  var file$ = ref(null);

  /**
   * The DOM that contains upload related parts.
   *
   * @type {HTMLElement}
   */
  var upload$ = ref(null);

  /**
   * The upload button.
   *
   * @type {HTMLElement}
   */
  var uploadButton$ = ref(null);

  /**
   * The current signature mode (`draw`, `type` or `upload`).
   *
   * @type {string}
   */
  var mode = ref(null);

  /**
   * The current font family.
   *
   * @type {string}
   */
  var fontFamily = ref(null);

  /**
   * The current font weight.
   *
   * @type {string}
   */
  var fontWeight = ref(null);

  /**
   * The current font size.
   *
   * @type {number}
   */
  var fontSize = ref(maxFontSize.value);

  /**
   * The hex code of the current signature color.
   *
   * @type {string}
   */
  var color = ref(null);

  /**
   * The input value used when [`mode`](#property-mode) is `type`.
   *
   * @type {string}
   */
  var text = ref(null);

  /**
   * The [Signature Pad](https://github.com/szimek/signature_pad) instance.
   *
   * @type {object}
   */
  var pad = ref(null);

  /**
   * The file (image) selected by the user when [`mode`](#property-mode) is `upload`.
   *
   * @type {File}
   */
  var image = ref(null);

  /**
   * Whether the image preview is already created when [`mode`](#property-mode) is `upload`.
   *
   * @type {boolean}
   */
  var created = ref(false);

  /**
   * Whether the image preview is being created when [`mode`](#property-mode) is `upload`.
   *
   * @type {boolean}
   */
  var creating = ref(false);

  /**
   * Whether a file is being dragged over the element when [`mode`](#property-mode) is `upload`.
   *
   * @type {boolean}
   */
  var dragging = ref(false);

  /**
   * Whether the canvas contains any drawn signature when [`mode`](#property-mode) is `draw`.
   *
   * @type {boolean}
   */
  var drawn = ref(false);

  /**
   * Whether a signature is currently being drawn when [`mode`](#property-mode) is `draw`.
   *
   * @type {boolean}
   */
  var drawing = ref(false);

  /**
   * The list of available redos.
   *
   * @type {array}
   */
  var redos = ref([]);

  /**
   * The number available undos.
   *
   * @type {number}
   */
  var undosLeft = ref(0);

  /**
   * The current width of the signature element.
   *
   * @type {number}
   */
  var width = ref(0);

  /**
   * The last width of the element.
   *
   * @type {number}
   */
  var lastWidth = ref(0);

  /**
   * Whether the mouse is over after starting to draw a signature.
   * 
   * @type {boolean}
   */
  var isMouseOver = ref(false);

  /**
   * Whether the mouse is over after starting to draw a signature.
   * 
   * @type {number}
   */
  var debouncer = ref(0);

  // ============== COMPUTED ==============

  /**
   * The available font families.
   *
   * @type {array}
   */
  var fontFamilies = computed(() => {
    return fonts.value.map(f => f.split('@')[0].replace('!', ''));
  });

  /**
   * The available font weights.
   *
   * @type {array}
   */
  var fontWeights = computed(() => {
    return fonts.value.map(f => f.split('@')[1] || 400);
  });

  /**
   * Whether a signature (as URL) was loaded to the element.
   *
   * @type {boolean}
   */
  var uploaded = computed(() => {
    return typeof value.value === 'string';
  });

  /**
   * Whether the uploaded file is being processed for preview.
   *
   * @type {boolean}
   */
  var processing = computed(() => {
    return image.value && !created.value;
  });

  /**
   * Whether `drop` is enabled and browser supports dragging.
   *
   * @type {boolean}
   */
  var droppable = computed(() => {
    var div = document.createElement('div');
    return ('draggable' in div || 'ondragstart' in div && 'ondrop' in div) && 'FormData' in window && 'FileReader' in window && canDrop.value;
  });

  /**
   * The list of [`modes`](#option-modes) formatted for mode selector.
   *
   * @type {array}
   */
  var resolvedModes = computed(() => {
    return modes.value.filter(m => ['type', 'draw', 'upload'].indexOf(m) !== -1).map((mode, i) => {
      return {
        label: form$.value.translations.vueform.elements.signature[mode],
        value: mode,
        index: i
      };
    });
  });

  /**
   * The list of [`fonts`](#option-fonts) formatted for fonts selector.
   *
   * @type {array}
   */
  var resolvedFonts = computed(() => {
    return fontFamilies.value.map((font, i) => {
      var _text$value;
      return {
        label: "<div><span style=\"font-family: ".concat(font, "; font-weight: ").concat(fontWeights.value[i], "\" aria-hidden=\"true\">").concat(((_text$value = text.value) === null || _text$value === void 0 ? void 0 : _text$value.trim()) || form$.value.translations.vueform.elements.signature.fontPlaceholder, "</span><span style=\"position: absolute; left: -9999px; opacity: 0;\">").concat(font, "</span></div>"),
        value: i,
        index: i
      };
    });
  });

  /**
   * The list of MIME types formatted for the file input attribute.
   *
   * @type {string}
   */
  var fileAccept = computed(() => {
    return accept.value.reduce((prev, curr) => {
      switch (curr) {
        case 'jpg':
        case 'jpeg':
          prev.push('image/jpeg');
          break;
        case 'png':
          prev.push('image/png');
          break;
        case 'svg':
          prev.push('image/svg+xml');
          break;
      }
      return prev;
    }, []).join(', ');
  });

  /**
   * Whether the signature line should be shown.
   *
   * @type {boolean}
   */
  var showLine = computed(() => {
    return mode.value !== 'upload' && line.value;
  });

  /**
   * Whether the signature text input should be shown.
   *
   * @type {boolean}
   */
  var showInput = computed(() => {
    return !uploaded.value && mode.value === 'type';
  });

  /**
   * Whether the signature placeholder should be shown.
   *
   * @type {boolean}
   */
  var showPlaceholder = computed(() => {
    return (!text.value && mode.value === 'type' || !drawn.value && mode.value === 'draw') && placeholder.value !== false;
  });

  /**
   * Whether the upload container should be shown.
   *
   * @type {boolean}
   */
  var showUploadContainer = computed(() => {
    return mode.value === 'upload';
  });

  /**
   * Whether the file upload controllers should be shown.
   *
   * @type {boolean}
   */
  var showUpload = computed(() => {
    return mode.value === 'upload' && !created.value;
  });

  /**
   * Whether file upload preview should be shown.
   *
   * @type {boolean}
   */
  var showPreview = computed(() => {
    return mode.value === 'upload' && created.value;
  });

  /**
   * Whether signature draw pad should be shown.
   *
   * @type {boolean}
   */
  var showPad = computed(() => {
    return mode.value === 'draw';
  });

  /**
   * Whether undo and redo buttons should be shown.
   *
   * @type {boolean}
   */
  var showUndos = computed(() => {
    return mode.value === 'draw' && (redos.value.length || drawn.value) && !drawing.value && canUndo.value;
  });

  /**
   * Whether color selector should be shown.
   *
   * @type {boolean}
   */
  var showColors = computed(() => {
    return (mode.value === 'upload' && created.value || mode.value === 'type' || mode.value === 'draw') && !drawing.value && colors.value.length > 1 && !isMouseOver.value;
  });

  /**
   * Whether mode selector should be shown.
   *
   * @type {boolean}
   */
  var showModes = computed(() => {
    return !drawing.value && modes.value.length > 1;
  });

  /**
   * Whether font selector should be shown.
   *
   * @type {boolean}
   */
  var showFonts = computed(() => {
    return mode.value === 'type' && resolvedFonts.value.length > 1;
  });

  /**
   * Whether clear button should be shown.
   *
   * @type {boolean}
   */
  var showClear = computed(() => {
    return (mode.value === 'type' && text.value || mode.value === 'upload' && created.value || mode.value === 'draw' && drawn.value || uploaded.value) && !isDisabled.value && !readonly.value && !drawing.value && canClear.value;
  });

  /**
   * The tabindex of focusable DOM parts.
   * 
   * @type {number|undefined}
   */
  var tabindex = computed(() => {
    return isDisabled.value || readonly.value ? undefined : 0;
  });

  /**
   * The text of the placeholder.
   *
   * @type {string}
   */
  var placeholderText = computed(() => {
    return form$.value.$vueform.sanitize(Placeholder.value || form$.value.translations.vueform.elements.signature.placeholder);
  });

  /**
   * The text of the drag and drop area.
   *
   * @type {string}
   */
  var dndText = computed(() => {
    return 'Drop an image here or';
  });

  /**
   * The text of the upload button.
   *
   * @type {string}
   */
  var uploadButtonText = computed(() => {
    return 'Select image';
  });

  /**
   * The text of the img alt attribute.
   *
   * @type {string}
   */
  var imgAltText = computed(() => {
    return form$.value.translations.vueform.elements.signature.imgAlt;
  });

  /**
   * The text of the img title attribute.
   *
   * @type {string}
   */
  var imgTitleText = computed(() => {
    return form$.value.translations.vueform.elements.signature.imgTitle;
  });

  /**
   * The current text of font selector options.
   *
   * @type {string}
   */
  var fontText = computed(() => {
    return form$.value.translations.vueform.elements.signature.font;
  });

  /**
   * The undo button's title.
   *
   * @type {string}
   */
  var undoText = computed(() => {
    return form$.value.translations.vueform.elements.signature.undo;
  });

  /**
   * The redo button's title.
   *
   * @type {string}
   */
  var redoText = computed(() => {
    return form$.value.translations.vueform.elements.signature.redo;
  });

  /**
   * The aria attributes of the mode selector.
   *
   * @type {object}
   */
  var modeSelectorAria = computed(() => {
    return {
      'aria-label': form$.value.translations.vueform.elements.signature.modeSelectorAriaLabel
    };
  });

  /**
   * The aria attributes of the font selector.
   *
   * @type {object}
   */
  var fontSelectorAria = computed(() => {
    return {
      'aria-label': form$.value.translations.vueform.elements.signature.fontSelectorAriaLabel
    };
  });

  /**
   * The aria label of the signature wrapper.
   *
   * @type {string}
   */
  var wrapperAriaLabel = computed(() => {
    return form$.value.translations.vueform.elements.signature.wrapperAriaLabel;
  });

  /**
   * The aria label of the text input field.
   *
   * @type {string}
   */
  var inputAriaLabel = computed(() => {
    return form$.value.translations.vueform.elements.signature.inputAriaLabel;
  });

  /**
   * The aria label of the signature pad.
   *
   * @type {string}
   */
  var padAriaLabel = computed(() => {
    return form$.value.translations.vueform.elements.signature.padAriaLabel;
  });

  /**
   * The aria label of the clear button.
   *
   * @type {string}
   */
  var clearAriaLabel = computed(() => {
    return form$.value.translations.vueform.elements.signature.clearAriaLabel;
  });

  /**
   * The aria label of a color.
   *
   * @type {string}
   */
  var colorAriaLabel = computed(() => {
    return form$.value.translations.vueform.elements.signature.colorAriaLabel;
  });

  /**
   * The width of signature pad.
   *
   * @type {number}
   */
  var padWidth = computed(() => {
    return width.value * 2;
  });

  /**
   * The height of signature pad.
   *
   * @type {number}
   */
  var padHeight = computed(() => {
    return height.value * 2;
  });

  /**
   * The style attributes of the signature pad.
   *
   * @type {object}
   */
  var padStyle = computed(() => {
    return {
      width: "".concat(width.value, "px"),
      height: "".concat(height.value, "px")
    };
  });

  /**
   * The style attributes of the signature wrapper.
   *
   * @type {object}
   */
  var wrapperStyle = computed(() => {
    var style = {
      height: "".concat(height.value, "px")
    };
    if (maxWidth.value !== 'auto') {
      style.maxWidth = "".concat(maxWidth.value, "px");
    }
    return style;
  });

  /**
   * The style attributes of the signature input when [`mode`](#property-mode) is `type`.
   *
   * @type {object}
   */
  var inputStyle = computed(() => {
    return {
      fontFamily: fontFamily.value,
      fontWeight: fontWeight.value,
      fontSize: "".concat(fontSize.value, "px"),
      lineHeight: "".concat(fontSize.value, "px"),
      color: color.value,
      '-webkit-font-smoothing': 'auto'
    };
  });

  /**
   * The style attributes of the signature line.
   *
   * @type {object}
   */
  var lineStyle = computed(() => {
    return {
      transform: "translateY(calc(".concat(fontSize.value / 2.2, "px))")
    };
  });

  // =============== METHODS ==============

  /**
   * Initalizes the [Signature Pad](https://github.com/szimek/signature_pad).
   *
   * @returns {void}
   */
  var initPad = () => {
    if (pad.value || !pad$.value || modes.value.indexOf('draw') === -1 && modes.value.length || !available.value) {
      return;
    }
    if (!width.value) {
      setWidth();
    }
    nextTick(() => {
      pad.value = new SignaturePad(pad$.value);
      var ctx = pad$.value.getContext('2d');
      ctx.setTransform(1, 0, 0, 1, 0, 0);
      ctx.scale(2, 2);
      setDrawColor();
      pad.value.addEventListener('beginStroke', e => {
        if (isDisabled.value || readonly.value) {
          e.preventDefault();
          return;
        }
        isMouseOver.value = true;
        drawn.value = true;
        drawing.value = true;
        redos.value = [];
      });
      pad.value.addEventListener('endStroke', () => {
        drawing.value = false;
        undosLeft.value++;
        debounceTransform(drawingToImage, 500);
      });
    });
  };

  /**
   * Resizes the signature pad to the current max width and clears any drawings.
   *
   * @returns {void}
   */
  var resizePad = () => {
    setWidth();
    nextTick(() => {
      var ctx = pad$.value.getContext('2d');
      ctx.setTransform(1, 0, 0, 1, 0, 0);
      ctx.scale(2, 2);
      clearDrawnSignature();
    });
  };

  /**
   * Sets the element value as Blob from the current drawing.
   *
   * @returns {void}
   */
  var drawingToImage = () => {
    return new Promise((resolve, reject) => {
      var originalCanvas = pad$.value;
      var originalCtx = originalCanvas.getContext('2d');

      // Get the image data from the canvas
      var imageData = originalCtx.getImageData(0, 0, originalCanvas.width, originalCanvas.height);
      var data = imageData.data;

      // Find the bounding box of the drawing
      var minX = originalCanvas.width,
        minY = originalCanvas.height,
        maxX = 0,
        maxY = 0;
      for (var y = 0; y < originalCanvas.height; y++) {
        for (var x = 0; x < originalCanvas.width; x++) {
          var index = (y * originalCanvas.width + x) * 4;
          if (data[index + 3] > 0) {
            // alpha channel > 0 means there's a drawn pixel
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
          }
        }
      }

      // Check if there is any drawing
      if (minX > maxX || minY > maxY) {
        resolve();
        return;
      }

      // Create a new canvas for the bounding box of the drawing
      var drawingWidth = maxX - minX + 1;
      var drawingHeight = maxY - minY + 1;
      var drawingCanvas = document.createElement('canvas');
      var drawingCtx = drawingCanvas.getContext('2d');
      drawingCanvas.width = drawingWidth;
      drawingCanvas.height = drawingHeight;
      drawingCtx.putImageData(imageData, -minX, -minY);

      // Create a new canvas for the resized image
      var resizedCanvas = document.createElement('canvas');
      var resizedCtx = resizedCanvas.getContext('2d');
      var resizedWidth = uploadWidth.value;
      var resizedHeight = uploadHeight.value;
      resizedCanvas.width = resizedWidth;
      resizedCanvas.height = resizedHeight;

      // Calculate the new target dimensions while maintaining the aspect ratio
      var targetWidth = drawingWidth;
      var targetHeight = drawingHeight;
      if (targetWidth > resizedWidth || targetHeight > resizedHeight) {
        if (targetWidth / targetHeight > resizedWidth / resizedHeight) {
          targetWidth = resizedWidth;
          targetHeight = Math.floor(resizedWidth / drawingWidth * drawingHeight);
        } else {
          targetHeight = resizedHeight;
          targetWidth = Math.floor(resizedHeight / drawingHeight * drawingWidth);
        }
      }
      var offsetX = Math.floor((resizedWidth - targetWidth) / 2);
      var offsetY = Math.floor((resizedHeight - targetHeight) / 2);

      // Draw the original canvas content onto the resized canvas with proper scaling
      resizedCtx.drawImage(drawingCanvas, 0, 0, drawingWidth, drawingHeight, offsetX, offsetY, targetWidth, targetHeight);

      // Convert the resized canvas to Blob
      resizedCanvas.toBlob(function (blob) {
        value.value = blob;
        resolve();

        // Clean up the resized canvas
        resizedCanvas.remove();
      }, 'image/png');
    });
  };

  /**
   * Sets the element value as Blob from the currently typed signature.
   *
   * @returns {void}
   */
  var typingToImage = () => {
    return new Promise((resolve, reject) => {
      if (!text.value) {
        resolve();
        return;
      }
      var canvas = document.createElement('canvas');
      var ctx = canvas.getContext('2d');
      var displayWidth = uploadWidth.value;
      var displayHeight = uploadHeight.value;
      canvas.width = displayWidth;
      canvas.height = displayHeight;
      nextTick(() => {
        ctx.clearRect(0, 0, displayWidth, displayHeight);

        // Determine the maximum font size that fits within the canvas
        var fontSize = displayHeight / 2; // Start with a large font size
        ctx.font = "".concat(fontWeight.value, " ").concat(fontSize, "px ").concat(fontFamily.value);

        // Measure the text width and adjust font size to fit within the canvas
        var textWidth = ctx.measureText(text.value).width;
        while (textWidth > displayWidth - 10 && fontSize > 10) {
          // 10px padding
          fontSize -= 1;
          ctx.font = "".concat(fontWeight.value, " ").concat(fontSize, "px ").concat(fontFamily.value);
          textWidth = ctx.measureText(text.value).width;
        }
        ctx.fillStyle = color.value;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText(text.value, displayWidth / 2, displayHeight / 2);
        canvas.toBlob(function (blob) {
          value.value = blob;
          canvas.remove();
          resolve();
        }, 'image/png');
      });
    });
  };

  /**
   * Sets the element value as Blob from the currently uploaded signature.
   *
   * @returns {void}
   */
  var uploadToImage = () => {
    if (!image.value) {
      return;
    }
    var file = image.value;
    var reader = new FileReader();
    creating.value = true;
    reader.onload = function (e) {
      var img = new Image();
      img.onload = function () {
        var canvas = document.createElement('canvas');
        var ctx = canvas.getContext('2d');

        // Set canvas size to the image size
        canvas.width = img.width;
        canvas.height = img.height;

        // Draw the image on the canvas
        ctx.drawImage(img, 0, 0);

        // Get image data
        var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        var data = imageData.data;

        // Get the selected color
        var colorHex = color.value;
        var colorRGB = hexToRgb(colorHex);

        // Remove the background and change signature color to the selected color
        var threshold = 220;
        for (var i = 0; i < data.length; i += 4) {
          var r = data[i];
          var g = data[i + 1];
          var b = data[i + 2];

          // If the pixel is light, make it transparent
          if (r > threshold && g > threshold && b > threshold) {
            data[i + 3] = 0;
          } else {
            // Change the color to the selected color
            data[i] = colorRGB.r;
            data[i + 1] = colorRGB.g;
            data[i + 2] = colorRGB.b;
          }
        }

        // Put the processed image data back on the canvas
        ctx.putImageData(imageData, 0, 0);

        // Draw the processed image on the main canvas
        var mainCanvas = preview$.value;
        var mainCtx = mainCanvas.getContext('2d');

        // Clear the main canvas
        mainCtx.clearRect(0, 0, mainCanvas.width, mainCanvas.height);

        // Calculate the dimensions to keep aspect ratio within uploadWidth x uploadHeight
        var targetWidth = uploadWidth.value;
        var targetHeight = uploadHeight.value;
        var newWidth = targetWidth;
        var newHeight = newWidth / (img.width / img.height);
        if (newHeight > targetHeight) {
          newHeight = targetHeight;
          newWidth = newHeight * (img.width / img.height);
        }

        // Center the image on the main canvas
        var xOffset = (targetWidth - newWidth) / 2;
        var yOffset = (targetHeight - newHeight) / 2;

        // Draw the image on the main canvas
        mainCtx.drawImage(canvas, 0, 0, img.width, img.height, xOffset, yOffset, newWidth, newHeight);

        // Convert the resized canvas to Blob
        mainCanvas.toBlob(function (blob) {
          value.value = blob;
          created.value = true;
          creating.value = false;

          // Clean up the helper canvas
          canvas.remove();
        }, 'image/png');
      };
      img.src = e.target.result;
    };
    reader.readAsDataURL(file);
  };

  /**
   * Undoes the last drawing when [`mode`](#property-mode) is `draw`.
   *
   * @returns {void}
   */
  var undo = () => {
    if (!pad.value) {
      return;
    }
    var data = pad.value.toData();
    if (!data.length) {
      return;
    }
    redos.value.push(data.pop());
    pad.value.fromData(data);
    if (!data.length) {
      drawn.value = false;
    }
    undosLeft.value = data.length;
    debounceTransform(drawingToImage, 500);
  };

  /**
   * Redoes the last drawing when [`mode`](#property-mode) is `draw`.
   *
   * @returns {void}
   */
  var redo = () => {
    if (!pad.value || !redos.value.length) {
      return;
    }
    var data = pad.value.toData() || [];
    data.push(redos.value.pop());
    pad.value.fromData(data);
    drawn.value = true;
    setDrawColor();
    undosLeft.value = data.length;
    debounceTransform(drawingToImage, 500);
  };

  /**
   * Clears the signature in all forms (drawn, typed, uploaded, loaded).
   *
   * @returns {void}
   */
  var clearSignature = () => {
    text.value = null;
    image.value = null;
    created.value = false;
    value.value = null;
    clearDrawnSignature();
  };

  /**
   * Clears the drawn signature.
   *
   * @returns {void}
   */
  var clearDrawnSignature = () => {
    var _pad$value;
    (_pad$value = pad.value) === null || _pad$value === void 0 || _pad$value.clear();
    drawn.value = false;
    redos.value = [];
  };

  /**
   * Loads Google Fonts dynamically by adding `<link>` tags to `<head>`.
   *
   * @returns {void}
   */
  var loadFonts = () => {
    fonts.value.forEach(font => {
      var parts = font.split('@');
      var skip = parts[0].substr(0, 1) === '!';
      if (!skip) {
        var family = parts[0].replace('!', '').replace(/\s/g, '+');
        var weight = parts[1] || 400;
        var id = "font-".concat(family);
        if (!document.getElementById(id)) {
          var link = document.createElement('link');
          link.id = id;
          link.rel = 'stylesheet';
          link.href = "https://fonts.googleapis.com/css2?family=".concat(family, ":wght@").concat(weight, "&display=swap");
          document.head.appendChild(link);
        }
      }
    });
  };

  /**
   * Sets the drawing color of the signature pad.
   *
   * @returns {void}
   */
  var setDrawColor = () => {
    var {
      r,
      g,
      b
    } = hexToRgb(color.value);
    pad.value.penColor = "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")");
    if (drawn.value) {
      pad.value.fromData(pad.value.toData().map(d => {
        d.penColor = pad.value.penColor;
        return d;
      }));
    }
  };

  /**
   * Adjusts the typed signature's font size to fit into the input without overflow until [`minSize`](#option-min-size) or [`maxSize`](#option-max-size) is reached.
   *
   * @returns {void}
   */
  var adjustFontSize = () => {
    if (!text.value) {
      fontSize.value = maxFontSize.value;
      return;
    }
    var ua = navigator.userAgent.toLowerCase();
    var isSafari = ua.indexOf('safari') != -1 && ua.indexOf('chrome') == -1 && ua.indexOf('android') == -1;
    var inputElement = input$.value;
    var styles = window.getComputedStyle(inputElement);
    var textIndent = parseFloat(styles.textIndent);
    var paddingRight = parseFloat(styles.paddingRight);
    var maxWidth = Math.ceil(inputElement.getBoundingClientRect().width) - textIndent;
    var size = fontSize.value;
    while (inputElement.scrollWidth + (isSafari ? paddingRight : 0) - textIndent > maxWidth && size > minFontSize.value) {
      size--;
      inputElement.style.fontSize = size + 'px';
    }
    while (inputElement.scrollWidth + (isSafari ? paddingRight : 0) - textIndent <= maxWidth && size < maxFontSize.value) {
      inputElement.style.fontSize = size + 1 + 'px';
      if (inputElement.scrollWidth + (isSafari ? paddingRight : 0) - textIndent > maxWidth) {
        inputElement.style.fontSize = size + 'px';
        break;
      }
      size++;
    }
    fontSize.value = size;
  };

  /**
   * Converts a HEX color to RGB.
   *
   * @param {string} hex* the color in HEX format
   * @returns {string}
   */
  var hexToRgb = hex => {
    hex = hex.replace(/^#/, '');
    var bigint = parseInt(hex, 16);
    var r = bigint >> 16 & 255;
    var g = bigint >> 8 & 255;
    var b = bigint & 255;
    return {
      r,
      g,
      b
    };
  };

  /**
   * Checks if a file complies with [`accept`](#option-accept) list and throws an alert if not.
   *
   * @param {File} file* the file to check
   * @returns {boolean}
   */
  var checkFileExt = file => {
    var accepted = accept.value.indexOf('jpg') !== -1 && accept.value.indexOf('jpeg') === -1 ? accept.value.concat(['jpeg']) : accept.value;
    var valid = file && accepted.indexOf(file === null || file === void 0 ? void 0 : file.name.split('.').pop()) !== -1;
    if (!valid) {
      alert(form$.value.__(form$.value.translations.vueform.elements.signature.unsupportedFormat, {
        extensions: accept.value.join(', ')
      }));
      return false;
    }
    return true;
  };

  /**
   * Checks if a file is under the allowed [`maxSize`](#option-max-size) and throws an alert if not.
   *
   * @param {File} file* the file to check
   * @returns {boolean}
   */
  var checkFileSize = file => {
    if (maxSize.value === -1) {
      return true;
    }
    if (file.size / 1024 > maxSize.value) {
      alert(form$.value.__(form$.value.translations.vueform.elements.signature.maxSizeError, {
        max: maxSize.value
      }));
      return false;
    }
    return true;
  };

  /**
   * Sets the [`width`](#property-width) to the current element width.
   *
   * @returns {void}
   */
  var setWidth = () => {
    width.value = input.value.getBoundingClientRect().width;
  };

  /**
   * Sets the [`lastWidth`](#property-last-width) to the current element width.
   *
   * @returns {void}
   */
  var setLastWidth = () => {
    lastWidth.value = input.value.getBoundingClientRect().width;
  };

  /**
   * Sets the [`mode`](#property-mode) to the first available mode from [`modes`](#option-modes). If none found, `draw` will be set.
   *
   * @returns {void}
   */
  var setDefaultMode = function setDefaultMode() {
    var setDropdown = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    mode.value = modes.value[0] || 'draw';
    if (setDropdown) {
      mode$.value.selected = resolvedModes.value[0] || {
        label: form$.value.translations.vueform.elements.signature.draw,
        value: 'draw',
        index: 0
      };
    }
  };

  /**
   * Sets the [`fontFamily`](#property-font-family) and [`fontWeight`](#property-font-weight) to the first available from [`fonts`](#option-fonts). If none found, `cursive` and `400` will be set.
   *
   * @returns {void}
   */
  var setDefaultFont = function setDefaultFont() {
    var setDropdown = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    fontFamily.value = fontFamilies.value[0] || 'cursive';
    fontWeight.value = fontWeights.value[0] || 400;
    if (setDropdown) {
      font$.value.selected = {};
      font$.value.pointed = {};
    }
  };

  /**
   * Sets the [`color`](#property-color) to the first available color from [`colors`](#option-colors). If none found, `#000000` will be set.
   *
   * @returns {void}
   */
  var setDefaultColor = () => {
    color.value = colors.value[0] || '#000000';
  };

  /**
   * Sets the [`fontFamily`](#property-font-family) and [`fontWeight`](#property-font-weight) by the index of a font from [`fonts`](#option-fonts).
   *
   * @param {object} value* the selected font object (from [`resolvedFonts`](#property-resolved-fonts))
   * @returns {void}
   */
  var setFont = value => {
    fontFamily.value = fontFamilies.value[value.index];
    fontWeight.value = fontWeights.value[value.index];
  };

  /**
   * Checks the file contstraints and sets the value of [`image`](#property-image) and renders the selected file preview when [`mode`](#property-mode) is `upload`. If file constraints are not met it clears both.
   *
   * @param {File} file* the file to set as image
   * @returns {void}
   */
  var setImage = file => {
    if (checkFileExt(file) && checkFileSize(file)) {
      image.value = file;
      uploadToImage(image.value);
    } else {
      image.value = null;
      created.value = false;
    }
  };
  var debounceTransform = function debounceTransform(method) {
    var ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
    if (debouncer.value) {
      clearTimeout(debouncer.value);
    }
    debouncer.value = setTimeout(/*#__PURE__*/_asyncToGenerator(function* () {
      try {
        yield method.call();
      } catch (e) {
        value.value = null;
      }
    }), ms);
  };

  /**
   * Handles the input event of the input field.
   *
   * @param {Event} e the Event object
   * @returns {void}
   */
  var handleInput = e => {
    if (isDisabled.value || readonly.value) {
      return;
    }
    text.value = e.target.value;
  };

  /**
   * Handles the mode select.
   *
   * @param {object} value* the selected mode object (from [`resolvedModes`](#property-resolved-modes))
   * @returns {void}
   */
  var handleModeSelect = value => {
    if (isDisabled.value || readonly.value) {
      return;
    }
    mode.value = value.value;
    nextTick(() => {
      if (mode.value === 'draw') {
        pad$.value.focus();
      } else if (mode.value === 'type') {
        input$.value.focus();
      } else if (mode.value === 'upload') {
        uploadButton$.value.focus();
      }
    });
  };

  /**
   * Handles the color select.
   *
   * @param {string} value the color to select (HEX)
   * @returns {void}
   */
  var handleColorSelect = value => {
    if (isDisabled.value || readonly.value) {
      return;
    }
    color.value = value;
  };

  /**
   * Handles the font select.
   *
   * @param {object} value* the selected font object (from [`resolvedFonts`](#property-resolved-fonts))
   * @returns {void}
   */
  var handleFontSelect = value => {
    font$.value.selected = {};
    if (isDisabled.value || readonly.value) {
      return;
    }
    setFont(value);
  };

  /**
   * Handle the clear button action.
   *
   * @returns {void}
   */
  var handleClear = () => {
    if (isDisabled.value || readonly.value) {
      return;
    }
    if (!uploaded.value) {
      if (mode.value === 'draw') {
        pad$.value.focus();
      } else if (mode.value === 'type') {
        input$.value.focus();
      } else if (mode.value === 'upload') {
        uploadButton$.value.focus();
      }
    }
    clearSignature();
    isMouseOver.value = false;
  };

  /**
   * Handles the undo button action.
   *
   * @returns {void}
   */
  var handleUndo = () => {
    if (isDisabled.value || readonly.value) {
      return;
    }
    undo();
    isMouseOver.value = false;
  };

  /**
   * Handles the redo button action.
   *
   * @returns {void}
   */
  var handleRedo = () => {
    if (isDisabled.value || readonly.value) {
      return;
    }
    redo();
    isMouseOver.value = false;
  };

  /**
   * Handles the file select button action.
   *
   * @returns {void}
   */
  var handleSelectClick = () => {
    if (isDisabled.value || readonly.value) {
      return;
    }
    file$.value.click();
  };

  /**
   * Handles the file selection.
   *
   * @returns {void}
   */
  var handleFileSelect = event => {
    if (isDisabled.value || readonly.value) {
      return;
    }
    var file = event.target.files[0];
    setImage(file);
    file$.value.value = '';
  };

  /**
   * Handles the drop event.
   *
   * @param {Event} e* the Event object
   * @returns {void}
   */
  var handleDrop = e => {
    if (isDisabled.value || readonly.value || !droppable.value) {
      return;
    }
    var file = e.dataTransfer.files[0];
    setImage(file);
  };

  /**
   * Handles the mouse leave event of the wrapper.
   * 
   * @returns {void}
   */
  var handleMouseLeave = () => {
    isMouseOver.value = false;
  };

  /**
   * Handles the window resize event.
   *
   * @returns {void}
   */
  var handleResize = () => {
    if (lastWidth.value === input.value.getBoundingClientRect().width) {
      return;
    }
    resizePad();
    adjustFontSize();
  };

  /**
   * Handler with debounce for resize event.
   *
   * @returns {void}
   */
  var handleResizeDebounce = debounce(handleResize, 200, () => {
    setLastWidth();
  });

  // =============== HOOKS ================

  setDefaultMode();
  setDefaultFont();
  setDefaultColor();
  onMounted(() => {
    if (autoload.value) {
      loadFonts();
    }
    setWidth();

    // Auto-select default mode
    if (mode$.value) {
      mode$.value.selected = resolvedModes.value[0] || {
        label: form$.value.translations.vueform.elements.signature.draw,
        value: 'draw',
        index: 0
      };
    }

    // Handling drag & drop
    var evts = ['drag', 'dragstart', 'dragenter', 'dragleave', 'dragend'];
    evts.forEach(event => {
      input.value.addEventListener(event, e => {
        e.preventDefault();
        e.stopPropagation();
        if (['dragleave', 'dragend'].indexOf(event) === -1) {
          return;
        }
        if (isDisabled.value || !droppable.value) {
          return;
        }
        dragging.value = false;
      });
    });
    input.value.addEventListener('dragover', e => {
      e.preventDefault();
      e.stopPropagation();
      if (isDisabled.value || !droppable.value) {
        return;
      }
      if (dragging.value !== true) {
        dragging.value = true;
      }
    });

    // listening for the actual drop event
    input.value.addEventListener('drop', e => {
      e.preventDefault();
      e.stopPropagation();
      if (isDisabled.value || !droppable.value) {
        return;
      }
      handleDrop(e);
      dragging.value = false;
    });
    nextTick(() => {
      initPad();
      window.addEventListener('resize', handleResizeDebounce);
    });

    // ============== WATCHERS ==============

    watch(maxFontSize, () => {
      adjustFontSize();
    }, {
      flush: 'post'
    });
    watch(modes, () => {
      initPad();
      setDefaultMode(true);
    });
    watch(available, () => {
      if (form$.value.steps$ && !form$.value.steps$.current$.elements.includes(path.value.split('.')[0])) {
        form$.value.steps$.on('select', activeStep$ => {
          if (!activeStep$.elements.includes(path.value.split('.')[0]) || width.value) {
            return;
          }
          nextTick(() => {
            initPad();
          });
        });
      } else {
        nextTick(() => {
          initPad();
        });
      }
    }, {
      flush: 'post'
    });
    watch(color, () => {
      if (pad.value) {
        setDrawColor();
      }
      if (mode.value === 'upload' && created.value && !creating.value) {
        uploadToImage();
      }
    });
    watch(columns, () => {
      setLastWidth();
      nextTick(() => {
        handleResize();
        if (mode.value === 'upload' && created.value && !creating.value) {
          uploadToImage();
        }
      });
    });
    watch(mode, () => {
      clearSignature();
    });
    watch([height, maxWidth], () => {
      resizePad();
      adjustFontSize();
    }, {
      flush: 'post'
    });
    watch([text, fontFamily], () => {
      nextTick(() => {
        adjustFontSize();
      });
    }, {
      flush: 'post'
    });
    watch(text, () => {
      debounceTransform(typingToImage, 1000);
    }, {
      flush: 'post'
    });
    watch(fonts, () => {
      if (autoload.value) {
        loadFonts();
      }
    });
  });
  onBeforeUnmount(() => {
    window.removeEventListener('resize', handleResizeDebounce);
  });
  return {
    mode$,
    font$,
    input$,
    preview$,
    pad$,
    file$,
    upload$,
    uploadButton$,
    mode,
    fontFamily,
    fontWeight,
    color,
    text,
    fontSize,
    pad,
    image,
    created,
    creating,
    dragging,
    drawn,
    drawing,
    redos,
    undosLeft,
    width,
    lastWidth,
    fontFamilies,
    fontWeights,
    uploaded,
    processing,
    droppable,
    resolvedModes,
    resolvedFonts,
    fileAccept,
    showLine,
    showInput,
    showPlaceholder,
    showUploadContainer,
    showUpload,
    showPreview,
    showPad,
    showUndos,
    showColors,
    showModes,
    showFonts,
    showClear,
    tabindex,
    placeholderText,
    dndText,
    uploadButtonText,
    imgAltText,
    imgTitleText,
    fontText,
    undoText,
    redoText,
    modeSelectorAria,
    fontSelectorAria,
    wrapperAriaLabel,
    inputAriaLabel,
    padAriaLabel,
    colorAriaLabel,
    clearAriaLabel,
    padWidth,
    padHeight,
    padStyle,
    wrapperStyle,
    inputStyle,
    lineStyle,
    initPad,
    resizePad,
    drawingToImage,
    typingToImage,
    uploadToImage,
    undo,
    redo,
    clearSignature,
    clearDrawnSignature,
    loadFonts,
    setDrawColor,
    adjustFontSize,
    hexToRgb,
    checkFileExt,
    checkFileSize,
    setWidth,
    setLastWidth,
    setDefaultMode,
    setDefaultFont,
    setDefaultColor,
    setFont,
    handleInput,
    handleModeSelect,
    handleColorSelect,
    handleFontSelect,
    handleClear,
    handleUndo,
    handleRedo,
    handleSelectClick,
    handleFileSelect,
    handleDrop,
    handleMouseLeave,
    handleResize,
    handleResizeDebounce
  };
}

var SignatureElement = {
  name: 'SignatureElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'text',
      private: true
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    default: {
      required: false,
      type: [String, Number, Object],
      localized: true,
      default: null
    },
    debounce: {
      required: false,
      type: [Number],
      default: null
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    readonly: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    modes: {
      required: false,
      type: [Array],
      default: () => ['draw', 'type', 'upload']
    },
    fonts: {
      required: false,
      type: [Array],
      default: () => ['Caveat@400', 'Sacramento@400', 'Dancing Script@400']
    },
    autoload: {
      required: false,
      type: [Boolean],
      default: true
    },
    minFontSize: {
      required: false,
      type: [Number],
      default: 10
    },
    maxFontSize: {
      required: false,
      type: [Number],
      default: 60
    },
    colors: {
      required: false,
      type: [Array],
      default: () => ['#000000', '#2558b2', '#f22f30']
    },
    invertColors: {
      required: false,
      type: [Array],
      default: () => ['#000000']
    },
    maxWidth: {
      required: false,
      type: [Number, String],
      default: 'auto'
    },
    height: {
      required: false,
      type: [Number],
      default: 160
    },
    uploadWidth: {
      required: false,
      type: [Number],
      default: 480
    },
    uploadHeight: {
      required: false,
      type: [Number],
      default: 160
    },
    maxSize: {
      required: false,
      type: [Number],
      default: 2048
    },
    accept: {
      required: false,
      type: [Array],
      default: () => ['jpg', 'png', 'svg']
    },
    placeholder: {
      required: false,
      type: [String, Object, Boolean],
      localized: true,
      default: null
    },
    line: {
      required: false,
      type: [Boolean],
      default: true
    },
    canClear: {
      required: false,
      type: [Boolean],
      default: true
    },
    canUndo: {
      required: false,
      type: [Boolean],
      default: true
    },
    canDrop: {
      required: false,
      type: [Boolean],
      default: true
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$R, base$T, base$P, base$_, base$1i, base$U, base$X, base$G, base$H, base$1a, base$I, base$Q, base$N, base$x, useSignature, signature, base$15, base$O, base$13, base$12, base$1g, base$14, base$11, base$w, base$W, base$K, base$Z];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after', 'addon-before', 'addon-after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var base$7 = function base(props, context, dependencies) {
  var {
    lazy
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var value = dependencies.value;

  // =============== METHODS ==============

  /**
   * Handles `update` event if not lazy.
   *
   * @param {string} val* value of the element
   * @returns {void}
   * @private
   */
  var handleUpdate = val => {
    if (lazy.value) {
      return;
    }
    value.value = val;
  };
  return {
    handleUpdate
  };
};

var SliderElement = {
  name: 'SliderElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'slider',
      private: true
    },
    default: {
      required: false,
      type: [Number, Array],
      default: 0
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    min: {
      required: false,
      type: [Number],
      default: 0
    },
    max: {
      required: false,
      type: [Number],
      default: 100
    },
    step: {
      required: false,
      type: [Number],
      default: 1
    },
    tooltips: {
      required: false,
      type: [Boolean],
      default: true
    },
    showTooltip: {
      required: false,
      type: [String],
      default: 'always'
    },
    tooltipPosition: {
      required: false,
      type: [String],
      default: null
    },
    merge: {
      required: false,
      type: [Number],
      default: -1
    },
    format: {
      required: false,
      type: [Object, Function],
      default: null
    },
    orientation: {
      required: false,
      type: [String],
      default: 'horizontal'
    },
    direction: {
      required: false,
      type: [String],
      default: 'ltr'
    },
    lazy: {
      required: false,
      type: [Boolean],
      default: true,
      private: true
    },
    extendOptions: {
      required: false,
      type: [Object],
      default: () => ({})
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$R, base$T, min, base$_, base$1i, base$U, base$X, base$H, slider, base$Q, slider$1, base$1a, base$F, base$15, base$O, base$13, base$12, base$1g, base$14, base$11, base$y, base$7, base$W, base$K, base$Z];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var base$6 = function base(props, context, dependencies) {
  var {
    content,
    expressions
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var {
    fieldSlots,
    el$,
    form$,
    parent
  } = dependencies;

  // =============== INJECT ===============

  var config$ = inject('config$');

  // ============== COMPUTED ==============

  /**
   * Determines if HTML content should be rendered for the element.
   *
   * @type {boolean}
   * @private
   */
  var isHtml = computed(() => {
    return typeof resolvedContent.value === 'string';
  });

  /**
   * The resolved content if it is a string or a function.
   *
   * @type {any}
   */
  var resolvedContent = computed(() => {
    var _content$value, _content$value2;
    var resolvedContent = typeof content.value === 'function' ? content.value(el$.value) : content.value;

    // Content is multilingual
    if (content.value && typeof content.value === 'object' && !((_content$value = content.value) !== null && _content$value !== void 0 && _content$value.render) && !((_content$value2 = content.value) !== null && _content$value2 !== void 0 && _content$value2.template)) {
      resolvedContent = Object.keys(resolvedContent).reduce((prev, curr) => _objectSpread2$1(_objectSpread2$1({}, prev), {}, {
        [curr]: typeof resolvedContent[curr] === 'function' ? resolvedContent[curr](el$.value) : resolvedContent[curr]
      }), {});
      resolvedContent = localize(resolvedContent, config$.value, form$.value);
    }
    if (expressions.value && typeof resolvedContent === 'string' && resolvedContent.includes('{')) {
      var _parent$value;
      resolvedContent = form$.value.resolveExpression(resolvedContent, (_parent$value = parent.value) === null || _parent$value === void 0 ? void 0 : _parent$value.dataPath);
    }
    return form$.value.$vueform.sanitize(resolvedContent);
  });

  /**
   * Resolves the content as component.
   *
   * @type {object}
   * @private
   */
  var componentContent = computed(() => {
    var _resolvedContent$valu, _resolvedContent$valu2;
    if (!((_resolvedContent$valu = resolvedContent.value) !== null && _resolvedContent$valu !== void 0 && _resolvedContent$valu.render) && !((_resolvedContent$valu2 = resolvedContent.value) !== null && _resolvedContent$valu2 !== void 0 && _resolvedContent$valu2.template)) {
      return resolvedContent.value;
    }
    return resolveComponent(resolvedContent.value);
  });

  /**
   * Resolves the content as slot.
   *
   * @type {object}
   * @private
   */
  var slotContent = computed(() => {
    var _fieldSlots$value$def, _fieldSlots$value$def2;
    if (!((_fieldSlots$value$def = fieldSlots.value.default) !== null && _fieldSlots$value$def !== void 0 && _fieldSlots$value$def.render) && !((_fieldSlots$value$def2 = fieldSlots.value.default) !== null && _fieldSlots$value$def2 !== void 0 && _fieldSlots$value$def2.template)) {
      return fieldSlots.value.default;
    }
    return resolveComponent(fieldSlots.value.default);
  });

  /**
   * Adds el$ prop to component.
   * 
   * @param {object} component - the base component
   * @returns {object}
   * @private
   */
  var resolveComponent = component => {
    component = _objectSpread2$1({}, component);
    if (!component.props) {
      component.props = ['el$'];
    } else if (Array.isArray(component.props) && component.props.indexOf('el$') === -1) {
      component.props.push('el$');
    } else if (!Array.isArray(component.props) && !component.props.el$) {
      component.props['el$'] = {
        type: Object,
        required: false,
        default: () => ({})
      };
    }
    return component;
  };
  return {
    isHtml,
    componentContent,
    slotContent,
    resolvedContent
  };
};

var StaticElement = {
  name: 'StaticElement',
  mixins: [BaseElement, HasView],
  emits: ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'static',
      private: true
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    content: {
      required: false,
      type: [String, Object, Function],
      default: ''
    },
    expressions: {
      required: false,
      type: [Boolean],
      default: false
    },
    wrap: {
      required: false,
      type: [Boolean],
      default: true
    },
    tag: {
      required: false,
      type: [String],
      default: undefined
    },
    allowHtml: {
      required: false,
      type: [Boolean],
      default: true
    },
    href: {
      required: false,
      type: [String],
      default: undefined
    },
    target: {
      required: false,
      type: [String],
      default: undefined
    },
    src: {
      required: false,
      type: [String],
      default: undefined
    },
    alt: {
      required: false,
      type: [String],
      default: undefined
    },
    title: {
      required: false,
      type: [String],
      default: undefined
    },
    width: {
      required: false,
      type: [String],
      default: undefined
    },
    height: {
      required: false,
      type: [String],
      default: undefined
    },
    attrs: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    align: {
      required: false,
      type: [String],
      default: undefined
    },
    top: {
      required: false,
      type: [String, Number],
      default: 0
    },
    bottom: {
      required: false,
      type: [String, Number],
      default: 0
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, static_$1, base$1i, static_$2, base$1a, base$15, base$13, base$12, base$1g, base$14, base$11, base$_, static_$3, base$Z, base$6];
    context.slots = ['default', 'label', 'info', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, static_(props, context));
  }
};

var base$5 = function base(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var fire = dependencies.fire;
  var el$ = dependencies.el$;

  /**
   * Handles `tag` event.
   *
   * @param {string} searchQuery* the current search query.
   * @returns {void}
   * @private
   */
  var handleTag = searchQuery => {
    fire('tag', searchQuery, el$.value);
  };
  return {
    handleTag
  };
};

var TagsElement = {
  name: 'TagsElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'select', 'deselect', 'search-change', 'open', 'close', 'tag', 'clear', 'paste', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'tags',
      private: true
    },
    default: {
      required: false,
      type: [Array],
      default: () => []
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    floating: {
      required: false,
      type: [String, Boolean, Object],
      localized: true,
      default: null
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    placeholder: {
      required: false,
      type: [String, Object],
      localized: true,
      default: null
    },
    attrs: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    onSelect: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onDeselect: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onSearchChange: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onOpen: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onClose: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onTag: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onClear: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onPaste: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    items: {
      required: false,
      type: [Object, Array, Function, String],
      localized: true,
      default: () => ({})
    },
    labelProp: {
      type: [String],
      required: false,
      default: 'label'
    },
    valueProp: {
      type: [String],
      required: false,
      default: 'value'
    },
    dataKey: {
      type: [String],
      required: false,
      default: undefined
    },
    searchParam: {
      type: [String],
      required: false,
      default: 'query'
    },
    search: {
      required: false,
      type: [Boolean],
      default: false
    },
    trackBy: {
      type: [String, Array],
      required: false,
      default: 'label'
    },
    strict: {
      type: [Boolean],
      required: false,
      default: true
    },
    breakTags: {
      type: [Boolean],
      required: false,
      default: false
    },
    create: {
      required: false,
      type: [Boolean],
      default: false
    },
    appendNewOption: {
      type: [Boolean],
      required: false,
      default: true
    },
    addOptionOn: {
      type: [Array],
      required: false,
      default: () => ['enter']
    },
    allowAbsent: {
      type: [Boolean],
      required: false,
      default: false,
      native: false
    },
    object: {
      type: [Boolean],
      required: false,
      default: false
    },
    limit: {
      type: [Number],
      required: false,
      default: -1
    },
    max: {
      type: [Number],
      required: false,
      default: -1
    },
    groups: {
      type: [Boolean],
      required: false,
      default: false
    },
    groupLabel: {
      type: [String],
      required: false,
      default: 'label'
    },
    groupOptions: {
      type: [String],
      required: false,
      default: 'items'
    },
    groupHideEmpty: {
      type: [Boolean],
      required: false,
      default: false
    },
    groupSelect: {
      type: [Boolean],
      required: false,
      default: true
    },
    openDirection: {
      type: [String],
      required: false,
      default: 'bottom'
    },
    appendToBody: {
      type: [Boolean],
      required: false,
      default: false,
      native: false
    },
    appendTo: {
      type: [String],
      required: false,
      default: undefined,
      native: false
    },
    canClear: {
      type: [Boolean],
      required: false,
      default: true
    },
    clearOnSelect: {
      type: [Boolean],
      required: false,
      default: true
    },
    closeOnSelect: {
      type: [Boolean],
      required: false,
      default: true
    },
    closeOnDeselect: {
      type: [Boolean],
      required: false,
      default: false
    },
    clearOnRefetch: {
      type: [Boolean],
      required: false,
      default: false
    },
    delay: {
      type: [Number],
      required: false,
      default: -1
    },
    minChars: {
      type: [Number],
      required: false,
      default: 0
    },
    resolveOnLoad: {
      type: [Boolean],
      required: false,
      default: true
    },
    filterResults: {
      type: [Boolean],
      required: false,
      default: true
    },
    clearOnSearch: {
      type: [Boolean],
      required: false,
      default: false
    },
    hideSelected: {
      type: [Boolean],
      required: false,
      default: true
    },
    showOptions: {
      type: [Boolean],
      required: false,
      default: true
    },
    caret: {
      type: [Boolean],
      required: false,
      default: true
    },
    loading: {
      type: [Boolean],
      required: false,
      default: false
    },
    noOptionsText: {
      type: [String, Object],
      required: false,
      default: undefined,
      '@default': 'locale.multiselect.noOptions',
      localized: true
    },
    noResultsText: {
      type: [String, Object],
      required: false,
      default: undefined,
      '@default': 'locale.multiselect.noResults',
      localized: true
    },
    autocomplete: {
      type: [String],
      required: false
    },
    inputType: {
      type: [String],
      required: false,
      default: 'text'
    },
    extendOptions: {
      required: false,
      type: [Object],
      default: () => ({})
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, tags$4, base$T, array$1, base$_, base$L, base$1i, tags$5, base$X, base$H, base$I, base$M, tags$1, base$Q, tags$2, base$1a, array, tags$3, base$15, base$O, base$13, base$12, base$1g, base$14, base$11, base$d, base$5, base$c, tags, base$W, base$K, base$Z, base$x];
    context.slots = ['tag', 'option', 'placeholder', 'group-label', 'before-list', 'after-list', 'no-results', 'no-options', 'caret', 'spinner', 'clear', 'label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var base$4 = function base(props, context, dependencies) {
  var {
    autogrow
  } = toRefs(props);
  var debouncedAutosize = debounce(() => {
    autosize();
  }, 500);

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var input = dependencies.input;
  var value = dependencies.value;

  // =============== METHODS ==============

  /**
   * Updates the height of the input based in its contents when [`autogrow`](#option-autogrow) is enabled.
   *
   * @returns {void}
   */
  var autosize = () => {
    if (!autogrow.value) {
      return;
    }
    form$.value.$vueform.services.autosize.update(input.value);
  };

  // ============== WATCHERS ==============

  watch(autogrow, newValue => {
    if (newValue) {
      form$.value.$vueform.services.autosize(input.value);
    } else {
      form$.value.$vueform.services.autosize.destroy(input.value);
    }
  });
  watch(value, () => {
    debouncedAutosize();
  });

  // =============== HOOKS ================

  onMounted(() => {
    if (autogrow.value) {
      nextTick(() => {
        form$.value.$vueform.services.autosize(input.value);
      });
    }
  });
  return {
    autosize
  };
};
var multilingual = function multilingual(props, context, dependencies) {
  var {
    autosize
  } = base$4(props, context, dependencies);

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;

  // =============== HOOKS ================

  onMounted(() => {
    form$.value.on('language', () => {
      autosize();
    });
  });
  return {
    autosize
  };
};

var TextareaElement = {
  name: 'TextareaElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'blur', 'focus', 'keydown', 'keyup', 'keypress', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'textarea',
      private: true
    },
    default: {
      required: false,
      type: [String, Number, Object],
      localized: true,
      default: null
    },
    addons: {
      required: false,
      type: [Object],
      localized: true,
      default: () => ({})
    },
    autogrow: {
      required: false,
      type: [Boolean],
      default: true
    },
    rows: {
      required: false,
      type: [Number],
      default: 3
    },
    debounce: {
      required: false,
      type: [Number],
      default: null
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    floating: {
      required: false,
      type: [String, Boolean, Object],
      localized: true,
      default: null
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    placeholder: {
      required: false,
      type: [String, Object],
      localized: true,
      default: null
    },
    readonly: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    attrs: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    onBlur: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onKeydown: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onKeyup: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onKeypress: {
      required: false,
      type: [Function],
      default: null,
      private: true
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$R, base$T, base$P, base$_, base$L, base$1i, base$U, base$X, base$G, base$A, text$1, base$1a, text$2, base$Q, base$N, base$4, textarea, base$15, base$O, base$13, base$12, base$1g, base$14, base$11, base$q, base$w, base$b, base$W, base$K, base$Z, base$9, base$x];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after', 'addon-before', 'addon-after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var TextElement = {
  name: 'TextElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'blur', 'focus', 'keydown', 'keyup', 'keypress', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'text',
      private: true
    },
    default: {
      required: false,
      type: [String, Number, Object],
      localized: true,
      default: null
    },
    debounce: {
      required: false,
      type: [Number],
      default: null
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    floating: {
      required: false,
      type: [String, Boolean, Object],
      localized: true,
      default: null
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    placeholder: {
      required: false,
      type: [String, Object],
      localized: true,
      default: null
    },
    readonly: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    inputType: {
      required: false,
      type: [String],
      default: 'text'
    },
    forceNumbers: {
      required: false,
      type: [Boolean],
      default: null
    },
    expression: {
      required: false,
      type: [String, Object],
      default: undefined,
      localized: true
    },
    attrs: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    addons: {
      required: false,
      type: [Object],
      localized: true,
      default: () => ({})
    },
    autocomplete: {
      required: false,
      type: [String, Number],
      default: null
    },
    loading: {
      type: [Boolean],
      required: false,
      default: false
    },
    onBlur: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onKeydown: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onKeyup: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onKeypress: {
      required: false,
      type: [Function],
      default: null,
      private: true
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$R, base$T, base$P, base$_, base$1i, base$U, base$X, base$G, base$A, text$1, base$1a, text$2, base$M, base$n, text$3, base$N, text, base$15, base$O, base$13, base$12, base$1g, base$14, base$11, base$q, base$w, base$b, base$W, base$K, base$Z, base$9, base$L, base$x];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after', 'addon-before', 'addon-after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var ToggleElement = {
  name: 'ToggleElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'toggle',
      private: true
    },
    default: {
      required: false,
      type: [String, Number, Boolean],
      default: undefined // falseValue
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    text: {
      required: false,
      type: [String, Object],
      localized: true,
      default: null
    },
    labels: {
      required: false,
      type: [Object],
      localized: true,
      default: () => ({})
    },
    trueValue: {
      required: false,
      type: [Boolean, String, Number],
      default: true
    },
    falseValue: {
      required: false,
      type: [Boolean, String, Number],
      default: false
    },
    extendOptions: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    align: {
      required: false,
      type: [String],
      default: undefined
    },
    standalone: {
      required: false,
      type: [Boolean],
      default: false
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$R, base$T, boolean, base$_, base$1i, base$U, base$X, toggle, base$H, base$1a, base$I, base$Q, base$F, base$15, base$O, base$13, base$12, base$1g, base$14, base$11, base$y, base$D, toggle$1, base$K, base$Z, base$E];
    context.slots = ['default', 'label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var base$3 = function base(props, context, dependencies) {
  var {
    endpoint,
    method
  } = toRefs(props);

  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;
  var input = dependencies.input;

  // ================ DATA ================

  /**
   * Whether the editor is focused.
   *
   * @type {boolean}
   */
  var focused = ref(false);

  // ============== COMPUTED ==============

  /**
   * The endpoint that uploads attachment. Can be changed by setting [`endpoint`](#endpoint) option.
   *
   * @type {string}
   * @default `config.endpoints.attachment.url`
   * @private
   */
  var editorEndpoint = computed(() => {
    return endpoint.value || form$.value.$vueform.config.endpoints.attachment.url;
  });

  /**
   * The method to use to upload attachment. Can be changed by setting [`method`](#method) option.
   *
   * @type {string}
   * @default `config.endpoints.attachment.method`
   * @private
   */
  var editorMethod = computed(() => {
    return method.value || form$.value.$vueform.config.endpoints.attachment.method;
  });

  // =============== HOOKS ================

  onMounted(() => {
    input.value.editor$.addEventListener('focus', () => {
      focused.value = true;
    });
    input.value.editor$.addEventListener('blur', () => {
      focused.value = false;
    });
  });
  return {
    editorEndpoint,
    editorMethod,
    focused
  };
};

var base$2 = function base(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var fire = dependencies.fire;
  var listeners = dependencies.listeners;

  // =============== METHODS ==============

  /**
   * Handles `alert` event.
   *
   * @param {string} message* alert message
   * @returns {void}
   * @private
   */
  var handleAlert = message => {
    fire('alert', message);

    /* istanbul ignore else */
    if (!listeners.value.alert) {
      alert(message);
    }
  };
  return {
    handleAlert
  };
};

var EditorElement = {
  name: 'EditorElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'blur', 'alert', 'error', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 'editor',
      private: true
    },
    default: {
      required: false,
      type: [String, Number, Object],
      localized: true,
      default: null
    },
    debounce: {
      required: false,
      type: [Number],
      default: null
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    placeholder: {
      required: false,
      type: [String, Object],
      localized: true,
      default: null
    },
    onError: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onAlert: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    accept: {
      required: false,
      type: [Array],
      default: () => []
    },
    acceptMimes: {
      required: false,
      type: [Array],
      default: () => []
    },
    endpoint: {
      required: false,
      type: [String, Function, Promise],
      default: null,
      '@default': 'config.endpoints.attachment.url'
    },
    method: {
      required: false,
      type: [String],
      default: null,
      '@default': 'config.endpoints.attachment.method'
    },
    hideTools: {
      required: false,
      type: [Array],
      default: () => []
    },
    onBlur: {
      required: false,
      type: [Function],
      default: null,
      private: true
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$R, base$T, base$P, base$_, base$1i, base$U, base$X, text$1, base$1a, text$2, base$Q, base$N, editor, base$15, base$O, base$13, base$12, base$3, base$1g, base$14, base$11, base$q, base$2, base$r, base$b, base$W, base$K, editor$1, base$x];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, base$S(props, context));
  }
};

var base$1 = function base(props, context, dependencies) {
  // ============ DEPENDENCIES ============

  var form$ = dependencies.form$;

  // ============== COMPUTED ===============

  /**
   * The language code of the currently selected language (2 letters).
   *
   * @type {string}
   */
  var language = computed(() => {
    return form$.value.selectedLanguage;
  });

  /**
   * Available language codes.
   *
   * @type {array}
   */
  var languages = computed(() => {
    return keys_1(form$.value.options.languages);
  });
  return {
    language,
    languages
  };
};

var TTextareaElement = {
  name: 'TTextareaElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'blur', 'focus', 'keydown', 'keyup', 'keypress', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 't-textarea',
      private: true
    },
    default: {
      required: false,
      type: [Object, String, Number],
      localized: true,
      default: null
    },
    addons: {
      required: false,
      type: [Object],
      localized: true,
      default: () => ({})
    },
    autogrow: {
      required: false,
      type: [Boolean],
      default: true
    },
    rows: {
      required: false,
      type: [Number],
      default: 3
    },
    debounce: {
      required: false,
      type: [Number],
      default: null
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    floating: {
      required: false,
      type: [String, Boolean, Object],
      localized: true,
      default: null
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    placeholder: {
      required: false,
      type: [String, Object],
      localized: true,
      default: null
    },
    readonly: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    attrs: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    onBlur: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onKeydown: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onKeyup: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onKeypress: {
      required: false,
      type: [Function],
      default: null,
      private: true
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$R, base$T, base$_, base$L, base$1i, base$U, base$X, base$G, base$A, base$1, multilingual$6, multilingual$2, multilingual$7, base$1a, multilingual$3, multilingual$5, multilingual$1, base$15, base$O, base$13, base$12, base$1g, base$14, base$11, base$q, multilingual, base$w, base$b, base$W, multilingual$4, base$Z, base$9, base$x];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after', 'addon-before', 'addon-after'];
    return _objectSpread2$1({}, multilingual$8(props, context));
  }
};

var TTextElement = {
  name: 'TTextElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'blur', 'focus', 'keydown', 'keyup', 'keypress', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 't-text',
      private: true
    },
    default: {
      required: false,
      type: [Object, String, Number],
      localized: true,
      default: undefined
    },
    addons: {
      required: false,
      type: [Object],
      localized: true,
      default: () => ({})
    },
    autocomplete: {
      required: false,
      type: [String, Number],
      default: null
    },
    debounce: {
      required: false,
      type: [Number],
      default: null
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    floating: {
      required: false,
      type: [String, Boolean, Object],
      localized: true,
      default: null
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    inputType: {
      required: false,
      type: [String],
      default: 'text'
    },
    attrs: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    placeholder: {
      required: false,
      type: [String, Object],
      localized: true,
      default: null
    },
    readonly: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    loading: {
      type: [Boolean],
      required: false,
      default: false
    },
    onBlur: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onKeydown: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onKeyup: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onKeypress: {
      required: false,
      type: [Function],
      default: null,
      private: true
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$R, base$T, base$_, base$L, base$1i, base$U, base$X, base$G, base$A, base$1, multilingual$6, multilingual$2, multilingual$7, base$1a, multilingual$3, base$M, multilingual$5, multilingual$1, base$15, base$O, base$13, base$12, base$1g, base$14, base$11, base$q, base$w, base$b, base$W, multilingual$4, base$Z, base$9, base$x];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after', 'addon-before', 'addon-after'];
    return _objectSpread2$1({}, multilingual$8(props, context));
  }
};

var TEditorElement = {
  name: 'TEditorElement',
  mixins: [BaseElement, HasView, HasChange, HasData, HasValidation],
  emits: ['reset', 'clear', 'change', 'blur', 'alert', 'error', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeUnmount', 'unmounted'],
  props: {
    type: {
      required: false,
      type: [String],
      default: 't-editor',
      private: true
    },
    default: {
      required: false,
      type: [Object, String, Number],
      localized: true,
      default: null
    },
    debounce: {
      required: false,
      type: [Number],
      default: null
    },
    disabled: {
      required: false,
      type: [Boolean, Function, Array, Object],
      default: false
    },
    id: {
      required: false,
      type: [String],
      default: null
    },
    placeholder: {
      required: false,
      type: [String, Object],
      localized: true,
      default: null
    },
    onError: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    onAlert: {
      required: false,
      type: [Function],
      default: null,
      private: true
    },
    accept: {
      required: false,
      type: [Array],
      default: null
    },
    acceptMimes: {
      required: false,
      type: [Array],
      default: null
    },
    endpoint: {
      required: false,
      type: [String, Function, Promise],
      default: null,
      '@default': 'config.endpoints.attachment.url'
    },
    method: {
      required: false,
      type: [String],
      default: null,
      '@default': 'config.endpoints.attachment.method'
    },
    hideTools: {
      required: false,
      type: [Array],
      default: () => []
    },
    onBlur: {
      required: false,
      type: [Function],
      default: null,
      private: true
    }
  },
  setup(props, ctx) {
    var context = _objectSpread2$1({}, ctx);
    context.features = [base$Y, base$1f, base$1e, base$$, base$R, base$T, base$_, base$1i, base$U, base$X, base$1, multilingual$6, multilingual$2, multilingual$7, base$1a, multilingual$3, multilingual$5, teditor, base$15, base$O, base$13, base$12, base$3, base$1g, base$14, base$11, base$q, base$2, base$r, base$b, base$W, multilingual$4, base$Z, base$x];
    context.slots = ['label', 'info', 'required', 'description', 'before', 'between', 'after'];
    return _objectSpread2$1({}, multilingual$8(props, context));
  }
};

var CheckboxgroupCheckbox = {
  name: 'CheckboxgroupCheckbox',
  props: {
    item: {
      type: [Object, String, Number],
      required: true
    },
    value: {
      type: [String, Number, Boolean],
      required: true
    },
    items: {
      type: [Object, Array],
      required: true
    },
    index: {
      type: [Number],
      required: true
    },
    attrs: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    standalone: {
      required: false,
      type: [Boolean],
      default: false
    }
  },
  setup(props, context) {
    var {
      value,
      item
    } = toRefs(props);
    var {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme
    } = base$16(props, context);

    // ============== COMPUTED ==============

    /**
     * Whether the checkbox should be disabled.
     * 
     * @type {boolean}
     */
    var isDisabled = computed(() => {
      var _item$value;
      return el$.value.disabledItems.map(i => String(i)).indexOf(String(value.value)) !== -1 || el$.value.isDisabled || !!((_item$value = item.value) !== null && _item$value !== void 0 && _item$value.disabled);
    });

    /**
     * Whether the checkbox is checked.
     * 
     * @type {boolean}
     */
    var checked = computed(() => {
      var _el$$value$value, _el$$value$value2;
      return ((_el$$value$value = el$.value.value) === null || _el$$value$value === void 0 ? void 0 : _el$$value$value.indexOf(String(value.value))) !== -1 || ((_el$$value$value2 = el$.value.value) === null || _el$$value$value2 === void 0 ? void 0 : _el$$value$value2.indexOf(Number(value.value))) !== -1;
    });

    /**
     * The `id` attribute of the input.
     * 
     * @type {boolean}
     */
    var id = computed(() => {
      return "".concat(el$.value.fieldId, "-").concat(value.value);
    });

    /**
     * The `name` attribute of the input.
     * 
     * @type {boolean}
     */
    var name = computed(() => {
      return "".concat(el$.value.path, "-").concat(value.value);
    });

    // =============== METHODS ==============

    /**
     * Handles `keydown` event.
     * 
     * @param {Event} e* event object 
     * @returns {void}
     * @private
     */
    var handleKeydown = e => {
      if (['ArrowRight', 'ArrowDown'].indexOf(e.key) !== -1) {
        e.preventDefault();
        var next = e.target.nextElementSibling;
        if ((next === null || next === void 0 ? void 0 : next.getAttribute('role')) === 'checkbox') {
          next.focus();
        }
      } else if (['ArrowLeft', 'ArrowUp'].indexOf(e.key) !== -1) {
        e.preventDefault();
        var previous = e.target.previousElementSibling;
        if ((previous === null || previous === void 0 ? void 0 : previous.getAttribute('role')) === 'checkbox') {
          previous.focus();
        }
      }
    };
    return {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme,
      isDisabled,
      id,
      name,
      checked,
      handleKeydown
    };
  }
};

var base = function base(props, context, dependencies) {
  var el$ = dependencies.el$;
  var form$ = dependencies.form$;

  // ============== COMPUTED ==============

  /**
   * Whether the preview component should be visible.
   * 
   * @type {boolean}
   */
  var visible = computed(() => {
    return el$.value.stage > 0;
  });

  /**
   * Whether the file has link and should be clickable.
   * 
   * @type {boolean}
   */
  var hasLink = computed(() => {
    return el$.value.link && el$.value.clickable;
  });

  /**
   * Whether the preview has upload error.
   * 
   * @type {boolean}
   */
  var hasError = computed(() => {
    return el$.value.hasUploadError;
  });

  /**
   * The link for the file.
   * 
   * @type {string}
   */
  var link = computed(() => {
    return el$.value.link;
  });

  /**
   * The filename to display.
   * 
   * @type {string}
   */
  var filename = computed(() => {
    var filename = el$.value.filename && typeof el$.value.filename === 'string' ? el$.value.filename.split('\\').pop().split('/').pop() : el$.value.filename;
    if (filename) {
      filename = filename.split('?')[0];
    }
    return filename;
  });

  /**
   * Whether the file should be clickable if it is already permantently uploaded.
   * 
   * @type {boolean}
   */
  var clickable = computed(() => {
    return el$.value.clickable;
  });

  /**
   * Whether the temporary or permanent file is uploaded.
   * 
   * @type {boolean}
   */
  var uploaded = computed(() => {
    return el$.value.stage > 1;
  });

  /**
   * Whether the file is currently uploading.
   * 
   * @type {boolean}
   */
  var uploading = computed(() => {
    return el$.value.uploading;
  });

  /**
   * The percentage of progress when the file is being temporarily uploaded (0-100).
   * 
   * @type {number}
   */
  var progress = computed(() => {
    return el$.value.progress;
  });

  /**
   * Whether the file can be removed. 
   * 
   * @type {boolean}
   */
  var canRemove = computed(() => {
    return (el$.value.canRemove || el$.value.uploading) && !el$.value.isDisabled;
  });

  /**
   * Whether temporary file can be uploaded.
   * 
   * @type {boolean}
   */
  var canUploadTemp = computed(() => {
    return el$.value.canUploadTemp;
  });

  /**
   * The text for upload button. Can be also changed in the locale file: `vueform.elements.file.upload`
   * 
   * @type {string}
   */
  var uploadText = computed(() => {
    return form$.value.translations.vueform.elements.file.upload;
  });

  /**
   * The `aria-labelledby` attribute of the preview.
   * 
   * @type {string}
   */
  var ariaLabelledby = computed(() => {
    return el$.value.embed ? undefined : el$.value.labelId;
  });

  // =============== METHODS ==============

  /**
   * Upload the currently selected file as temporary.
   * 
   * @returns {void}
   */
  var upload = () => {
    el$.value.uploadTemp();
  };

  /**
   * Remove the file.
   * 
   * @returns {void}
   */
  var remove = () => {
    if (uploading.value) {
      el$.value.handleAbort();
    } else {
      el$.value.handleRemove();
    }
  };

  /**
   * Handle the keyup event of the preview.
   * 
   * @param {Event} event* the keyup Event
   * @returns {Promise}
   * @private
   */
  var handleKeyup = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* (e) {
      switch (e.key) {
        case 'Backspace':
        case 'Delete':
          remove();
          if (!el$.value.canSelect) {
            return;
          }
          yield nextTick();
          document.querySelector("#".concat(el$.value.fieldId)).focus();
          break;
        case 'Enter':
          if (el$.value.auto) {
            return;
          }
          upload();
          break;
      }
    });
    return function handleKeyup(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  // =============== HOOKS ================

  return {
    visible,
    hasLink,
    hasError,
    link,
    filename,
    clickable,
    uploaded,
    uploading,
    progress,
    canRemove,
    canUploadTemp,
    uploadText,
    ariaLabelledby,
    upload,
    remove,
    handleKeyup
  };
};

var FilePreview = {
  name: 'FilePreview',
  props: {
    attrs: {
      required: false,
      type: [Object],
      default: () => ({})
    }
  },
  setup(props, context) {
    var {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme
    } = base$16(props, context);
    var {
      visible,
      hasLink,
      hasError,
      link,
      filename,
      clickable,
      uploaded,
      uploading,
      progress,
      canRemove,
      canUploadTemp,
      uploadText,
      ariaLabelledby,
      upload,
      remove,
      handleKeyup
    } = base(props, context, {
      el$,
      form$
    });

    // ============== COMPUTED ==============

    /**
     * The image's preview when [`view`](#option-view) is `image` or `gallery`. Equals to the `link` if the file is already uploaded and `base64` if only selected or temporarily uploaded.
     * 
     * @type {string}
     */
    var preview = computed(() => {
      return el$.value.preview;
    });

    /**
     * The `aria-placeholder` attribute of the preview.
     * 
     * @type {string}
     */
    var ariaPlaceholder = computed(() => {
      var text = el$.value.embed && el$.value.View !== 'gallery' ? undefined : filename.value;
      if (hasError.value) {
        if (text) {
          text += ', error';
        } else {
          text = 'error';
        }
      }
      return text;
    });

    /**
     * The `aria-roledescription` attribute of the preview.
     * 
     * @type {string}
     */
    var ariaRoledescription = computed(() => {
      return el$.value.embed && el$.value.View !== 'gallery' || uploaded.value || el$.value.auto ? undefined : uploadText.value;
    });
    return {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme,
      visible,
      hasLink,
      hasError,
      link,
      filename,
      clickable,
      uploaded,
      uploading,
      progress,
      canRemove,
      canUploadTemp,
      uploadText,
      preview,
      ariaLabelledby,
      ariaPlaceholder,
      ariaRoledescription,
      upload,
      remove,
      handleKeyup
    };
  }
};

var RadiogroupRadio = {
  name: 'RadiogroupRadio',
  props: {
    item: {
      type: [Object, String, Number],
      required: true
    },
    value: {
      type: [String, Number, Boolean],
      required: true
    },
    items: {
      type: [Object, Array],
      required: true
    },
    index: {
      type: [Number],
      required: true
    },
    attrs: {
      required: false,
      type: [Object],
      default: () => ({})
    },
    standalone: {
      required: false,
      type: [Boolean],
      default: false
    }
  },
  setup(props, context) {
    var {
      value,
      item
    } = toRefs(props);
    var {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme
    } = base$16(props, context);

    // ============== COMPUTED ==============

    /**
     * Whether the radio should be disabled.
     * 
     * @type {boolean}
     */
    var isDisabled = computed(() => {
      var _item$value;
      return el$.value.disabledItems.map(i => String(i)).indexOf(String(value.value)) !== -1 || el$.value.isDisabled || !!((_item$value = item.value) !== null && _item$value !== void 0 && _item$value.disabled);
    });

    /**
     * Whether the radio is checked.
     * 
     * @type {boolean}
     */
    var checked = computed(() => {
      return el$.value.value === String(value.value) || el$.value.value === Number(value.value);
    });

    /**
     * The `id` attribute of the input.
     * 
     * @type {boolean}
     */
    var id = computed(() => {
      return "".concat(el$.value.fieldId, "-").concat(value.value);
    });

    /**
     * The `name` attribute of the input.
     * 
     * @type {boolean}
     */
    var name = computed(() => {
      return el$.value.path;
    });

    // =============== METHODS ==============

    /**
     * Handles `keydown` event.
     * 
     * @param {Event} e* event object 
     * @returns {void}
     * @private
     */
    var handleKeydown = e => {
      if (['ArrowRight', 'ArrowDown'].indexOf(e.key) !== -1) {
        e.preventDefault();
        var next = e.target.nextElementSibling;
        if ((next === null || next === void 0 ? void 0 : next.getAttribute('role')) === 'radio') {
          next.focus();
        }
      } else if (['ArrowLeft', 'ArrowUp'].indexOf(e.key) !== -1) {
        e.preventDefault();
        var previous = e.target.previousElementSibling;
        if ((previous === null || previous === void 0 ? void 0 : previous.getAttribute('role')) === 'radio') {
          previous.focus();
        }
      }
    };
    return {
      el$,
      form$,
      Size,
      View,
      classesInstance,
      classes,
      Templates,
      template,
      theme,
      isDisabled,
      id,
      name,
      checked,
      handleKeydown
    };
  }
};

var index = {
  Vueform: VueformComponent,
  FormErrors,
  FormMessages,
  FormLanguages,
  FormLanguage,
  FormTabs,
  FormTab,
  FormSteps,
  FormStepsControls,
  FormStepsControl,
  FormStep,
  FormElements,
  ElementLayout,
  ElementLayoutInline,
  ElementLoader,
  ElementLabelFloating,
  ElementLabel,
  ElementInfo,
  ElementDescription,
  ElementError,
  ElementMessage,
  ElementRequired,
  ElementText,
  DragAndDrop,
  ElementAddon,
  ElementAddonOptions,
  DatepickerWrapper,
  EditorWrapper,
  ButtonElement,
  CaptchaElement,
  CheckboxElement,
  CheckboxgroupElement,
  DateElement,
  DatesElement,
  FileElement,
  GenericElement,
  GridElement,
  GroupElement,
  HiddenElement,
  ListElement,
  LocationElement,
  MatrixElement,
  MultifileElement,
  MultiselectElement,
  ObjectElement,
  PhoneElement,
  RadioElement,
  RadiogroupElement,
  SelectElement,
  SignatureElement,
  SliderElement,
  StaticElement,
  TagsElement,
  TextareaElement,
  TextElement,
  ToggleElement,
  EditorElement,
  TTextareaElement,
  TTextElement,
  TEditorElement,
  CheckboxgroupCheckbox,
  FilePreview,
  RadiogroupRadio
};

var components = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': index,
  Vueform: VueformComponent,
  FormErrors: FormErrors,
  FormMessages: FormMessages,
  FormLanguages: FormLanguages,
  FormLanguage: FormLanguage,
  FormTabs: FormTabs,
  FormTab: FormTab,
  FormSteps: FormSteps,
  FormStepsControls: FormStepsControls,
  FormStepsControl: FormStepsControl,
  FormStep: FormStep,
  FormElements: FormElements,
  ElementLayout: ElementLayout,
  ElementLayoutInline: ElementLayoutInline,
  ElementLoader: ElementLoader,
  ElementLabelFloating: ElementLabelFloating,
  ElementLabel: ElementLabel,
  ElementInfo: ElementInfo,
  ElementDescription: ElementDescription,
  ElementError: ElementError,
  ElementMessage: ElementMessage,
  ElementRequired: ElementRequired,
  ElementText: ElementText,
  DragAndDrop: DragAndDrop,
  ElementAddon: ElementAddon,
  ElementAddonOptions: ElementAddonOptions,
  DatepickerWrapper: DatepickerWrapper,
  EditorWrapper: EditorWrapper,
  ButtonElement: ButtonElement,
  CaptchaElement: CaptchaElement,
  CheckboxElement: CheckboxElement,
  CheckboxgroupElement: CheckboxgroupElement,
  DateElement: DateElement,
  DatesElement: DatesElement,
  FileElement: FileElement,
  GenericElement: GenericElement,
  GridElement: GridElement,
  GroupElement: GroupElement,
  HiddenElement: HiddenElement,
  ListElement: ListElement,
  LocationElement: LocationElement,
  MatrixElement: MatrixElement,
  MultifileElement: MultifileElement,
  MultiselectElement: MultiselectElement,
  ObjectElement: ObjectElement,
  PhoneElement: PhoneElement,
  RadioElement: RadioElement,
  RadiogroupElement: RadiogroupElement,
  SelectElement: SelectElement,
  SignatureElement: SignatureElement,
  SliderElement: SliderElement,
  StaticElement: StaticElement,
  TagsElement: TagsElement,
  TextareaElement: TextareaElement,
  TextElement: TextElement,
  ToggleElement: ToggleElement,
  EditorElement: EditorElement,
  TTextareaElement: TTextareaElement,
  TTextElement: TTextElement,
  TEditorElement: TEditorElement,
  CheckboxgroupCheckbox: CheckboxgroupCheckbox,
  FilePreview: FilePreview,
  RadiogroupRadio: RadiogroupRadio
});

function element (options) {
  var component = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (!options.name) {
    throw Error('The `name` attribute must be defined to create a new element');
  }
  options = _objectSpread2$1(_objectSpread2$1({}, options), component);
  var name = options.name;
  var ComponentName = "".concat(upperFirst_1(camelCase_1(name)));
  var emits = [].concat(GenericElement.emits).concat(options.emits || []);
  return _objectSpread2$1({
    name: ComponentName,
    components: options.components || {},
    mixins: [].concat(GenericElement.mixins).concat(options.mixins || []),
    emits,
    props: _objectSpread2$1(_objectSpread2$1(_objectSpread2$1({}, GenericElement.props), options.props || {}), {}, {
      type: {
        required: false,
        type: [String],
        default: name,
        private: true
      }
    }),
    setup(props, ctx) {
      var context = _objectSpread2$1(_objectSpread2$1({}, ctx), {}, {
        emits,
        name: ref(ComponentName),
        nullValue: options.nullValue !== undefined ? options.nullValue : null
      });
      var element = GenericElement.setup(props, context);
      context.element = element;
      var setup = options.setup ? options.setup(props, context) : {};
      return _objectSpread2$1(_objectSpread2$1({}, element), setup);
    }
  }, omit_1(options, ['setup', 'mixins', 'emits', 'props']));
}

function defineConfig(config) {
  return config;
}

var VueformElement = element;
var defineElement = element;
installer(undefined, {
  Vueform: VueformComponent,
  FormElements
}, {}, {
  moment
});

var vueform = installer(undefined, _objectSpread2$1({}, components), _objectSpread2$1({}, rules), {
  moment
});

export { ButtonElement, CaptchaElement, CheckboxElement, CheckboxgroupCheckbox, CheckboxgroupElement, DateElement, DatepickerWrapper, DatesElement, DragAndDrop, EditorElement, EditorWrapper, ElementAddon, ElementAddonOptions, ElementDescription, ElementError, ElementInfo, ElementLabel, ElementLabelFloating, ElementLayout, ElementLayoutInline, ElementLoader, ElementMessage, ElementRequired, ElementText, FileElement, FilePreview, FormElements, FormErrors, FormLanguage, FormLanguages, FormMessages, FormStep, FormSteps, FormStepsControl, FormStepsControls, FormTab, FormTabs, GenericElement, GridElement, GroupElement, HiddenElement, ListElement, LocationElement, MatrixElement, MultifileElement, MultiselectElement, ObjectElement, PhoneElement, RadioElement, RadiogroupElement, RadiogroupRadio, SelectElement, SignatureElement, SliderElement, StaticElement, TEditorElement, TTextElement, TTextareaElement, TagsElement, TextElement, TextareaElement, ToggleElement, Validator, VueformComponent as Vueform, VueformElement, accepted, active_url, after, after_or_equal, alpha, alpha_dash, alpha_num, array$2 as array, before, before_or_equal, between, boolean$1 as boolean, captcha$2 as captcha, completed, confirmed, date$4 as date, date_equals, date_format, vueform as default, defineConfig, defineElement, different, digits, digits_between, dimensions, distinct, element, email, exists, file$5 as file, filled, gt, gte, image, in_, in_array, installer, integer, ip, ipv4, ipv6, json, lt, lte, max$1 as max, mimes, mimetypes, min$2 as min, not_in, not_regex, nullable, numeric, regex, required, same, size, string, timezone, unique, url, base$1g as useClasses, base$1h as useVueform, uuid, vueform };
